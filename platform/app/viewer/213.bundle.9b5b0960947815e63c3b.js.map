{"version":3,"file":"213.bundle.9b5b0960947815e63c3b.js","mappings":"qIAEMA,E,mDAAKC,GACLC,EAAoB,GAAGF,sC,0BCC7B,MAAMG,EAAiB,CACrBC,gCAAiC,mCACjCC,iCAAkC,mCAClCC,+BAAgC,mCAEhCC,gCAAiC,4BACjCC,sDAAuD,+BAGnDC,EAAeC,OAAOC,OAAOR,GAC7BS,EAA+B,CACnCT,EAAeI,gCACfJ,EAAeK,uDAaXK,EAA8BH,OAAOC,OAVT,CAChCG,2BAA4B,0BAC5BC,yCAA0C,0BAC1CC,wCAAyC,0BACzCC,wCAAyC,0BACzCC,kCAAmC,0BACnCC,sBAAuB,0BACvBC,yBAA0B,4B,wNCtB5B,MAAMC,EAAYC,EAAAA,MAAW,IACpB,kCAGHC,EAA+BC,GAEjCF,EAAAA,cAACA,EAAAA,SAAc,CAACG,SAAUH,EAAAA,cAAA,WAAK,eAC7BA,EAAAA,cAACD,EAAcG,IAgDrB,QAxC4B,CAI1BxB,GAAE,EAQF0B,kBAAiBA,EAAC,gBAAEC,EAAe,iBAAEC,KAW5B,CAAC,CAAEC,KAAM,cAAeC,UAVcN,GAEzCF,EAAAA,cAACC,EAA4BQ,EAAA,CAC3BJ,gBAAiBA,EACjBC,iBAAkBA,GACdJ,MAOZQ,yBDyDa,UAAkC,gBAAEL,EAAe,iBAAEC,IAKlE,MAAO,CACL,CACEC,KAAM,cACNpB,eACAwB,yBAR6BC,GAvEDC,EAACD,EAAWP,EAAiBC,KAC7D,MAAMQ,EAAaR,EAAiBS,sBAAsB,GAC1D,OAAOH,EACJI,QAAOC,IACN,MAAMC,EACJD,EAASE,4BAA8BF,EAASG,mBAAqBH,EAAS,YAEhF,QAAI1B,EAA4B8B,SAASH,IAIrCD,EAASK,cAAgBzC,EAAeE,kCAO1CO,EAA6B+B,SAASJ,EAASK,cAAgBL,EAASM,gBAAkB,EAAE,IAG/FC,KAAIC,IACH,MAAM,SAAEC,EAAQ,eAAEC,EAAc,kBAAEC,EAAoB,QAAO,QAAEC,GAAYJ,GACrE,aAAEK,EAAY,WAAEC,EAAU,kBAAEC,EAAiB,iBAAEC,EAAgB,eAAEV,EAAc,IAAEW,GACrFT,EACIU,EAAWrB,EAAWsB,SAASC,UAAU,CAC7CZ,WACAa,WAAY,QACZC,IAAK,YACLL,QAEIM,EAAa,CAEjBd,WACAe,sBAAuBC,EAAAA,GAAMC,OAC7Bf,oBACAE,eACAC,aACAJ,iBACAK,oBACAC,mBACArD,kBAAiB,EACjBgE,iBAAkB,KAClBC,aAAc,KACdC,aAAcC,EAAAA,MAAAA,aAAqBC,MAEnCb,WACAc,YAAad,EACbvB,UAAW,CAACa,GACZyB,aAAcpC,EAAWsB,SAASC,UAAU,CAC1CZ,WACA0B,YAAa,aACbC,YAAa,aACbb,IAAK,WAEPc,SAAU,CAACxB,GACXyB,qBAAqB,EACrBC,UAAU,EACVpE,eACAqE,eAAgBjC,EAChBE,YAMF,OAJAgC,EAAAA,UAAAA,wBAAgCC,IAAI7B,EAAS,CAC3C8B,KAAM,iBACN1C,SAAU,CAAE2C,SAAUzB,KAEjBK,CAAU,GACjB,EAKK3B,CAA0BD,EAAWP,EAAiBC,IAUjE,E","sources":["webpack:///../../../extensions/dicom-video/src/id.js","webpack:///../../../extensions/dicom-video/src/getSopClassHandlerModule.js","webpack:///../../../extensions/dicom-video/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.dicom-video`;\n\nexport { SOPClassHandlerId, id };\n","import { SOPClassHandlerId } from './id';\nimport { utils } from '@ohif/core';\nimport { utilities as csUtils, Enums as csEnums } from '@cornerstonejs/core';\n\nconst SOP_CLASS_UIDS = {\n  VIDEO_MICROSCOPIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.2.1',\n  VIDEO_PHOTOGRAPHIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.4.1',\n  VIDEO_ENDOSCOPIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.1.1',\n  /** Need to use fallback, could be video or image */\n  SECONDARY_CAPTURE_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.7',\n  MULTIFRAME_TRUE_COLOR_SECONDARY_CAPTURE_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.7.4',\n};\n\nconst sopClassUids = Object.values(SOP_CLASS_UIDS);\nconst secondaryCaptureSopClassUids = [\n  SOP_CLASS_UIDS.SECONDARY_CAPTURE_IMAGE_STORAGE,\n  SOP_CLASS_UIDS.MULTIFRAME_TRUE_COLOR_SECONDARY_CAPTURE_IMAGE_STORAGE,\n];\n\nconst SupportedTransferSyntaxes = {\n  MPEG4_AVC_264_HIGH_PROFILE: '1.2.840.10008.1.2.4.102',\n  MPEG4_AVC_264_BD_COMPATIBLE_HIGH_PROFILE: '1.2.840.10008.1.2.4.103',\n  MPEG4_AVC_264_HIGH_PROFILE_FOR_2D_VIDEO: '1.2.840.10008.1.2.4.104',\n  MPEG4_AVC_264_HIGH_PROFILE_FOR_3D_VIDEO: '1.2.840.10008.1.2.4.105',\n  MPEG4_AVC_264_STEREO_HIGH_PROFILE: '1.2.840.10008.1.2.4.106',\n  HEVC_265_MAIN_PROFILE: '1.2.840.10008.1.2.4.107',\n  HEVC_265_MAIN_10_PROFILE: '1.2.840.10008.1.2.4.108',\n};\n\nconst supportedTransferSyntaxUIDs = Object.values(SupportedTransferSyntaxes);\n\nconst _getDisplaySetsFromSeries = (instances, servicesManager, extensionManager) => {\n  const dataSource = extensionManager.getActiveDataSource()[0];\n  return instances\n    .filter(metadata => {\n      const tsuid =\n        metadata.AvailableTransferSyntaxUID || metadata.TransferSyntaxUID || metadata['00083002'];\n\n      if (supportedTransferSyntaxUIDs.includes(tsuid)) {\n        return true;\n      }\n\n      if (metadata.SOPClassUID === SOP_CLASS_UIDS.VIDEO_PHOTOGRAPHIC_IMAGE_STORAGE) {\n        return true;\n      }\n\n      // Assume that an instance with one of the secondary capture SOPClassUIDs and\n      // with at least 90 frames (i.e. typically 3 seconds of video) is indeed a video.\n      return (\n        secondaryCaptureSopClassUids.includes(metadata.SOPClassUID) && metadata.NumberOfFrames >= 90\n      );\n    })\n    .map(instance => {\n      const { Modality, SOPInstanceUID, SeriesDescription = 'VIDEO', imageId } = instance;\n      const { SeriesNumber, SeriesDate, SeriesInstanceUID, StudyInstanceUID, NumberOfFrames, url } =\n        instance;\n      const videoUrl = dataSource.retrieve.directURL({\n        instance,\n        singlepart: 'video',\n        tag: 'PixelData',\n        url,\n      });\n      const displaySet = {\n        //plugin: id,\n        Modality,\n        displaySetInstanceUID: utils.guid(),\n        SeriesDescription,\n        SeriesNumber,\n        SeriesDate,\n        SOPInstanceUID,\n        SeriesInstanceUID,\n        StudyInstanceUID,\n        SOPClassHandlerId,\n        referencedImages: null,\n        measurements: null,\n        viewportType: csEnums.ViewportType.VIDEO,\n        // The videoUrl is deprecated, the preferred URL is renderedUrl\n        videoUrl,\n        renderedUrl: videoUrl,\n        instances: [instance],\n        thumbnailSrc: dataSource.retrieve.directURL({\n          instance,\n          defaultPath: '/thumbnail',\n          defaultType: 'image/jpeg',\n          tag: 'Absent',\n        }),\n        imageIds: [imageId],\n        isDerivedDisplaySet: true,\n        isLoaded: false,\n        sopClassUids,\n        numImageFrames: NumberOfFrames,\n        instance,\n      };\n      csUtils.genericMetadataProvider.add(imageId, {\n        type: 'imageUrlModule',\n        metadata: { rendered: videoUrl },\n      });\n      return displaySet;\n    });\n};\n\nexport default function getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-video',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n","import React from 'react';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport { id } from './id';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneVideoViewport');\n});\n\nconst OHIFCornerstoneVideoViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n *\n */\nconst dicomVideoExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n\n  /**\n   *\n   *\n   * @param {object} [configuration={}]\n   * @param {object|array} [configuration.csToolsConfig] - Passed directly to `initCornerstoneTools`\n   */\n  getViewportModule({ servicesManager, extensionManager }) {\n    const ExtendedOHIFCornerstoneVideoViewport = props => {\n      return (\n        <OHIFCornerstoneVideoViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-video', component: ExtendedOHIFCornerstoneVideoViewport }];\n  },\n  getSopClassHandlerModule,\n};\n\nfunction _getToolAlias(toolName) {\n  let toolAlias = toolName;\n\n  switch (toolName) {\n    case 'EllipticalRoi':\n      toolAlias = 'SREllipticalRoi';\n      break;\n  }\n\n  return toolAlias;\n}\n\nexport default dicomVideoExtension;\n"],"names":["id","packageJson","SOPClassHandlerId","SOP_CLASS_UIDS","VIDEO_MICROSCOPIC_IMAGE_STORAGE","VIDEO_PHOTOGRAPHIC_IMAGE_STORAGE","VIDEO_ENDOSCOPIC_IMAGE_STORAGE","SECONDARY_CAPTURE_IMAGE_STORAGE","MULTIFRAME_TRUE_COLOR_SECONDARY_CAPTURE_IMAGE_STORAGE","sopClassUids","Object","values","secondaryCaptureSopClassUids","supportedTransferSyntaxUIDs","MPEG4_AVC_264_HIGH_PROFILE","MPEG4_AVC_264_BD_COMPATIBLE_HIGH_PROFILE","MPEG4_AVC_264_HIGH_PROFILE_FOR_2D_VIDEO","MPEG4_AVC_264_HIGH_PROFILE_FOR_3D_VIDEO","MPEG4_AVC_264_STEREO_HIGH_PROFILE","HEVC_265_MAIN_PROFILE","HEVC_265_MAIN_10_PROFILE","Component","React","OHIFCornerstoneVideoViewport","props","fallback","getViewportModule","servicesManager","extensionManager","name","component","_extends","getSopClassHandlerModule","getDisplaySetsFromSeries","instances","_getDisplaySetsFromSeries","dataSource","getActiveDataSource","filter","metadata","tsuid","AvailableTransferSyntaxUID","TransferSyntaxUID","includes","SOPClassUID","NumberOfFrames","map","instance","Modality","SOPInstanceUID","SeriesDescription","imageId","SeriesNumber","SeriesDate","SeriesInstanceUID","StudyInstanceUID","url","videoUrl","retrieve","directURL","singlepart","tag","displaySet","displaySetInstanceUID","utils","guid","referencedImages","measurements","viewportType","csEnums","VIDEO","renderedUrl","thumbnailSrc","defaultPath","defaultType","imageIds","isDerivedDisplaySet","isLoaded","numImageFrames","csUtils","add","type","rendered"],"sourceRoot":""}