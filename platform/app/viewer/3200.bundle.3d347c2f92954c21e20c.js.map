{"version":3,"file":"3200.bundle.3d347c2f92954c21e20c.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/measurementTrackingMachine.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptBeginTracking.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewSeries.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewStudy.ts","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHydrateStructuredReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/hydrateStructuredReport.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/TrackedMeasurementsContext.tsx","webpack:///../../../extensions/measurement-tracking/src/getContextModule.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/constants/actionIcons.ts","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/constants/viewPresets.ts","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/PanelStudyBrowserTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/getImageSrcFromImageId.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/requestDisplaySetCreationForStudy.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/getPanelModule.tsx","webpack:///../../../extensions/measurement-tracking/src/getViewportModule.tsx","webpack:///../../../extensions/measurement-tracking/src/index.tsx","webpack:///../../../extensions/measurement-tracking/src/id.js"],"sourcesContent":["import { assign } from 'xstate';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n  HYDRATE_REPORT: 5,\n};\n\nconst machineConfiguration = {\n  id: 'measurementTracking',\n  initial: 'idle',\n  context: {\n    activeViewportId: null,\n    trackedStudy: '',\n    trackedSeries: [],\n    ignoredSeries: [],\n    //\n    prevTrackedStudy: '',\n    prevTrackedSeries: [],\n    prevIgnoredSeries: [],\n    //\n    ignoredSRSeriesForHydration: [],\n    isDirty: false,\n  },\n  states: {\n    off: {\n      type: 'final',\n    },\n    labellingOnly: {\n      on: {\n        TRACK_SERIES: [\n          {\n            target: 'promptLabelAnnotation',\n            actions: ['setPreviousState'],\n          },\n          {\n            target: 'off',\n          },\n        ],\n      },\n    },\n    idle: {\n      entry: 'clearContext',\n      on: {\n        TRACK_SERIES: [\n          {\n            target: 'promptLabelAnnotation',\n            cond: 'isLabelOnMeasure',\n            actions: ['setPreviousState'],\n          },\n          {\n            target: 'promptBeginTracking',\n            actions: ['setPreviousState'],\n          },\n        ],\n        // Unused? We may only do PROMPT_HYDRATE_SR now?\n        SET_TRACKED_SERIES: [\n          {\n            target: 'tracking',\n            actions: ['setTrackedStudyAndMultipleSeries', 'setIsDirtyToClean'],\n          },\n        ],\n        PROMPT_HYDRATE_SR: {\n          target: 'promptHydrateStructuredReport',\n          cond: 'hasNotIgnoredSRSeriesForHydration',\n        },\n        RESTORE_PROMPT_HYDRATE_SR: 'promptHydrateStructuredReport',\n        HYDRATE_SR: 'hydrateStructuredReport',\n        UPDATE_ACTIVE_VIEWPORT_ID: {\n          actions: assign({\n            activeViewportId: (_, event) => event.activeViewportId,\n          }),\n        },\n      },\n    },\n    promptBeginTracking: {\n      invoke: {\n        src: 'promptBeginTracking',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: ['setTrackedStudyAndSeries', 'setIsDirty'],\n            cond: 'shouldSetStudyAndSeries',\n          },\n          {\n            target: 'labellingOnly',\n            cond: 'isLabelOnMeasureAndShouldKillMachine',\n          },\n          {\n            target: 'off',\n            cond: 'shouldKillMachine',\n          },\n          {\n            target: 'idle',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    tracking: {\n      on: {\n        TRACK_SERIES: [\n          {\n            target: 'promptLabelAnnotation',\n            cond: 'isLabelOnMeasure',\n            actions: ['setPreviousState'],\n          },\n          {\n            target: 'promptTrackNewStudy',\n            cond: 'isNewStudy',\n          },\n          {\n            target: 'promptTrackNewSeries',\n            cond: 'isNewSeries',\n          },\n        ],\n        UNTRACK_SERIES: [\n          {\n            target: 'tracking',\n            actions: ['removeTrackedSeries', 'setIsDirty'],\n            cond: 'hasRemainingTrackedSeries',\n          },\n          {\n            target: 'idle',\n          },\n        ],\n        SET_TRACKED_SERIES: [\n          {\n            target: 'tracking',\n            actions: ['setTrackedStudyAndMultipleSeries'],\n          },\n        ],\n        SAVE_REPORT: 'promptSaveReport',\n        SET_DIRTY: [\n          {\n            target: 'tracking',\n            actions: ['setIsDirty'],\n            cond: 'shouldSetDirty',\n          },\n          {\n            target: 'tracking',\n          },\n        ],\n      },\n    },\n    promptTrackNewSeries: {\n      invoke: {\n        src: 'promptTrackNewSeries',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: ['addTrackedSeries', 'setIsDirty'],\n            cond: 'shouldAddSeries',\n          },\n          {\n            target: 'tracking',\n            actions: [\n              'discardPreviouslyTrackedMeasurements',\n              'setTrackedStudyAndSeries',\n              'setIsDirty',\n            ],\n            cond: 'shouldSetStudyAndSeries',\n          },\n          {\n            target: 'promptSaveReport',\n            cond: 'shouldPromptSaveReport',\n          },\n          {\n            target: 'tracking',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    promptTrackNewStudy: {\n      invoke: {\n        src: 'promptTrackNewStudy',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: [\n              'discardPreviouslyTrackedMeasurements',\n              'setTrackedStudyAndSeries',\n              'setIsDirty',\n            ],\n            cond: 'shouldSetStudyAndSeries',\n          },\n          {\n            target: 'tracking',\n            actions: ['ignoreSeries'],\n            cond: 'shouldAddIgnoredSeries',\n          },\n          {\n            target: 'promptSaveReport',\n            cond: 'shouldPromptSaveReport',\n          },\n          {\n            target: 'tracking',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    promptSaveReport: {\n      invoke: {\n        src: 'promptSaveReport',\n        onDone: [\n          // \"clicked the save button\"\n          // - should clear all measurements\n          // - show DICOM SR\n          {\n            target: 'idle',\n            actions: ['clearAllMeasurements', 'showStructuredReportDisplaySetInActiveViewport'],\n            cond: 'shouldSaveAndContinueWithSameReport',\n          },\n          // \"starting a new report\"\n          // - remove \"just saved\" measurements\n          // - start tracking a new study + report\n          {\n            target: 'tracking',\n            actions: ['discardPreviouslyTrackedMeasurements', 'setTrackedStudyAndSeries'],\n            cond: 'shouldSaveAndStartNewReport',\n          },\n          // Cancel, back to tracking\n          {\n            target: 'tracking',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    promptHydrateStructuredReport: {\n      invoke: {\n        src: 'promptHydrateStructuredReport',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: [\n              'setTrackedStudyAndMultipleSeries',\n              'jumpToSameImageInActiveViewport',\n              'setIsDirtyToClean',\n            ],\n            cond: 'shouldHydrateStructuredReport',\n          },\n          {\n            target: 'idle',\n            actions: ['ignoreHydrationForSRSeries'],\n            cond: 'shouldIgnoreHydrationForSR',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    hydrateStructuredReport: {\n      invoke: {\n        src: 'hydrateStructuredReport',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: [\n              'setTrackedStudyAndMultipleSeries',\n              'jumpToSameImageInActiveViewport',\n              'setIsDirtyToClean',\n            ],\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    promptLabelAnnotation: {\n      invoke: {\n        src: 'promptLabelAnnotation',\n        onDone: [\n          {\n            target: 'labellingOnly',\n            cond: 'wasLabellingOnly',\n          },\n          {\n            target: 'promptBeginTracking',\n            cond: 'wasIdle',\n          },\n          {\n            target: 'promptTrackNewStudy',\n            cond: 'wasTrackingAndIsNewStudy',\n          },\n          {\n            target: 'promptTrackNewSeries',\n            cond: 'wasTrackingAndIsNewSeries',\n          },\n          {\n            target: 'tracking',\n            cond: 'wasTracking',\n          },\n          {\n            target: 'off',\n          },\n        ],\n      },\n    },\n  },\n  strict: true,\n};\n\nconst defaultOptions = {\n  services: {\n    promptBeginTracking: (ctx, evt) => {\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\n    },\n    promptTrackNewStudy: (ctx, evt) => {\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\n    },\n    promptTrackNewSeries: (ctx, evt) => {\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\n    },\n  },\n  actions: {\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\n      console.log('discardPreviouslyTrackedMeasurements: not implemented');\n    },\n    clearAllMeasurements: (ctx, evt) => {\n      console.log('clearAllMeasurements: not implemented');\n    },\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\n      console.warn('jumpToFirstMeasurementInActiveViewport: not implemented');\n    },\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\n      console.warn('showStructuredReportDisplaySetInActiveViewport: not implemented');\n    },\n    clearContext: assign({\n      trackedStudy: '',\n      trackedSeries: [],\n      ignoredSeries: [],\n      prevTrackedStudy: '',\n      prevTrackedSeries: [],\n      prevIgnoredSeries: [],\n    }),\n    // Promise resolves w/ `evt.data.*`\n    setTrackedStudyAndSeries: assign((ctx, evt) => ({\n      prevTrackedStudy: ctx.trackedStudy,\n      prevTrackedSeries: ctx.trackedSeries.slice(),\n      prevIgnoredSeries: ctx.ignoredSeries.slice(),\n      //\n      trackedStudy: evt.data.StudyInstanceUID,\n      trackedSeries: [evt.data.SeriesInstanceUID],\n      ignoredSeries: [],\n    })),\n    setTrackedStudyAndMultipleSeries: assign((ctx, evt) => {\n      const studyInstanceUID = evt.StudyInstanceUID || evt.data.StudyInstanceUID;\n      const seriesInstanceUIDs = evt.SeriesInstanceUIDs || evt.data.SeriesInstanceUIDs;\n\n      return {\n        prevTrackedStudy: ctx.trackedStudy,\n        prevTrackedSeries: ctx.trackedSeries.slice(),\n        prevIgnoredSeries: ctx.ignoredSeries.slice(),\n        //\n        trackedStudy: studyInstanceUID,\n        trackedSeries: [...ctx.trackedSeries, ...seriesInstanceUIDs],\n        ignoredSeries: [],\n      };\n    }),\n    setIsDirtyToClean: assign((ctx, evt) => ({\n      isDirty: false,\n    })),\n    setIsDirty: assign((ctx, evt) => ({\n      isDirty: true,\n    })),\n    ignoreSeries: assign((ctx, evt) => ({\n      prevIgnoredSeries: [...ctx.ignoredSeries],\n      ignoredSeries: [...ctx.ignoredSeries, evt.data.SeriesInstanceUID],\n    })),\n    ignoreHydrationForSRSeries: assign((ctx, evt) => ({\n      ignoredSRSeriesForHydration: [\n        ...ctx.ignoredSRSeriesForHydration,\n        evt.data.srSeriesInstanceUID,\n      ],\n    })),\n    addTrackedSeries: assign((ctx, evt) => ({\n      prevTrackedSeries: [...ctx.trackedSeries],\n      trackedSeries: [...ctx.trackedSeries, evt.data.SeriesInstanceUID],\n    })),\n    removeTrackedSeries: assign((ctx, evt) => ({\n      prevTrackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\n      trackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\n    })),\n    setPreviousState: assign((ctx, evt, meta) => {\n      return {\n        prevState: meta.state.value,\n      };\n    }),\n  },\n  guards: {\n    // We set dirty any time we performan an action that:\n    // - Tracks a new study\n    // - Tracks a new series\n    // - Adds a measurement to an already tracked study/series\n    //\n    // We set clean any time we restore from an SR\n    //\n    // This guard/condition is specific to \"new measurements\"\n    // to make sure we only track dirty when the new measurement is specific\n    // to a series we're already tracking\n    //\n    // tl;dr\n    // Any report change, that is not a hydration of an existing report, should\n    // result in a \"dirty\" report\n    //\n    // Where dirty means there would be \"loss of data\" if we blew away measurements\n    // without creating a new SR.\n    shouldSetDirty: (ctx, evt) => {\n      return (\n        // When would this happen?\n        evt.SeriesInstanceUID === undefined || ctx.trackedSeries.includes(evt.SeriesInstanceUID)\n      );\n    },\n    wasLabellingOnly: (ctx, evt, condMeta) => {\n      return ctx.prevState === 'labellingOnly';\n    },\n    wasIdle: (ctx, evt, condMeta) => {\n      return ctx.prevState === 'idle';\n    },\n    wasTracking: (ctx, evt, condMeta) => {\n      return ctx.prevState === 'tracking';\n    },\n    wasTrackingAndIsNewStudy: (ctx, evt, condMeta) => {\n      return (\n        ctx.prevState === 'tracking' &&\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\n        ctx.trackedStudy !== evt.data.StudyInstanceUID\n      );\n    },\n    wasTrackingAndIsNewSeries: (ctx, evt, condMeta) => {\n      return (\n        ctx.prevState === 'tracking' &&\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\n        !ctx.trackedSeries.includes(evt.data.SeriesInstanceUID)\n      );\n    },\n\n    shouldKillMachine: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.NO_NEVER,\n    shouldAddSeries: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.ADD_SERIES,\n    shouldSetStudyAndSeries: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.SET_STUDY_AND_SERIES,\n    shouldAddIgnoredSeries: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.NO_NOT_FOR_SERIES,\n    shouldPromptSaveReport: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.CREATE_REPORT,\n    shouldIgnoreHydrationForSR: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.CANCEL,\n    shouldSaveAndContinueWithSameReport: (ctx, evt) =>\n      evt.data &&\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\n      evt.data.isBackupSave === true,\n    shouldSaveAndStartNewReport: (ctx, evt) =>\n      evt.data &&\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\n      evt.data.isBackupSave === false,\n    shouldHydrateStructuredReport: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.HYDRATE_REPORT,\n    // Has more than 1, or SeriesInstanceUID is not in list\n    // --> Post removal would have non-empty trackedSeries array\n    hasRemainingTrackedSeries: (ctx, evt) =>\n      ctx.trackedSeries.length > 1 || !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\n    hasNotIgnoredSRSeriesForHydration: (ctx, evt) => {\n      return !ctx.ignoredSRSeriesForHydration.includes(evt.SeriesInstanceUID);\n    },\n    isNewStudy: (ctx, evt) =>\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\n      ctx.trackedStudy !== evt.StudyInstanceUID,\n    isNewSeries: (ctx, evt) =>\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\n  },\n};\n\nexport { defaultOptions, machineConfiguration, RESPONSE };\n","import { ButtonEnums } from '@ohif/ui';\nimport i18n from 'i18next';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n};\n\nfunction promptBeginTracking({ servicesManager, extensionManager }, ctx, evt) {\n  const { uiViewportDialogService } = servicesManager.services;\n  const appConfig = extensionManager._appConfig;\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\n  // In case of direct transition to the state, the state machine sends the data in evt;\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\n\n  return new Promise(async function (resolve, reject) {\n    let promptResult = appConfig?.disableConfirmationPrompts\n      ? RESPONSE.SET_STUDY_AND_SERIES\n      : await _askTrackMeasurements(uiViewportDialogService, viewportId);\n\n    resolve({\n      userResponse: promptResult,\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n    });\n  });\n}\n\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = i18n.t('MeasurementTable:Track measurements for this series?');\n    const actions = [\n      {\n        id: 'prompt-begin-tracking-cancel',\n        type: ButtonEnums.type.secondary,\n        text: i18n.t('Common:No'),\n        value: RESPONSE.CANCEL,\n      },\n      {\n        id: 'prompt-begin-tracking-no-do-not-ask-again',\n        type: ButtonEnums.type.secondary,\n        text: i18n.t('MeasurementTable:No, do not ask again'),\n        value: RESPONSE.NO_NEVER,\n      },\n      {\n        id: 'prompt-begin-tracking-yes',\n        type: ButtonEnums.type.primary,\n        text: i18n.t('Common:Yes'),\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      id: 'measurement-tracking-prompt-begin-tracking',\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n      onKeyPress: event => {\n        if (event.key === 'Enter') {\n          const action = actions.find(action => action.id === 'prompt-begin-tracking-yes');\n          onSubmit(action.value);\n        }\n      },\n    });\n  });\n}\n\nexport default promptBeginTracking;\n","import { ButtonEnums } from '@ohif/ui';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n};\n\nfunction promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt) {\n  const { UIViewportDialogService } = servicesManager.services;\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\n  // In case of direct transition to the state, the state machine sends the data in evt;\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\n\n  return new Promise(async function (resolve, reject) {\n    let promptResult = await _askShouldAddMeasurements(UIViewportDialogService, viewportId);\n\n    if (promptResult === RESPONSE.CREATE_REPORT) {\n      promptResult = ctx.isDirty\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportId)\n        : RESPONSE.SET_STUDY_AND_SERIES;\n    }\n\n    resolve({\n      userResponse: promptResult,\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n      isBackupSave: false,\n    });\n  });\n}\n\nfunction _askShouldAddMeasurements(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = 'Do you want to add this measurement to the existing report?';\n    const actions = [\n      {\n        type: ButtonEnums.type.secondary,\n        text: 'Cancel',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        type: ButtonEnums.type.primary,\n        text: 'Create new report',\n        value: RESPONSE.CREATE_REPORT,\n      },\n      {\n        type: ButtonEnums.type.primary,\n        text: 'Add to existing report',\n        value: RESPONSE.ADD_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message =\n      'You have existing tracked measurements. What would you like to do with your existing tracked measurements?';\n    const actions = [\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\n      {\n        type: 'secondary',\n        text: 'Save',\n        value: RESPONSE.CREATE_REPORT,\n      },\n      {\n        type: 'primary',\n        text: 'Discard',\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      UIViewportDialogService.hide();\n      resolve(result);\n    };\n\n    UIViewportDialogService.show({\n      viewportId,\n      type: 'warning',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        UIViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptTrackNewSeries;\n","import i18n from 'i18next';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n};\n\nfunction promptTrackNewStudy({ servicesManager, extensionManager }: withAppTypes, ctx, evt) {\n  const { uiViewportDialogService } = servicesManager.services;\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\n  // In case of direct transition to the state, the state machine sends the data in evt;\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\n\n  return new Promise(async function (resolve, reject) {\n    let promptResult = await _askTrackMeasurements(uiViewportDialogService, viewportId);\n\n    if (promptResult === RESPONSE.SET_STUDY_AND_SERIES) {\n      promptResult = ctx.isDirty\n        ? await _askSaveDiscardOrCancel(uiViewportDialogService, viewportId)\n        : RESPONSE.SET_STUDY_AND_SERIES;\n    }\n\n    resolve({\n      userResponse: promptResult,\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n      isBackupSave: false,\n    });\n  });\n}\n\nfunction _askTrackMeasurements(\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\n  viewportId\n) {\n  return new Promise(function (resolve, reject) {\n    const message = i18n.t('MeasurementTable:Track measurements for this series?');\n    const actions = [\n      { type: 'cancel', text: i18n.t('MeasurementTable:No'), value: RESPONSE.CANCEL },\n      {\n        type: 'secondary',\n        text: i18n.t('MeasurementTable:No, do not ask again'),\n        value: RESPONSE.NO_NOT_FOR_SERIES,\n      },\n      {\n        type: 'primary',\n        text: i18n.t('MeasurementTable:Yes'),\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      UIViewportDialogService.hide();\n      resolve(result);\n    };\n\n    UIViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        UIViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n      onKeyPress: event => {\n        if (event.key === 'Enter') {\n          const action = actions.find(action => action.value === RESPONSE.SET_STUDY_AND_SERIES);\n          onSubmit(action.value);\n        }\n      },\n    });\n  });\n}\n\nfunction _askSaveDiscardOrCancel(\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\n  viewportId\n) {\n  return new Promise(function (resolve, reject) {\n    const message =\n      'Measurements cannot span across multiple studies. Do you want to save your tracked measurements?';\n    const actions = [\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\n      {\n        type: 'secondary',\n        text: 'No, discard previously tracked series & measurements',\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n      {\n        type: 'primary',\n        text: 'Yes',\n        value: RESPONSE.CREATE_REPORT,\n      },\n    ];\n    const onSubmit = result => {\n      UIViewportDialogService.hide();\n      resolve(result);\n    };\n\n    UIViewportDialogService.show({\n      viewportId,\n      type: 'warning',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        UIViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptTrackNewStudy;\n","import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\nimport { ButtonEnums } from '@ohif/ui';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n  HYDRATE_REPORT: 5,\n};\n\nfunction promptHydrateStructuredReport({ servicesManager, extensionManager, appConfig }, ctx, evt) {\n  const { uiViewportDialogService, displaySetService } = servicesManager.services;\n  const { viewportId, displaySetInstanceUID } = evt;\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n  return new Promise(async function (resolve, reject) {\n    const promptResult = appConfig?.disableConfirmationPrompts\n      ? RESPONSE.HYDRATE_REPORT\n      : await _askTrackMeasurements(uiViewportDialogService, viewportId);\n\n    // Need to do action here... So we can set state...\n    let StudyInstanceUID, SeriesInstanceUIDs;\n\n    if (promptResult === RESPONSE.HYDRATE_REPORT) {\n      console.warn('!! HYDRATING STRUCTURED REPORT');\n      const hydrationResult = hydrateStructuredReport(\n        { servicesManager, extensionManager, appConfig },\n        displaySetInstanceUID\n      );\n\n      StudyInstanceUID = hydrationResult.StudyInstanceUID;\n      SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\n    }\n\n    resolve({\n      userResponse: promptResult,\n      displaySetInstanceUID: evt.displaySetInstanceUID,\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\n      viewportId,\n      StudyInstanceUID,\n      SeriesInstanceUIDs,\n    });\n  });\n}\n\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = 'Do you want to continue tracking measurements for this study?';\n    const actions = [\n      {\n        id: 'no-hydrate',\n        type: ButtonEnums.type.secondary,\n        text: 'No',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        id: 'yes-hydrate',\n        type: ButtonEnums.type.primary,\n        text: 'Yes',\n        value: RESPONSE.HYDRATE_REPORT,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n      onKeyPress: event => {\n        if (event.key === 'Enter') {\n          const action = actions.find(action => action.value === RESPONSE.HYDRATE_REPORT);\n          onSubmit(action.value);\n        }\n      },\n    });\n  });\n}\n\nexport default promptHydrateStructuredReport;\n","import { hydrateStructuredReport as baseHydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\n\nfunction hydrateStructuredReport(\n  { servicesManager, extensionManager, appConfig }: withAppTypes,\n  ctx,\n  evt\n) {\n  const { displaySetService } = servicesManager.services;\n  const { viewportId, displaySetInstanceUID } = evt;\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n  return new Promise((resolve, reject) => {\n    const hydrationResult = baseHydrateStructuredReport(\n      { servicesManager, extensionManager, appConfig },\n      displaySetInstanceUID\n    );\n\n    const StudyInstanceUID = hydrationResult.StudyInstanceUID;\n    const SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\n\n    resolve({\n      displaySetInstanceUID: evt.displaySetInstanceUID,\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\n      viewportId,\n      StudyInstanceUID,\n      SeriesInstanceUIDs,\n    });\n  });\n}\n\nexport default hydrateStructuredReport;\n","import React, { useContext, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Machine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport { useViewportGrid } from '@ohif/ui';\nimport { promptLabelAnnotation, promptSaveReport } from '@ohif/extension-default';\nimport { machineConfiguration, defaultOptions, RESPONSE } from './measurementTrackingMachine';\nimport promptBeginTracking from './promptBeginTracking';\nimport promptTrackNewSeries from './promptTrackNewSeries';\nimport promptTrackNewStudy from './promptTrackNewStudy';\nimport promptHydrateStructuredReport from './promptHydrateStructuredReport';\nimport hydrateStructuredReport from './hydrateStructuredReport';\nimport { useAppConfig } from '@state';\n\nconst TrackedMeasurementsContext = React.createContext();\nTrackedMeasurementsContext.displayName = 'TrackedMeasurementsContext';\nconst useTrackedMeasurements = () => useContext(TrackedMeasurementsContext);\n\nconst SR_SOPCLASSHANDLERID = '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr';\n\n/**\n *\n * @param {*} param0\n */\nfunction TrackedMeasurementsContextProvider(\n  { servicesManager, commandsManager, extensionManager }: withAppTypes, // Bound by consumer\n  { children } // Component props\n) {\n  const [appConfig] = useAppConfig();\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const { activeViewportId, viewports } = viewportGrid;\n  const { measurementService, displaySetService, customizationService } = servicesManager.services;\n\n  const machineOptions = Object.assign({}, defaultOptions);\n  machineOptions.actions = Object.assign({}, machineOptions.actions, {\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\n      const { trackedStudy, trackedSeries, activeViewportId } = ctx;\n      const measurements = measurementService.getMeasurements();\n      const trackedMeasurements = measurements.filter(\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\n      );\n\n      console.log(\n        'jumping to measurement reset viewport',\n        activeViewportId,\n        trackedMeasurements[0]\n      );\n\n      const referencedDisplaySetUID = trackedMeasurements[0].displaySetInstanceUID;\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(referencedDisplaySetUID);\n\n      const referencedImages = referencedDisplaySet.images;\n      const isVolumeIdReferenced = referencedImages[0].imageId.startsWith('volumeId');\n\n      const measurementData = trackedMeasurements[0].data;\n\n      let imageIndex = 0;\n      if (!isVolumeIdReferenced && measurementData) {\n        // if it is imageId referenced find the index of the imageId, we don't have\n        // support for volumeId referenced images yet\n        imageIndex = referencedImages.findIndex(image => {\n          const imageIdToUse = Object.keys(measurementData)[0].substring(8);\n          return image.imageId === imageIdToUse;\n        });\n\n        if (imageIndex === -1) {\n          console.warn('Could not find image index for tracked measurement, using 0');\n          imageIndex = 0;\n        }\n      }\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: activeViewportId,\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\n        viewportOptions: {\n          initialImageOptions: {\n            index: imageIndex,\n          },\n        },\n      });\n    },\n\n    jumpToSameImageInActiveViewport: (ctx, evt) => {\n      const { trackedStudy, trackedSeries, activeViewportId } = ctx;\n      const measurements = measurementService.getMeasurements();\n      const trackedMeasurements = measurements.filter(\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\n      );\n\n      const trackedMeasurement = trackedMeasurements[0];\n      const referencedDisplaySetUID = trackedMeasurement.displaySetInstanceUID;\n\n      // update the previously stored positionPresentation with the new viewportId\n      // presentation so that when we put the referencedDisplaySet back in the viewport\n      // it will be in the correct position zoom and pan\n      commandsManager.runCommand('updateStoredPositionPresentation', {\n        viewportId: activeViewportId,\n        displaySetInstanceUID: referencedDisplaySetUID,\n      });\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: activeViewportId,\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\n      });\n    },\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\n      if (evt.data.createdDisplaySetInstanceUIDs.length > 0) {\n        const StructuredReportDisplaySetInstanceUID = evt.data.createdDisplaySetInstanceUIDs[0];\n\n        viewportGridService.setDisplaySetsForViewport({\n          viewportId: evt.data.viewportId,\n          displaySetInstanceUIDs: [StructuredReportDisplaySetInstanceUID],\n        });\n      }\n    },\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\n      const measurements = measurementService.getMeasurements();\n      const filteredMeasurements = measurements.filter(ms =>\n        ctx.prevTrackedSeries.includes(ms.referenceSeriesUID)\n      );\n      const measurementIds = filteredMeasurements.map(fm => fm.id);\n\n      for (let i = 0; i < measurementIds.length; i++) {\n        measurementService.remove(measurementIds[i]);\n      }\n    },\n    clearAllMeasurements: (ctx, evt) => {\n      const measurements = measurementService.getMeasurements();\n      const measurementIds = measurements.map(fm => fm.uid);\n\n      for (let i = 0; i < measurementIds.length; i++) {\n        measurementService.remove(measurementIds[i]);\n      }\n    },\n  });\n  machineOptions.services = Object.assign({}, machineOptions.services, {\n    promptBeginTracking: promptBeginTracking.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptTrackNewSeries: promptTrackNewSeries.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptTrackNewStudy: promptTrackNewStudy.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptSaveReport: promptSaveReport.bind(null, {\n      servicesManager,\n      commandsManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptHydrateStructuredReport: promptHydrateStructuredReport.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    hydrateStructuredReport: hydrateStructuredReport.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptLabelAnnotation: promptLabelAnnotation.bind(null, {\n      servicesManager,\n      extensionManager,\n    }),\n  });\n  machineOptions.guards = Object.assign({}, machineOptions.guards, {\n    isLabelOnMeasure: (ctx, evt, condMeta) => {\n      const labelConfig = customizationService.get('measurementLabels');\n      return labelConfig?.labelOnMeasure;\n    },\n    isLabelOnMeasureAndShouldKillMachine: (ctx, evt, condMeta) => {\n      const labelConfig = customizationService.get('measurementLabels');\n      return evt.data && evt.data.userResponse === RESPONSE.NO_NEVER && labelConfig?.labelOnMeasure;\n    },\n  });\n\n  // TODO: IMPROVE\n  // - Add measurement_updated to cornerstone; debounced? (ext side, or consumption?)\n  // - Friendlier transition/api in front of measurementTracking machine?\n  // - Blocked: viewport overlay shouldn't clip when resized\n  // TODO: PRIORITY\n  // - Fix \"ellipses\" series description dynamic truncate length\n  // - Fix viewport border resize\n  // - created/destroyed hooks for extensions (cornerstone measurement subscriptions in it's `init`)\n\n  const measurementTrackingMachine = useMemo(() => {\n    return Machine(machineConfiguration, machineOptions);\n  }, []); // Empty dependency array ensures this is only created once\n\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useMachine(\n    measurementTrackingMachine\n  );\n\n  useEffect(() => {\n    // Update the state machine with the active viewport ID\n    sendTrackedMeasurementsEvent('UPDATE_ACTIVE_VIEWPORT_ID', {\n      activeViewportId,\n    });\n  }, [activeViewportId, sendTrackedMeasurementsEvent]);\n\n  // ~~ Listen for changes to ViewportGrid for potential SRs hung in panes when idle\n  useEffect(() => {\n    const triggerPromptHydrateFlow = async () => {\n      if (viewports.size > 0) {\n        const activeViewport = viewports.get(activeViewportId);\n\n        if (!activeViewport || !activeViewport?.displaySetInstanceUIDs?.length) {\n          return;\n        }\n\n        // Todo: Getting the first displaySetInstanceUID is wrong, but we don't have\n        // tracking fusion viewports yet. This should change when we do.\n        const { displaySetService } = servicesManager.services;\n        const displaySet = displaySetService.getDisplaySetByUID(\n          activeViewport.displaySetInstanceUIDs[0]\n        );\n\n        if (!displaySet) {\n          return;\n        }\n\n        // If this is an SR produced by our SR SOPClassHandler,\n        // and it hasn't been loaded yet, do that now so we\n        // can check if it can be rehydrated or not.\n        //\n        // Note: This happens:\n        // - If the viewport is not currently an OHIFCornerstoneSRViewport\n        // - If the displaySet has never been hung\n        //\n        // Otherwise, the displaySet will be loaded by the useEffect handler\n        // listening to displaySet changes inside OHIFCornerstoneSRViewport.\n        // The issue here is that this handler in TrackedMeasurementsContext\n        // ends up occurring before the Viewport is created, so the displaySet\n        // is not loaded yet, and isRehydratable is undefined unless we call load().\n        if (\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\n          !displaySet.isLoaded &&\n          displaySet.load\n        ) {\n          await displaySet.load();\n        }\n\n        // Magic string\n        // load function added by our sopClassHandler module\n        if (\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\n          displaySet.isRehydratable === true\n        ) {\n          console.log('sending event...', trackedMeasurements);\n          sendTrackedMeasurementsEvent('PROMPT_HYDRATE_SR', {\n            displaySetInstanceUID: displaySet.displaySetInstanceUID,\n            SeriesInstanceUID: displaySet.SeriesInstanceUID,\n            viewportId: activeViewportId,\n          });\n        }\n      }\n    };\n    triggerPromptHydrateFlow();\n  }, [\n    trackedMeasurements,\n    activeViewportId,\n    sendTrackedMeasurementsEvent,\n    servicesManager.services,\n    viewports,\n  ]);\n\n  return (\n    <TrackedMeasurementsContext.Provider\n      value={[trackedMeasurements, sendTrackedMeasurementsEvent]}\n    >\n      {children}\n    </TrackedMeasurementsContext.Provider>\n  );\n}\n\nTrackedMeasurementsContextProvider.propTypes = {\n  children: PropTypes.oneOf([PropTypes.func, PropTypes.node]),\n  servicesManager: PropTypes.object.isRequired,\n  commandsManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.object.isRequired,\n  appConfig: PropTypes.object,\n};\n\nexport { TrackedMeasurementsContext, TrackedMeasurementsContextProvider, useTrackedMeasurements };\n","import {\n  TrackedMeasurementsContext,\n  TrackedMeasurementsContextProvider,\n  useTrackedMeasurements,\n} from './contexts';\n\nfunction getContextModule({ servicesManager, extensionManager, commandsManager }) {\n  const BoundTrackedMeasurementsContextProvider = TrackedMeasurementsContextProvider.bind(null, {\n    servicesManager,\n    extensionManager,\n    commandsManager,\n  });\n\n  return [\n    {\n      name: 'TrackedMeasurementsContext',\n      context: TrackedMeasurementsContext,\n      provider: BoundTrackedMeasurementsContextProvider,\n    },\n  ];\n}\n\nexport { useTrackedMeasurements };\nexport default getContextModule;\n","import type { actionIcon } from '../PanelStudyBrowserTracking/types/actionsIcon';\n\nconst defaultActionIcons = [\n  {\n    id: 'settings',\n    iconName: 'Settings',\n    value: false,\n  },\n] as actionIcon[];\n\nexport { defaultActionIcons };\n","import type { viewPreset } from '../PanelStudyBrowserTracking/types/viewPreset';\n\nconst defaultViewPresets = [\n  {\n    id: 'list',\n    iconName: 'ListView',\n    selected: false,\n  },\n  {\n    id: 'thumbnails',\n    iconName: 'ThumbnailView',\n    selected: true,\n  },\n] as viewPreset[];\n\nexport { defaultViewPresets };\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nimport { utils } from '@ohif/core';\nimport { useImageViewer, useViewportGrid, Dialog, ButtonEnums } from '@ohif/ui';\nimport { StudyBrowser } from '@ohif/ui-next';\n\nimport { useTrackedMeasurements } from '../../getContextModule';\nimport { Separator } from '@ohif/ui-next';\nimport { PanelStudyBrowserHeader } from '@ohif/extension-default';\nimport { defaultActionIcons, defaultViewPresets } from './constants';\n\nconst { formatDate, createStudyBrowserTabs } = utils;\nconst thumbnailNoImageModalities = [\n  'SR',\n  'SEG',\n  'SM',\n  'RTSTRUCT',\n  'RTPLAN',\n  'RTDOSE',\n  'DOC',\n  'OT',\n  'PMAP',\n];\n/**\n *\n * @param {*} param0\n */\nfunction PanelStudyBrowserTracking({\n  servicesManager,\n  getImageSrc,\n  getStudiesForPatientByMRN,\n  requestDisplaySetCreationForStudy,\n  dataSource,\n  commandsManager,\n}: withAppTypes) {\n  const {\n    displaySetService,\n    uiDialogService,\n    hangingProtocolService,\n    uiNotificationService,\n    measurementService,\n    studyPrefetcherService,\n    customizationService,\n  } = servicesManager.services;\n  const navigate = useNavigate();\n\n  const { t } = useTranslation('Common');\n\n  // Normally you nest the components so the tree isn't so deep, and the data\n  // doesn't have to have such an intense shape. This works well enough for now.\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\n  const { StudyInstanceUIDs } = useImageViewer();\n  const [{ activeViewportId, viewports, isHangingProtocolLayout }, viewportGridService] =\n    useViewportGrid();\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\n  const [activeTabName, setActiveTabName] = useState('all');\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\n    ...StudyInstanceUIDs,\n  ]);\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\n  const [hasLoadedViewports, setHasLoadedViewports] = useState(false);\n  const [displaySets, setDisplaySets] = useState([]);\n  const [displaySetsLoadingState, setDisplaySetsLoadingState] = useState({});\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\n  const [jumpToDisplaySet, setJumpToDisplaySet] = useState(null);\n\n  const [viewPresets, setViewPresets] = useState(\n    customizationService.getCustomization('studyBrowser.viewPresets')?.value || defaultViewPresets\n  );\n\n  const [actionIcons, setActionIcons] = useState(defaultActionIcons);\n\n  const updateActionIconValue = actionIcon => {\n    actionIcon.value = !actionIcon.value;\n    const newActionIcons = [...actionIcons];\n    setActionIcons(newActionIcons);\n  };\n\n  const updateViewPresetValue = viewPreset => {\n    if (!viewPreset) {\n      return;\n    }\n    const newViewPresets = viewPresets.map(preset => {\n      preset.selected = preset.id === viewPreset.id;\n      return preset;\n    });\n    setViewPresets(newViewPresets);\n  };\n\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\n    let updatedViewports = [];\n    const viewportId = activeViewportId;\n    try {\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n        viewportId,\n        displaySetInstanceUID,\n        isHangingProtocolLayout\n      );\n    } catch (error) {\n      console.warn(error);\n      uiNotificationService.show({\n        title: 'Thumbnail Double Click',\n        message:\n          'The selected display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.',\n        type: 'error',\n        duration: 3000,\n      });\n    }\n\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\n  };\n\n  const activeViewportDisplaySetInstanceUIDs =\n    viewports.get(activeViewportId)?.displaySetInstanceUIDs;\n\n  const { trackedSeries } = trackedMeasurements.context;\n\n  // ~~ studyDisplayList\n  useEffect(() => {\n    // Fetch all studies for the patient in each primary study\n    async function fetchStudiesForPatient(StudyInstanceUID) {\n      // current study qido\n      const qidoForStudyUID = await dataSource.query.studies.search({\n        studyInstanceUid: StudyInstanceUID,\n      });\n\n      if (!qidoForStudyUID?.length) {\n        navigate('/notfoundstudy', '_self');\n        throw new Error('Invalid study URL');\n      }\n\n      let qidoStudiesForPatient = qidoForStudyUID;\n\n      // try to fetch the prior studies based on the patientID if the\n      // server can respond.\n      try {\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(qidoForStudyUID);\n      } catch (error) {\n        console.warn(error);\n      }\n\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\n        return {\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\n          date: formatDate(qidoStudy.StudyDate) || t('NoStudyDate'),\n          description: qidoStudy.StudyDescription,\n          modalities: qidoStudy.ModalitiesInStudy,\n          numInstances: qidoStudy.NumInstances,\n        };\n      });\n\n      setStudyDisplayList(prevArray => {\n        const ret = [...prevArray];\n        for (const study of actuallyMappedStudies) {\n          if (!prevArray.find(it => it.studyInstanceUid === study.studyInstanceUid)) {\n            ret.push(study);\n          }\n        }\n        return ret;\n      });\n    }\n\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [StudyInstanceUIDs, getStudiesForPatientByMRN]);\n\n  // ~~ Initial Thumbnails\n  useEffect(() => {\n    if (!hasLoadedViewports) {\n      if (activeViewportId) {\n        // Once there is an active viewport id, it means the layout is ready\n        // so wait a bit of time to allow the viewports preferential loading\n        // which improves user experience of responsiveness significantly on slower\n        // systems.\n        window.setTimeout(() => setHasLoadedViewports(true), 250);\n      }\n\n      return;\n    }\n\n    let currentDisplaySets = displaySetService.activeDisplaySets;\n    // filter non based on the list of modalities that are supported by cornerstone\n    currentDisplaySets = currentDisplaySets.filter(\n      ds => !thumbnailNoImageModalities.includes(ds.Modality)\n    );\n\n    if (!currentDisplaySets.length) {\n      return;\n    }\n\n    currentDisplaySets.forEach(async dSet => {\n      const newImageSrcEntry = {};\n      const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n\n      const imageId = getImageIdForThumbnail(displaySet, imageIds);\n\n      // TODO: Is it okay that imageIds are not returned here for SR displaySets?\n      if (!imageId || displaySet?.unsupported) {\n        return;\n      }\n      // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n      newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(imageId);\n\n      setThumbnailImageSrcMap(prevState => {\n        return { ...prevState, ...newImageSrcEntry };\n      });\n    });\n  }, [displaySetService, dataSource, getImageSrc, activeViewportId, hasLoadedViewports]);\n\n  // ~~ displaySets\n  useEffect(() => {\n    const currentDisplaySets = displaySetService.activeDisplaySets;\n\n    if (!currentDisplaySets.length) {\n      return;\n    }\n\n    const mappedDisplaySets = _mapDisplaySets(\n      currentDisplaySets,\n      displaySetsLoadingState,\n      thumbnailImageSrcMap,\n      trackedSeries,\n      viewports,\n      viewportGridService,\n      dataSource,\n      displaySetService,\n      uiDialogService,\n      uiNotificationService\n    );\n\n    setDisplaySets(mappedDisplaySets);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    displaySetService.activeDisplaySets,\n    displaySetsLoadingState,\n    trackedSeries,\n    viewports,\n    dataSource,\n    thumbnailImageSrcMap,\n  ]);\n\n  // -- displaySetsLoadingState\n  useEffect(() => {\n    const { unsubscribe } = studyPrefetcherService.subscribe(\n      studyPrefetcherService.EVENTS.DISPLAYSET_LOAD_PROGRESS,\n      updatedDisplaySetLoadingState => {\n        const { displaySetInstanceUID, loadingProgress } = updatedDisplaySetLoadingState;\n\n        setDisplaySetsLoadingState(prevState => ({\n          ...prevState,\n          [displaySetInstanceUID]: loadingProgress,\n        }));\n      }\n    );\n\n    return () => unsubscribe();\n  }, [studyPrefetcherService]);\n\n  // ~~ subscriptions --> displaySets\n  useEffect(() => {\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\n      data => {\n        if (!hasLoadedViewports) {\n          return;\n        }\n        const { displaySetsAdded, options } = data;\n        displaySetsAdded.forEach(async dSet => {\n          const displaySetInstanceUID = dSet.displaySetInstanceUID;\n\n          const newImageSrcEntry = {};\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n          if (displaySet?.unsupported) {\n            return;\n          }\n\n          if (options.madeInClient) {\n            setJumpToDisplaySet(displaySetInstanceUID);\n          }\n\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n          const imageId = getImageIdForThumbnail(displaySet, imageIds);\n\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\n          if (!imageId) {\n            return;\n          }\n\n          // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n          newImageSrcEntry[displaySetInstanceUID] = await getImageSrc(imageId);\n          setThumbnailImageSrcMap(prevState => {\n            return { ...prevState, ...newImageSrcEntry };\n          });\n        });\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsAdded.unsubscribe();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [displaySetService, dataSource, getImageSrc, thumbnailImageSrcMap, trackedSeries, viewports]);\n\n  useEffect(() => {\n    // TODO: Will this always hold _all_ the displaySets we care about?\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\n      changedDisplaySets => {\n        const mappedDisplaySets = _mapDisplaySets(\n          changedDisplaySets,\n          displaySetsLoadingState,\n          thumbnailImageSrcMap,\n          trackedSeries,\n          viewports,\n          viewportGridService,\n          dataSource,\n          displaySetService,\n          uiDialogService,\n          uiNotificationService\n        );\n\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    const SubscriptionDisplaySetMetaDataInvalidated = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\n      () => {\n        const mappedDisplaySets = _mapDisplaySets(\n          displaySetService.getActiveDisplaySets(),\n          displaySetsLoadingState,\n          thumbnailImageSrcMap,\n          trackedSeries,\n          viewports,\n          viewportGridService,\n          dataSource,\n          displaySetService,\n          uiDialogService,\n          uiNotificationService\n        );\n\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsChanged.unsubscribe();\n      SubscriptionDisplaySetMetaDataInvalidated.unsubscribe();\n    };\n  }, [\n    displaySetsLoadingState,\n    thumbnailImageSrcMap,\n    trackedSeries,\n    viewports,\n    dataSource,\n    displaySetService,\n  ]);\n\n  const tabs = createStudyBrowserTabs(StudyInstanceUIDs, studyDisplayList, displaySets);\n\n  // TODO: Should not fire this on \"close\"\n  function _handleStudyClick(StudyInstanceUID) {\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\n      ? [...expandedStudyInstanceUIDs.filter(stdyUid => stdyUid !== StudyInstanceUID)]\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\n\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\n\n    if (!shouldCollapseStudy) {\n      const madeInClient = true;\n      requestDisplaySetCreationForStudy(displaySetService, StudyInstanceUID, madeInClient);\n    }\n  }\n\n  useEffect(() => {\n    if (jumpToDisplaySet) {\n      // Get element by displaySetInstanceUID\n      const displaySetInstanceUID = jumpToDisplaySet;\n      const element = document.getElementById(`thumbnail-${displaySetInstanceUID}`);\n\n      if (element && typeof element.scrollIntoView === 'function') {\n        // TODO: Any way to support IE here?\n        element.scrollIntoView({ behavior: 'smooth' });\n\n        setJumpToDisplaySet(null);\n      }\n    }\n  }, [jumpToDisplaySet, expandedStudyInstanceUIDs, activeTabName]);\n\n  useEffect(() => {\n    if (!jumpToDisplaySet) {\n      return;\n    }\n\n    const displaySetInstanceUID = jumpToDisplaySet;\n    // Set the activeTabName and expand the study\n    const thumbnailLocation = _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs);\n    if (!thumbnailLocation) {\n      console.warn('jumpToThumbnail: displaySet thumbnail not found.');\n\n      return;\n    }\n    const { tabName, StudyInstanceUID } = thumbnailLocation;\n    setActiveTabName(tabName);\n    const studyExpanded = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\n    if (!studyExpanded) {\n      const updatedExpandedStudyInstanceUIDs = [...expandedStudyInstanceUIDs, StudyInstanceUID];\n      setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\n    }\n  }, [expandedStudyInstanceUIDs, jumpToDisplaySet, tabs]);\n\n  const onClickUntrack = displaySetInstanceUID => {\n    const onConfirm = () => {\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n      sendTrackedMeasurementsEvent('UNTRACK_SERIES', {\n        SeriesInstanceUID: displaySet.SeriesInstanceUID,\n      });\n      const measurements = measurementService.getMeasurements();\n      measurements.forEach(m => {\n        if (m.referenceSeriesUID === displaySet.SeriesInstanceUID) {\n          measurementService.remove(m.uid);\n        }\n      });\n    };\n\n    uiDialogService.create({\n      id: 'untrack-series',\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Untrack Series',\n        body: () => (\n          <div className=\"bg-primary-dark p-4 text-white\">\n            <p>Are you sure you want to untrack this series?</p>\n            <p className=\"mt-2\">\n              This action cannot be undone and will delete all your existing measurements.\n            </p>\n          </div>\n        ),\n        actions: [\n          {\n            id: 'cancel',\n            text: 'Cancel',\n            type: ButtonEnums.type.secondary,\n          },\n          {\n            id: 'yes',\n            text: 'Yes',\n            type: ButtonEnums.type.primary,\n            classes: ['untrack-yes-button'],\n          },\n        ],\n        onClose: () => uiDialogService.dismiss({ id: 'untrack-series' }),\n        onSubmit: async ({ action }) => {\n          switch (action.id) {\n            case 'yes':\n              onConfirm();\n              uiDialogService.dismiss({ id: 'untrack-series' });\n              break;\n            case 'cancel':\n              uiDialogService.dismiss({ id: 'untrack-series' });\n              break;\n          }\n        },\n      },\n    });\n  };\n\n  const onThumbnailContextMenu = (commandName, options) => {\n    commandsManager.runCommand(commandName, options);\n  };\n\n  return (\n    <>\n      <>\n        <PanelStudyBrowserHeader\n          viewPresets={viewPresets}\n          updateViewPresetValue={updateViewPresetValue}\n          actionIcons={actionIcons}\n          updateActionIconValue={updateActionIconValue}\n        />\n        <Separator\n          orientation=\"horizontal\"\n          className=\"bg-black\"\n          thickness=\"2px\"\n        />\n      </>\n\n      <StudyBrowser\n        tabs={tabs}\n        servicesManager={servicesManager}\n        activeTabName={activeTabName}\n        expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\n        onClickStudy={_handleStudyClick}\n        onClickTab={clickedTabName => {\n          setActiveTabName(clickedTabName);\n        }}\n        onClickUntrack={displaySetInstanceUID => {\n          onClickUntrack(displaySetInstanceUID);\n        }}\n        onClickThumbnail={() => {}}\n        onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\n        activeDisplaySetInstanceUIDs={activeViewportDisplaySetInstanceUIDs}\n        showSettings={actionIcons.find(icon => icon.id === 'settings').value}\n        viewPresets={viewPresets}\n        onThumbnailContextMenu={onThumbnailContextMenu}\n      />\n    </>\n  );\n}\n\nPanelStudyBrowserTracking.propTypes = {\n  servicesManager: PropTypes.object.isRequired,\n  dataSource: PropTypes.shape({\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\n  }).isRequired,\n  getImageSrc: PropTypes.func.isRequired,\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\n};\n\nexport default PanelStudyBrowserTracking;\n\nfunction getImageIdForThumbnail(displaySet: any, imageIds: any) {\n  let imageId;\n  if (displaySet.isDynamicVolume) {\n    const timePoints = displaySet.dynamicVolumeInfo.timePoints;\n    const middleIndex = Math.floor(timePoints.length / 2);\n    const middleTimePointImageIds = timePoints[middleIndex];\n    imageId = middleTimePointImageIds[Math.floor(middleTimePointImageIds.length / 2)];\n  } else {\n    imageId = imageIds[Math.floor(imageIds.length / 2)];\n  }\n  return imageId;\n}\n\n/**\n * Maps from the DataSource's format to a naturalized object\n *\n * @param {*} studies\n */\nfunction _mapDataSourceStudies(studies) {\n  return studies.map(study => {\n    // TODO: Why does the data source return in this format?\n    return {\n      AccessionNumber: study.accession,\n      StudyDate: study.date,\n      StudyDescription: study.description,\n      NumInstances: study.instances,\n      ModalitiesInStudy: study.modalities,\n      PatientID: study.mrn,\n      PatientName: study.patientName,\n      StudyInstanceUID: study.studyInstanceUid,\n      StudyTime: study.time,\n    };\n  });\n}\n\nfunction _mapDisplaySets(\n  displaySets,\n  displaySetLoadingState,\n  thumbnailImageSrcMap,\n  trackedSeriesInstanceUIDs,\n  viewports, // TODO: make array of `displaySetInstanceUIDs`?\n  viewportGridService,\n  dataSource,\n  displaySetService,\n  uiDialogService,\n  uiNotificationService\n) {\n  const thumbnailDisplaySets = [];\n  const thumbnailNoImageDisplaySets = [];\n  displaySets\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\n    .forEach(ds => {\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\n      const componentType = _getComponentType(ds);\n      const numPanes = viewportGridService.getNumViewportPanes();\n\n      const array =\n        componentType === 'thumbnailTracked' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\n\n      const { displaySetInstanceUID } = ds;\n      const loadingProgress = displaySetLoadingState?.[displaySetInstanceUID];\n\n      const thumbnailProps = {\n        displaySetInstanceUID,\n        description: ds.SeriesDescription,\n        seriesNumber: ds.SeriesNumber,\n        modality: ds.Modality,\n        seriesDate: formatDate(ds.SeriesDate),\n        numInstances: ds.numImageFrames,\n        loadingProgress,\n        countIcon: ds.countIcon,\n        messages: ds.messages,\n        StudyInstanceUID: ds.StudyInstanceUID,\n        componentType,\n        imageSrc,\n        dragData: {\n          type: 'displayset',\n          displaySetInstanceUID,\n          // .. Any other data to pass\n        },\n        isTracked: trackedSeriesInstanceUIDs.includes(ds.SeriesInstanceUID),\n        isHydratedForDerivedDisplaySet: ds.isHydrated,\n      };\n\n      if (componentType === 'thumbnailNoImage') {\n        if (dataSource.reject && dataSource.reject.series) {\n          thumbnailProps.canReject = !ds?.unsupported;\n          thumbnailProps.onReject = () => {\n            uiDialogService.create({\n              id: 'ds-reject-sr',\n              centralize: true,\n              isDraggable: false,\n              showOverlay: true,\n              content: Dialog,\n              contentProps: {\n                title: 'Delete Report',\n                body: () => (\n                  <div className=\"bg-primary-dark p-4 text-white\">\n                    <p>Are you sure you want to delete this report?</p>\n                    <p className=\"mt-2\">This action cannot be undone.</p>\n                  </div>\n                ),\n                actions: [\n                  {\n                    id: 'cancel',\n                    text: 'Cancel',\n                    type: ButtonEnums.type.secondary,\n                  },\n                  {\n                    id: 'yes',\n                    text: 'Yes',\n                    type: ButtonEnums.type.primary,\n                    classes: ['reject-yes-button'],\n                  },\n                ],\n                onClose: () => uiDialogService.dismiss({ id: 'ds-reject-sr' }),\n                onShow: () => {\n                  const yesButton = document.querySelector('.reject-yes-button');\n\n                  yesButton.focus();\n                },\n                onSubmit: async ({ action }) => {\n                  switch (action.id) {\n                    case 'yes':\n                      try {\n                        await dataSource.reject.series(ds.StudyInstanceUID, ds.SeriesInstanceUID);\n                        displaySetService.deleteDisplaySet(displaySetInstanceUID);\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\n                        uiNotificationService.show({\n                          title: 'Delete Report',\n                          message: 'Report deleted successfully',\n                          type: 'success',\n                        });\n                      } catch (error) {\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\n                        uiNotificationService.show({\n                          title: 'Delete Report',\n                          message: 'Failed to delete report',\n                          type: 'error',\n                        });\n                      }\n                      break;\n                    case 'cancel':\n                      uiDialogService.dismiss({ id: 'ds-reject-sr' });\n                      break;\n                  }\n                },\n              },\n            });\n          };\n        } else {\n          thumbnailProps.canReject = false;\n        }\n      }\n\n      array.push(thumbnailProps);\n    });\n\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\n}\n\nfunction _getComponentType(ds) {\n  if (thumbnailNoImageModalities.includes(ds.Modality) || ds?.unsupported) {\n    return 'thumbnailNoImage';\n  }\n\n  return 'thumbnailTracked';\n}\n\nfunction _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs) {\n  for (let t = 0; t < tabs.length; t++) {\n    const { studies } = tabs[t];\n\n    for (let s = 0; s < studies.length; s++) {\n      const { displaySets } = studies[s];\n\n      for (let d = 0; d < displaySets.length; d++) {\n        const displaySet = displaySets[d];\n\n        if (displaySet.displaySetInstanceUID === displaySetInstanceUID) {\n          return {\n            tabName: tabs[t].name,\n            StudyInstanceUID: studies[s].studyInstanceUid,\n          };\n        }\n      }\n    }\n  }\n}\n","/**\n * @param {*} cornerstone\n * @param {*} imageId\n */\nfunction getImageSrcFromImageId(cornerstone, imageId) {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    cornerstone.utilities\n      .loadImageToCanvas({ canvas, imageId, thumbnail: true })\n      .then(imageId => {\n        resolve(canvas.toDataURL());\n      })\n      .catch(reject);\n  });\n}\n\nexport default getImageSrcFromImageId;\n","function requestDisplaySetCreationForStudy(\n  dataSource,\n  displaySetService,\n  StudyInstanceUID,\n  madeInClient\n) {\n  if (\n    displaySetService.activeDisplaySets.some(\n      displaySet => displaySet.StudyInstanceUID === StudyInstanceUID\n    )\n  ) {\n    return;\n  }\n\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\n}\n\nexport default requestDisplaySetCreationForStudy;\n","import React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n//\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\n\nfunction _getStudyForPatientUtility(extensionManager) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-default.utilityModule.common'\n  );\n\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\n  return getStudiesForPatientByMRN;\n}\n\n/**\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\n *\n * @param {object} params\n * @param {object} commandsManager\n * @param {object} extensionManager\n */\nfunction WrappedPanelStudyBrowserTracking({\n  commandsManager,\n  extensionManager,\n  servicesManager,\n}: withAppTypes) {\n  const dataSource = extensionManager.getActiveDataSource()[0];\n\n  const getStudiesForPatientByMRN = _getStudyForPatientUtility(extensionManager);\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\n  const _getImageSrcFromImageId = useCallback(\n    _createGetImageSrcFromImageIdFn(extensionManager),\n    []\n  );\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\n    null,\n    dataSource\n  );\n\n  return (\n    <PanelStudyBrowserTracking\n      servicesManager={servicesManager}\n      commandsManager={commandsManager}\n      dataSource={dataSource}\n      getImageSrc={_getImageSrcFromImageId}\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\n    />\n  );\n}\n\n/**\n * Grabs cornerstone library reference using a dependent command from\n * the @ohif/extension-cornerstone extension. Then creates a helper function\n * that can take an imageId and return an image src.\n *\n * @param {func} getCommand - CommandManager's getCommand method\n * @returns {func} getImageSrcFromImageId - A utility function powered by\n * cornerstone\n */\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\n  const utilities = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  try {\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\n    return getImageSrcFromImageId.bind(null, cornerstone);\n  } catch (ex) {\n    throw new Error('Required command not found');\n  }\n}\n\nWrappedPanelStudyBrowserTracking.propTypes = {\n  commandsManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.object.isRequired,\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default WrappedPanelStudyBrowserTracking;\n","import React, { useEffect, useState } from 'react';\nimport { PanelMeasurement } from '@ohif/extension-cornerstone';\nimport { useViewportGrid } from '@ohif/ui';\nimport { StudySummary } from '@ohif/ui-next';\nimport { Button, Icons } from '@ohif/ui-next';\nimport { DicomMetadataStore, utils } from '@ohif/core';\nimport { useTrackedMeasurements } from '../getContextModule';\nimport { useTranslation } from 'react-i18next';\n\nconst { downloadCSVReport, formatDate } = utils;\n\nconst DISPLAY_STUDY_SUMMARY_INITIAL_VALUE = {\n  key: undefined, //\n  date: '', // '07-Sep-2010',\n  modality: '', // 'CT',\n  description: '', // 'CHEST/ABD/PELVIS W CONTRAST',\n};\n\nfunction PanelMeasurementTableTracking({\n  servicesManager,\n  extensionManager,\n  commandsManager,\n}: withAppTypes) {\n  const [viewportGrid] = useViewportGrid();\n  const { t } = useTranslation('MeasurementTable');\n  const { measurementService, customizationService } = servicesManager.services;\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\n  const { trackedStudy, trackedSeries } = trackedMeasurements.context;\n  const [displayStudySummary, setDisplayStudySummary] = useState(\n    DISPLAY_STUDY_SUMMARY_INITIAL_VALUE\n  );\n\n  useEffect(() => {\n    const updateDisplayStudySummary = async () => {\n      if (trackedMeasurements.matches('tracking') && trackedStudy) {\n        const studyMeta = DicomMetadataStore.getStudy(trackedStudy);\n        if (!studyMeta || !studyMeta.series || studyMeta.series.length === 0) {\n          console.debug('Study metadata not available');\n          return;\n        }\n\n        const instanceMeta = studyMeta.series[0].instances[0];\n        const { StudyDate, StudyDescription } = instanceMeta;\n\n        const modalities = new Set();\n        studyMeta.series.forEach(series => {\n          if (trackedSeries.includes(series.SeriesInstanceUID)) {\n            modalities.add(series.instances[0].Modality);\n          }\n        });\n        const modality = Array.from(modalities).join('/');\n\n        setDisplayStudySummary(prevSummary => {\n          if (prevSummary.key !== trackedStudy) {\n            return {\n              key: trackedStudy,\n              date: StudyDate,\n              modality,\n              description: StudyDescription,\n            };\n          }\n          return prevSummary;\n        });\n      } else if (!trackedStudy) {\n        setDisplayStudySummary(DISPLAY_STUDY_SUMMARY_INITIAL_VALUE);\n      }\n    };\n\n    updateDisplayStudySummary();\n  }, [trackedMeasurements, trackedStudy, trackedSeries]);\n\n  const { disableEditing } = customizationService.getCustomization(\n    'PanelMeasurement.disableEditing',\n    {\n      id: 'default.disableEditing',\n      disableEditing: false,\n    }\n  );\n\n  return (\n    <>\n      {displayStudySummary.key && (\n        <StudySummary\n          date={formatDate(displayStudySummary.date)}\n          description={displayStudySummary.description}\n        />\n      )}\n      <PanelMeasurement\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n        commandsManager={commandsManager}\n        measurementFilter={measurement =>\n          trackedStudy === measurement.referenceStudyUID &&\n          trackedSeries.includes(measurement.referenceSeriesUID)\n        }\n        customHeader={({ additionalFindings, measurements }) => {\n          const disabled = additionalFindings.length === 0 && measurements.length === 0;\n\n          if (disableEditing || disabled) {\n            return null;\n          }\n\n          return (\n            <div className=\"bg-background flex h-9 w-full items-center rounded pr-0.5\">\n              <div className=\"flex space-x-1\">\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"pl-1.5\"\n                  onClick={() => {\n                    const measurements = measurementService.getMeasurements();\n                    const trackedMeasurements = measurements.filter(\n                      m =>\n                        trackedStudy === m.referenceStudyUID &&\n                        trackedSeries.includes(m.referenceSeriesUID)\n                    );\n\n                    downloadCSVReport(trackedMeasurements);\n                  }}\n                >\n                  <Icons.Download className=\"h-5 w-5\" />\n                  <span className=\"pl-1\">CSV</span>\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"pl-0.5\"\n                  onClick={() => {\n                    sendTrackedMeasurementsEvent('SAVE_REPORT', {\n                      viewportId: viewportGrid.activeViewportId,\n                      isBackupSave: true,\n                    });\n                  }}\n                >\n                  <Icons.Add />\n                  Create SR\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"pl-0.5\"\n                  onClick={() => {\n                    measurementService.clearMeasurements();\n                  }}\n                >\n                  <Icons.Delete />\n                  Delete All\n                </Button>\n              </div>\n            </div>\n          );\n        }}\n      ></PanelMeasurement>\n    </>\n  );\n}\n\nexport default PanelMeasurementTableTracking;\n","import { Types } from '@ohif/core';\nimport { PanelMeasurementTableTracking, PanelStudyBrowserTracking } from './panels';\nimport i18n from 'i18next';\nimport React from 'react';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\n\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }): Types.Panel[] {\n  return [\n    {\n      name: 'seriesList',\n      iconName: 'tab-studies',\n      iconLabel: 'Studies',\n      label: i18n.t('SidePanel:Studies'),\n      component: props => (\n        <PanelStudyBrowserTracking\n          {...props}\n          commandsManager={commandsManager}\n          extensionManager={extensionManager}\n          servicesManager={servicesManager}\n        />\n      ),\n    },\n    {\n      name: 'trackedMeasurements',\n      iconName: 'tab-linear',\n      iconLabel: 'Measure',\n      label: i18n.t('SidePanel:Measurements'),\n      component: props => (\n        <PanelMeasurementTableTracking\n          {...props}\n          commandsManager={commandsManager}\n          extensionManager={extensionManager}\n          servicesManager={servicesManager}\n        />\n      ),\n    },\n  ];\n}\n\nexport default getPanelModule;\n","import React from 'react';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/TrackedCornerstoneViewport');\n});\n\nconst OHIFCornerstoneViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\nfunction getViewportModule({ servicesManager, commandsManager, extensionManager }) {\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\n    return (\n      <OHIFCornerstoneViewport\n        servicesManager={servicesManager}\n        commandsManager={commandsManager}\n        extensionManager={extensionManager}\n        {...props}\n      />\n    );\n  };\n\n  return [\n    {\n      name: 'cornerstone-tracked',\n      component: ExtendedOHIFCornerstoneTrackingViewport,\n    },\n  ];\n}\n\nexport default getViewportModule;\n","import getContextModule from './getContextModule';\nimport getPanelModule from './getPanelModule';\nimport getViewportModule from './getViewportModule';\nimport { id } from './id.js';\n\nconst measurementTrackingExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n\n  getContextModule,\n  getPanelModule,\n  getViewportModule,\n};\n\nexport default measurementTrackingExtension;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n"],"names":["RESPONSE","NO_NEVER","CANCEL","CREATE_REPORT","ADD_SERIES","SET_STUDY_AND_SERIES","NO_NOT_FOR_SERIES","HYDRATE_REPORT","machineConfiguration","id","initial","context","activeViewportId","trackedStudy","trackedSeries","ignoredSeries","prevTrackedStudy","prevTrackedSeries","prevIgnoredSeries","ignoredSRSeriesForHydration","isDirty","states","off","type","labellingOnly","on","TRACK_SERIES","target","actions","idle","entry","cond","SET_TRACKED_SERIES","PROMPT_HYDRATE_SR","RESTORE_PROMPT_HYDRATE_SR","HYDRATE_SR","UPDATE_ACTIVE_VIEWPORT_ID","assign","_","event","promptBeginTracking","invoke","src","onDone","onError","tracking","UNTRACK_SERIES","SAVE_REPORT","SET_DIRTY","promptTrackNewSeries","promptTrackNewStudy","promptSaveReport","promptHydrateStructuredReport","hydrateStructuredReport","promptLabelAnnotation","strict","defaultOptions","services","ctx","evt","discardPreviouslyTrackedMeasurements","console","log","clearAllMeasurements","jumpToFirstMeasurementInActiveViewport","warn","showStructuredReportDisplaySetInActiveViewport","clearContext","setTrackedStudyAndSeries","slice","data","StudyInstanceUID","SeriesInstanceUID","setTrackedStudyAndMultipleSeries","studyInstanceUID","seriesInstanceUIDs","SeriesInstanceUIDs","setIsDirtyToClean","setIsDirty","ignoreSeries","ignoreHydrationForSRSeries","srSeriesInstanceUID","addTrackedSeries","removeTrackedSeries","filter","ser","setPreviousState","meta","prevState","state","value","guards","shouldSetDirty","undefined","includes","wasLabellingOnly","condMeta","wasIdle","wasTracking","wasTrackingAndIsNewStudy","wasTrackingAndIsNewSeries","shouldKillMachine","userResponse","shouldAddSeries","shouldSetStudyAndSeries","shouldAddIgnoredSeries","shouldPromptSaveReport","shouldIgnoreHydrationForSR","shouldSaveAndContinueWithSameReport","isBackupSave","shouldSaveAndStartNewReport","shouldHydrateStructuredReport","hasRemainingTrackedSeries","length","hasNotIgnoredSRSeriesForHydration","isNewStudy","isNewSeries","servicesManager","extensionManager","uiViewportDialogService","appConfig","_appConfig","viewportId","Promise","async","resolve","reject","promptResult","disableConfirmationPrompts","message","i18n","t","ButtonEnums","secondary","text","primary","onSubmit","result","hide","show","onOutsideClick","onKeyPress","key","action","find","_askTrackMeasurements","UIViewportDialogService","_askShouldAddMeasurements","_askSaveDiscardOrCancel","displaySetService","displaySetInstanceUID","srDisplaySet","getDisplaySetByUID","hydrationResult","baseHydrateStructuredReport","TrackedMeasurementsContext","React","displayName","useTrackedMeasurements","useContext","SR_SOPCLASSHANDLERID","TrackedMeasurementsContextProvider","commandsManager","children","useAppConfig","viewportGrid","viewportGridService","useViewportGrid","viewports","measurementService","customizationService","machineOptions","Object","trackedMeasurements","getMeasurements","m","referenceStudyUID","referenceSeriesUID","referencedDisplaySetUID","referencedImages","images","isVolumeIdReferenced","imageId","startsWith","measurementData","imageIndex","findIndex","image","imageIdToUse","keys","substring","setDisplaySetsForViewport","displaySetInstanceUIDs","viewportOptions","initialImageOptions","index","jumpToSameImageInActiveViewport","runCommand","createdDisplaySetInstanceUIDs","StructuredReportDisplaySetInstanceUID","measurementIds","ms","map","fm","i","remove","uid","bind","isLabelOnMeasure","labelConfig","get","labelOnMeasure","isLabelOnMeasureAndShouldKillMachine","measurementTrackingMachine","useMemo","Machine","sendTrackedMeasurementsEvent","useMachine","useEffect","size","activeViewport","displaySet","SOPClassHandlerId","isLoaded","load","isRehydratable","triggerPromptHydrateFlow","Provider","propTypes","PropTypes","isRequired","BoundTrackedMeasurementsContextProvider","name","provider","defaultActionIcons","iconName","defaultViewPresets","selected","formatDate","createStudyBrowserTabs","utils","thumbnailNoImageModalities","PanelStudyBrowserTracking","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","dataSource","uiDialogService","hangingProtocolService","uiNotificationService","studyPrefetcherService","navigate","useNavigate","useTranslation","StudyInstanceUIDs","useImageViewer","isHangingProtocolLayout","activeTabName","setActiveTabName","useState","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","hasLoadedViewports","setHasLoadedViewports","displaySets","setDisplaySets","displaySetsLoadingState","setDisplaySetsLoadingState","thumbnailImageSrcMap","setThumbnailImageSrcMap","jumpToDisplaySet","setJumpToDisplaySet","viewPresets","setViewPresets","getCustomization","actionIcons","setActionIcons","activeViewportDisplaySetInstanceUIDs","forEach","sid","qidoForStudyUID","query","studies","search","studyInstanceUid","Error","qidoStudiesForPatient","error","actuallyMappedStudies","study","AccessionNumber","accession","StudyDate","date","StudyDescription","description","NumInstances","instances","ModalitiesInStudy","modalities","PatientID","mrn","PatientName","patientName","StudyTime","time","qidoStudy","numInstances","prevArray","ret","it","push","fetchStudiesForPatient","window","setTimeout","currentDisplaySets","activeDisplaySets","ds","Modality","newImageSrcEntry","dSet","getImageIdForThumbnail","getImageIdsForDisplaySet","unsupported","mappedDisplaySets","_mapDisplaySets","unsubscribe","subscribe","EVENTS","DISPLAYSET_LOAD_PROGRESS","updatedDisplaySetLoadingState","loadingProgress","SubscriptionDisplaySetsAdded","DISPLAY_SETS_ADDED","displaySetsAdded","options","madeInClient","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","SubscriptionDisplaySetMetaDataInvalidated","DISPLAY_SET_SERIES_METADATA_INVALIDATED","getActiveDisplaySets","tabs","element","document","getElementById","scrollIntoView","behavior","thumbnailLocation","s","d","tabName","_findTabAndStudyOfDisplaySet","updatedExpandedStudyInstanceUIDs","onClickUntrack","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","body","className","classes","onClose","dismiss","onConfirm","PanelStudyBrowserHeader","updateViewPresetValue","viewPreset","newViewPresets","preset","updateActionIconValue","actionIcon","newActionIcons","Separator","orientation","thickness","StudyBrowser","onClickStudy","shouldCollapseStudy","stdyUid","onClickTab","clickedTabName","onClickThumbnail","onDoubleClickThumbnail","updatedViewports","getViewportsRequireUpdate","duration","setDisplaySetsForViewports","activeDisplaySetInstanceUIDs","showSettings","icon","onThumbnailContextMenu","commandName","imageIds","isDynamicVolume","timePoints","dynamicVolumeInfo","middleTimePointImageIds","Math","floor","displaySetLoadingState","trackedSeriesInstanceUIDs","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","imageSrc","componentType","_getComponentType","array","getNumViewportPanes","thumbnailProps","SeriesDescription","seriesNumber","SeriesNumber","modality","seriesDate","SeriesDate","numImageFrames","countIcon","messages","dragData","isTracked","isHydratedForDerivedDisplaySet","isHydrated","series","canReject","onReject","onShow","querySelector","focus","deleteDisplaySet","cornerstone","canvas","createElement","utilities","loadImageToCanvas","thumbnail","then","toDataURL","catch","some","retrieve","metadata","WrappedPanelStudyBrowserTracking","getActiveDataSource","utilityModule","getModuleEntry","exports","_getStudyForPatientUtility","_getStudiesForPatientByMRN","_getImageSrcFromImageId","useCallback","getCornerstoneLibraries","getImageSrcFromImageId","ex","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","downloadCSVReport","DISPLAY_STUDY_SUMMARY_INITIAL_VALUE","displayStudySummary","setDisplayStudySummary","matches","studyMeta","DicomMetadataStore","getStudy","debug","instanceMeta","Set","add","Array","from","join","prevSummary","updateDisplayStudySummary","disableEditing","StudySummary","PanelMeasurement","measurementFilter","measurement","customHeader","additionalFindings","measurements","disabled","Button","variant","onClick","Icons","Download","Add","clearMeasurements","Delete","iconLabel","label","component","props","_extends","PanelMeasurementTableTracking","Component","OHIFCornerstoneViewport","fallback","packageJson","getContextModule","getPanelModule","getViewportModule"],"sourceRoot":""}