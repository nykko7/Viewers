{"version":3,"file":"4202.bundle.af54621f78a85b4e838b.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-pmap/src/viewports/OHIFCornerstonePMAPViewport.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useViewportGrid, LoadingIndicatorTotalPercent } from '@ohif/ui';\n\nfunction OHIFCornerstonePMAPViewport(props: withAppTypes) {\n  const {\n    displaySets,\n    children,\n    viewportOptions,\n    displaySetOptions,\n    servicesManager,\n    extensionManager,\n  } = props;\n  const viewportId = viewportOptions.viewportId;\n  const { displaySetService, segmentationService, uiNotificationService } =\n    servicesManager.services;\n\n  // PMAP viewport will always have a single display set\n  if (displaySets.length !== 1) {\n    throw new Error('PMAP viewport must have a single display set');\n  }\n\n  const pmapDisplaySet = displaySets[0];\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const referencedDisplaySetRef = useRef(null);\n  const { viewports, activeViewportId } = viewportGrid;\n  const referencedDisplaySet = pmapDisplaySet.getReferenceDisplaySet();\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\n    referencedDisplaySet,\n    pmapDisplaySet\n  );\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n\n  const [pmapIsLoading, setPmapIsLoading] = useState(!pmapDisplaySet.isLoaded);\n\n  // Add effect to listen for loading complete\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\n      evt => {\n        if (evt.pmapDisplaySet?.displaySetInstanceUID === pmapDisplaySet.displaySetInstanceUID) {\n          setPmapIsLoading(false);\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [pmapDisplaySet]);\n\n  const getCornerstoneViewport = useCallback(() => {\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    displaySetOptions.unshift({});\n    const [pmapDisplaySetOptions] = displaySetOptions;\n\n    // Make sure `options` exists\n    pmapDisplaySetOptions.options = pmapDisplaySetOptions.options ?? {};\n\n    Object.assign(pmapDisplaySetOptions.options, {\n      colormap: {\n        name: 'rainbow_2',\n        opacity: [\n          { value: 0, opacity: 0 },\n          { value: 0.25, opacity: 0.25 },\n          { value: 0.5, opacity: 0.5 },\n          { value: 0.75, opacity: 0.75 },\n          { value: 0.9, opacity: 0.99 },\n        ],\n      },\n      voi: {\n        windowCenter: 50,\n        windowWidth: 100,\n      },\n    });\n\n    uiNotificationService.show({\n      title: 'Parametric Map',\n      type: 'warning',\n      message: 'The values are multiplied by 100 in the viewport for better visibility',\n    });\n\n    return (\n      <Component\n        {...props}\n        // Referenced + PMAP displaySets must be passed as parameter in this order\n        displaySets={[referencedDisplaySet, pmapDisplaySet]}\n        viewportOptions={{\n          viewportType: 'volume',\n          orientation: viewportOptions.orientation,\n          viewportId: viewportOptions.viewportId,\n        }}\n        displaySetOptions={[{}, pmapDisplaySetOptions]}\n      ></Component>\n    );\n  }, [\n    extensionManager,\n    displaySetOptions,\n    props,\n    pmapDisplaySet,\n    viewportOptions.orientation,\n    viewportOptions.viewportId,\n  ]);\n\n  // Cleanup the PMAP viewport when the viewport is destroyed\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports.get(activeViewportId);\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportId: activeViewportId,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, [activeViewportId, displaySetService, viewportGridService, viewports]);\n\n  let childrenWithProps = null;\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportId,\n          key: index,\n        })\n      );\n    });\n  }\n\n  return (\n    <>\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\n        {pmapIsLoading && (\n          <LoadingIndicatorTotalPercent\n            className=\"h-full w-full\"\n            totalNumbers={null}\n            percentComplete={null}\n            loadingText=\"Loading Parametric Map...\"\n          />\n        )}\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstonePMAPViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportId: PropTypes.string.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n};\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, pmapDisplaySet) {\n  const { SharedFunctionalGroupsSequence } = pmapDisplaySet.instance;\n\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\n    ? SharedFunctionalGroupsSequence[0]\n    : SharedFunctionalGroupsSequence;\n\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\n\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\n    ? PixelMeasuresSequence[0]\n    : PixelMeasuresSequence;\n\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness || SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstonePMAPViewport;\n"],"names":["OHIFCornerstonePMAPViewport","props","displaySets","children","viewportOptions","displaySetOptions","servicesManager","extensionManager","viewportId","displaySetService","segmentationService","uiNotificationService","services","length","Error","pmapDisplaySet","viewportGrid","viewportGridService","useViewportGrid","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","instance","SharedFunctionalGroup","Array","isArray","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","displaySet","metadata","pmapIsLoading","setPmapIsLoading","useState","isLoaded","useEffect","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","evt","displaySetInstanceUID","getCornerstoneViewport","useCallback","component","Component","getModuleEntry","unshift","pmapDisplaySetOptions","options","Object","assign","colormap","name","opacity","value","voi","windowCenter","windowWidth","show","title","type","message","React","_extends","viewportType","orientation","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","get","includes","setDisplaySetsForViewport","childrenWithProps","map","child","index","key","className","LoadingIndicatorTotalPercent","totalNumbers","percentComplete","loadingText","propTypes","PropTypes","isRequired","dataSource"],"sourceRoot":""}