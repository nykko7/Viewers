{"version":3,"file":"4688.bundle.b0d61783381ed921d572.js","mappings":"wIAEMA,E,yCAAKC,GCALC,EAAkB,CACtBF,GAAI,SACJG,KAAM,UACNC,QAAQ,EACRC,6BAA6B,EAC7BC,sBAAuB,GACvBC,aAAc,CAAC,WACfC,oBAAqB,CACnBC,aAAc,CACZC,oBAAqB,CACnB,CACEC,OAAQ,EACRC,UAAW,WACXC,WAAY,CACVC,OAAQ,SAKhBC,cAAe,CACbL,oBAAqB,CACnB,CACEC,OAAQ,EACRC,UAAW,WACXC,WAAY,CACVC,OAAQ,WAMlBE,OAAQ,CACN,CACEhB,GAAI,QACJG,KAAM,WACNc,kBAAmB,CACjBC,WAAY,OACZC,WAAY,CACVC,KAAM,EACNC,QAAS,IAGbC,UAAW,CACT,CACEC,gBAAiB,CACfC,aAAc,QACdC,YAAa,UACbC,oBAAoB,EACpBC,WAAY,CACV,CACEC,KAAM,QACN5B,GAAI,SACJ6B,QAAQ,EACRC,QAAQ,KAIdC,YAAa,CACX,CACE/B,GAAI,eACJgC,yBAA0B,GAE5B,CACEhC,GAAI,gBACJgC,yBAA0B,EAC1BC,QAAS,CACPC,YAAY,EACZC,eAAe,SAQ7BC,yBAA0B,GAa5B,QAVA,WACE,MAAO,CACL,CACEpC,GAAI,GAAGA,kCACPG,KAAM,GAAGH,kCACTqC,SAAUnC,GAGhB,E,oECrDA,MAiDMoC,EAAuB,CAC3BC,OAlDiBC,EAAGC,OAAMzC,SAC1B,MAAM0C,EAAWD,GACVE,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GAErCC,EAAUJ,EAASK,WAAaL,EAASM,WAAa,mBAAqB,QAC3EC,EAAYP,EAASK,WAAaL,EAASM,WAAa,QAAU,QAElEE,EAAcR,EAASM,WAAa,mBAAqB,qBAE/D,OACEG,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACC,EAAAA,GAAW,CACVC,UAAWV,EACXW,SAAUC,EAAAA,GAASC,OACnBC,OAAQ,GACRC,UAAU,6EACVC,MAAO,CAAEC,OAAQ,IAAKC,SAAU,YAEhCV,EAAAA,cAAA,OAAKO,UAAU,aACbP,EAAAA,cAAA,OAAKO,UAAU,oCAAoChB,EAASoB,OAC5DX,EAAAA,cAAA,OAAKO,UAAU,iBAAgB,UACrB,IACRP,EAAAA,cAAA,QAAMO,UAAU,aACbhB,EAASqB,OAAO,KAAEZ,EAAAA,cAAA,WAAK,OAG5BA,EAAAA,cAAA,OAAKO,UAAU,iBAAgB,aACnBP,EAAAA,cAAA,QAAMO,UAAU,aAAahB,EAASsB,aAAa,SAKnEb,EAAAA,cAAA,OACEO,UAAU,8HACVC,MAAO,CACLM,WAAYnB,EACZI,YAAaA,GAEfgB,aAAcA,IAAMtB,GAAa,GACjCuB,aAAcA,IAAMvB,GAAa,IAEjCO,EAAAA,cAACiB,EAAAA,GAAM,CAACxC,KAAK,SAAS0B,SAAUC,EAAAA,GAASc,IAAKV,MAAO,CAAEM,WAAY,iBACnEd,EAAAA,cAAA,OAAKO,UAAW,0BAA0BT,KAAcP,EAASoB,OACjEX,EAAAA,cAACiB,EAAAA,GAAM,CAACxC,KAAK,SAAS0B,SAAUC,EAAAA,GAASC,OAAQG,MAAO,CAAEM,WAAY,kBAEvE,GAgBA,SAASK,GAAgB,KAC9B1C,EAAI,eACJ2C,EAAc,iBACdC,EAAgB,eAChBC,EAAc,WACdC,IAEA,MAAMC,GAAmBC,EAAAA,EAAAA,cAAY,KACnC,MAAMC,EAAgC,GAChCC,EAAgB,GAGhBC,EAAUL,GAAYM,eAAiB,GAmF7C,MAhFgB,CACd,CACEhF,GAAI,KACJ+E,QAASA,EAAQE,KAAIC,IAAS,CAC5BC,WAAYD,EAAMC,WAClBC,WAAYF,EAAME,WAClBjF,KAAM+E,EAAM/E,KACZkF,eAAgBH,EAAMG,eACtBC,iBAAkBJ,EAAMI,iBACxBC,kBAAmBL,EAAMK,kBACzBxB,OAAQmB,EAAMnB,OACdC,aAAcwB,KAAKC,IAAIP,EAAMI,iBAAkBJ,EAAMK,wBAGzD,CACEvF,GAAI,KACJ+E,QAASA,EAAQE,KAAIC,IAAS,CAC5BC,WAAYD,EAAMC,WAClBC,WAAYF,EAAME,WAClBjF,KAAM+E,EAAM/E,KACZkF,eAAgBH,EAAMG,eACtBC,iBAAkBJ,EAAMI,iBACxBC,kBAAmBL,EAAMK,kBACzBxB,OAAQmB,EAAMnB,OACdC,aAAcwB,KAAKC,IAAIP,EAAMI,iBAAkBJ,EAAMK,wBAGzD,CACEvF,GAAI,KACJ+E,QAASA,EAAQE,KAAIC,IAAS,CAC5BC,WAAYD,EAAMC,WAClBC,WAAYF,EAAME,WAClBjF,KAAM+E,EAAM/E,KACZkF,eAAgBH,EAAMG,eACtBC,iBAAkBJ,EAAMI,iBACxBC,kBAAmBL,EAAMK,kBACzBxB,OAAQmB,EAAMnB,OACdC,aAAcwB,KAAKC,IAAIP,EAAMI,iBAAkBJ,EAAMK,yBAKnDG,SAAQ,CAACnD,EAAQoD,KACvB,MAAMC,EAAwB,IAAdD,EAEhBpD,EAAOwC,QAAQW,SAAQ,CAACR,EAAOW,KAC7BhB,EAAMiB,KAAK,CACT9F,GAAI,GAAGuC,EAAOvC,MAAM6F,IACpBjE,KAAM,SACN0B,SAAU,CAAEyC,EAAGH,EAASI,EAAO,IAAJH,GAC3BpD,KAAM,CACJqB,MAAOvB,EAAOvC,GACdmF,WAAYD,EAAMC,WAClBC,WAAYF,EAAME,WAClBjF,KAAM+E,EAAM/E,KACZkF,eAAgBH,EAAMG,eACtBC,iBAAkBJ,EAAMI,iBACxBC,kBAAmBL,EAAMK,kBACzBxB,OAAQmB,EAAMnB,OACdC,aAAcwB,KAAKC,IAAIP,EAAMI,iBAAkBJ,EAAMK,mBACrDxC,UAAW8C,IAAMtB,EACjBvB,WAAYT,EAAOvC,KAAOwE,EAC1B5C,KAAM,gBAINiE,EAAI,GACNf,EAAMgB,KAAK,CACT9F,GAAI,IAAIuC,EAAOvC,MAAM6F,IACrBhE,OAAQ,GAAGU,EAAOvC,MAAM6F,EAAI,IAC5B/D,OAAQ,GAAGS,EAAOvC,MAAM6F,IACxBjE,KAAM,aACN+B,MAAO,CACLsC,OAAQ1D,EAAOvC,KAAOwE,EAAmB,UAAY,YAG3D,GACA,IAGG,CAAEK,QAAOC,QAAO,GACtB,CAAClD,EAAM2C,EAAgBC,EAAkBE,KAEtC,MAAEG,EAAK,MAAEC,GAAUH,IAOzB,OACExB,EAAAA,cAAA,OAAKQ,MAAO,CAAEuC,OAAQ,MACpB/C,EAAAA,cAACgD,EAAAA,GAAS,CACRtB,MAAOA,EACPC,MAAOA,EACPxC,UAAWA,EACX8D,YAXkBC,CAACC,EAAyBC,KAChD,MAAMC,EAAWD,EAAK9D,KAAKqB,MAC3BW,IAAiB+B,EAAS,EAUtBC,mBAAoB,CAAE7E,KAAM,aAAc8E,UAAU,GACpDC,SAAO,EACPC,eAAgB,CACdC,QAAS,IAEXC,WAAY,CAAEC,iBAAiB,GAC/BC,UAAU,QAEV7D,EAAAA,cAAC8D,EAAAA,GAAU,MACX9D,EAAAA,cAAC+D,EAAAA,GAAQ,OAIjB,CCxLA,MAAMC,EAA0C,CAC9C,CACEhC,WAAY,aACZC,WAAY,aACZrB,OAAQ,IACR5D,KAAM,UACNkF,eAAgB,EAChBC,iBAAkB,EAClBC,kBAAmB,EACnB6B,mBAAmB,EACnBC,eAAgB,SAChBC,gBAAiB,CAAC,KAAM,KAAM,OAEhC,CACEnC,WAAY,aACZC,WAAY,aACZrB,OAAQ,IACR5D,KAAM,UACNkF,eAAgB,EAChBC,iBAAkB,EAClBC,kBAAmB,EACnB6B,mBAAmB,EACnBC,eAAgB,SAChBC,gBAAiB,CAAC,KAAM,KAAM,OAEhC,CACEnC,WAAY,aACZC,WAAY,aACZrB,OAAQ,IACR5D,KAAM,UACNkF,eAAgB,EAChBC,iBAAkB,EAClBC,kBAAmB,EACnB6B,mBAAmB,EACnBC,eAAgB,SAChBC,gBAAiB,CAAC,KAAM,KAAM,QAK3B,SAASC,GAAiB,KAC/BC,EAAI,aACJC,EAAY,aACZC,EAAY,YACZC,EAAW,OACXC,IAEA,MAAOC,EAAUC,IAAejF,EAAAA,EAAAA,UAAqB,CACnD1C,KAAMwH,GAAaxH,MAAQ,UAAUuH,EAAe,IACpDK,MAAOJ,GAAaI,OAAS,aAC7BnG,KAAM+F,GAAa/F,MAAQ,aAC3ByF,eAAgBM,GAAaN,gBAAkB,SAC/CrC,cAAe2C,GAAa3C,eAAiBmC,KAGxC3C,EAAkBwD,IAAuBnF,EAAAA,EAAAA,UAAS,MAOzD,OACEM,EAAAA,cAAC8E,EAAAA,GAAM,CAACT,KAAMA,EAAMC,aAAcA,GAChCtE,EAAAA,cAAC+E,EAAAA,GAAa,CAACxE,UAAU,aACvBP,EAAAA,cAACgF,EAAAA,GAAe,KACdhF,EAAAA,cAACiF,EAAAA,GAAY,KACXjF,EAAAA,cAACkF,EAAAA,GAAW,CAAC3E,UAAU,sBAAqB,sBAC5CP,EAAAA,cAACmF,EAAAA,GAAiB,KAAC,+DAGnBnF,EAAAA,cAAA,OAAKO,UAAU,QACbP,EAAAA,cAACoF,EAAAA,GAAK,KAAC,kBACPpF,EAAAA,cAACqF,EAAAA,GAAM,CAACC,MAAOjE,EAAkBkE,cAAeV,GAC9C7E,EAAAA,cAACwF,EAAAA,GAAa,CAACjF,UAAU,aACvBP,EAAAA,cAACyF,EAAAA,GAAW,OAEdzF,EAAAA,cAAC0F,EAAAA,GAAa,KACZ1F,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,MAAK,YACvBtF,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,MAAK,gBAM/BtF,EAAAA,cAAA,OAAKO,UAAU,0BACbP,EAAAA,cAAA,OAAKO,UAAU,aACbP,EAAAA,cAAA,OAAKO,UAAU,aACbP,EAAAA,cAACoF,EAAAA,GAAK,KAAC,SACPpF,EAAAA,cAAC4F,EAAAA,GAAK,CACJN,MAAOZ,EAAS1H,KAChB6I,SAAUC,GAAKnB,GAAYoB,IAAQ,IAAMA,EAAM/I,KAAM8I,EAAEnH,OAAO2G,aAIlEtF,EAAAA,cAAA,OAAKO,UAAU,aACbP,EAAAA,cAACoF,EAAAA,GAAK,KAAC,mBACPpF,EAAAA,cAACqF,EAAAA,GAAM,CACLC,MAAOZ,EAASE,MAChBW,cAAeD,GACbX,GAAYoB,IAAQ,IAAMA,EAAMnB,MAAOU,OAGzCtF,EAAAA,cAACwF,EAAAA,GAAa,KACZxF,EAAAA,cAACyF,EAAAA,GAAW,OAEdzF,EAAAA,cAAC0F,EAAAA,GAAa,KACZ1F,EAAAA,cAACgG,EAAAA,GAAW,KACVhG,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,cAAa,cAC/BtF,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,aAAY,aAC9BtF,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,SAAQ,SAC1BtF,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,SAAQ,aAMlCtF,EAAAA,cAAA,OAAKO,UAAU,aACbP,EAAAA,cAACoF,EAAAA,GAAK,KAAC,SACPpF,EAAAA,cAACqF,EAAAA,GAAM,CACLC,MAAOZ,EAASjG,KAChB8G,cAAeD,GACbX,GAAYoB,IAAQ,IAAMA,EAAMtH,KAAM6G,OAGxCtF,EAAAA,cAACwF,EAAAA,GAAa,KACZxF,EAAAA,cAACyF,EAAAA,GAAW,OAEdzF,EAAAA,cAAC0F,EAAAA,GAAa,KACZ1F,EAAAA,cAACgG,EAAAA,GAAW,KACVhG,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,cAAa,cAC/BtF,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,SAAQ,SAC1BtF,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,QAAO,QACzBtF,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,UAAS,cAMnCtF,EAAAA,cAAA,OAAKO,UAAU,aACbP,EAAAA,cAACoF,EAAAA,GAAK,KAAC,mBACPpF,EAAAA,cAACqF,EAAAA,GAAM,CACLC,MAAOZ,EAASR,eAChBqB,cAAeD,GACbX,GAAYoB,IAAQ,IACfA,EACH7B,eAAgBoB,OAIpBtF,EAAAA,cAACwF,EAAAA,GAAa,KACZxF,EAAAA,cAACyF,EAAAA,GAAW,OAEdzF,EAAAA,cAAC0F,EAAAA,GAAa,KACZ1F,EAAAA,cAACgG,EAAAA,GAAW,KACVhG,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,UAAS,UAC3BtF,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,cAAa,cAC/BtF,EAAAA,cAAC2F,EAAAA,GAAU,CAACL,MAAM,cAAa,kBAMvCtF,EAAAA,cAAA,OAAKO,UAAU,aACbP,EAAAA,cAACoF,EAAAA,GAAK,KAAC,qBACPpF,EAAAA,cAAA,OAAKO,UAAU,kCACbP,EAAAA,cAAA,OAAKO,UAAU,uCACbP,EAAAA,cAAA,OAAKO,UAAU,4CACbP,EAAAA,cAAA,OAAKO,UAAU,oFACbP,EAAAA,cAAA,WAAK,cACLA,EAAAA,cAAA,WAAK,aACOA,EAAAA,cAAA,WAAK,KAAO,KAExBA,EAAAA,cAAA,WAAK,6BACLA,EAAAA,cAAA,WAAK,yBAGTA,EAAAA,cAAA,OAAKO,UAAU,4BACZmE,EAAS7C,cAAcC,KAAI,CAACmE,EAAcC,IACzClG,EAAAA,cAAA,OACEmG,IAAKD,EACL3F,UAAU,sEAEVP,EAAAA,cAAA,WAAMiG,EAAajE,YACnBhC,EAAAA,cAAA,WAAMiG,EAAarF,QACnBZ,EAAAA,cAAA,WAAMiG,EAAa/D,gBACnBlC,EAAAA,cAAA,WACGqC,KAAKC,IACJ2D,EAAa9D,iBACb8D,EAAa7D,4BAW/BpC,EAAAA,cAAA,OAAKO,UAAU,2BACbP,EAAAA,cAACoF,EAAAA,GAAK,KAAC,2BACPpF,EAAAA,cAAA,OAAKO,UAAU,kCACbP,EAAAA,cAACmB,EAAe,CACd1C,KAAK,YACL2C,eAAgB,EAChBC,iBAAkBA,EAClBC,eAAgBuD,EAChBtD,WAAYmD,OAMpB1E,EAAAA,cAACoG,EAAAA,GAAY,KACXpG,EAAAA,cAACqG,EAAAA,GAAM,CAACC,QAASA,IAAMhC,GAAa,GAAQiC,QAAQ,UAAUC,KAAK,MAAK,UAGxExG,EAAAA,cAACqG,EAAAA,GAAM,CAACC,QAjKIG,KACpBhC,IAASC,GACTJ,GAAa,EAAM,EA+JqBiC,QAAQ,UAAUC,KAAK,MAAK,cAQxE,CC/PO,SAASE,GAAa,MAAEC,EAAK,iBAAEC,GAAmB,IA6BvD,OACE5G,EAAAA,cAAA,OAAKO,UAAU,gCACZsG,OAAOC,QA9BmB,CAC7BlG,OAAQ,CACND,MAAO,SACPoG,KAAM,OAERC,SAAU,CACRrG,MAAO,WACPoG,KAAM,MAERE,gBAAiB,CACftG,MAAO,QACPoG,KAAM,QAmBkCjF,KAAI,EAAEqE,EAAKb,MACjDtF,SAAAA,cAAA,OACEmG,IAAKA,EACL5F,UAAU,+FAEVP,EAAAA,cAAA,QAAMO,UAAU,UAAU+E,EAAM3E,MAAM,KACtCX,EAAAA,cAAA,QAAMO,UAAU,oBACboG,EAAMR,GAAK,IAAEb,EAAMyB,KACnBJ,EAAM,GAAGR,cAvBOe,EAuB4BP,EAAM,GAAGR,YAtBzDS,EAEDM,EAAS,EACJlH,EAAAA,cAAA,QAAMO,UAAU,qBAAoB,KAAG2G,EAAO,MAC5CA,EAAS,EACXlH,EAAAA,cAAA,QAAMO,UAAU,uBAAsB,IAAE2G,EAAO,MAClC,IAAXA,EACFlH,EAAAA,cAAA,QAAMO,UAAU,sBAAqB,IAAE2G,EAAO,MAEhD,KATuB,QADLA,KA0BtB,IAGP,CC3BO,SAASC,GAAW,eACzBC,EAAc,aACd7C,EAAY,MACZ5D,EAAK,YACL0G,EAAW,MACXC,EAAK,QACLC,EAAO,OACPtK,EAAM,OACNuK,EAAM,eACNC,EAAc,YACdC,EAAW,mBACXC,EAAkB,WAClBC,EAAU,oBACVC,EAAmB,mBACnBC,EAAkB,aAClBC,EAAY,SACZC,EAAQ,SACRC,EAAQ,SACRC,IAEA,MAAMC,EAAW,OAAOb,EAAM,MAAMA,EAAM,MAAMA,EAAM,MAyBtD,OACEtH,EAAAA,cAAA,OAAKO,UAAU,iBACbP,EAAAA,cAACoI,EAAAA,GAAO,CACNC,OAAQ9D,EACR+D,MAAO3H,EACP4H,YAAalB,EACbmB,QAZG,CACLC,QAjBc,GAkBdC,UAjBgB,IA4BdC,SAAUR,EACVtI,WAAY2H,EACZtH,UAAWqH,EACXqB,SAAU3L,EACVwK,eAAgBA,EAChBoB,QAASA,IAAMhB,EAAoBT,EAAgB7C,GACnDuD,mBAAoBA,IAClBA,EAAmBV,EAAgB7C,EAAcoD,GAEnDmB,eAAgBA,IAAMf,EAAaX,EAAgB7C,GACnDyD,SAAUA,IAAMA,EAASZ,EAAgB7C,GACzC0D,SAAUA,IAAMA,EAASb,EAAgB7C,GACzC2D,SAAUA,IAAMA,EAASd,EAAgB7C,KAG3CvE,EAAAA,cAAC0G,EAAY,CAACC,MAAOe,IAErB1H,EAAAA,cAACqG,EAAAA,GAAM,CACLE,QAAQ,UACRC,KAAK,KACLjG,UAAU,YACV+F,QAASA,IAAMsB,EAAWR,EAAgB7C,IAC3C,aAKP,C,eClFO,SAASwE,GAAa,MAC3BT,EAAK,SACLU,EAAQ,eACR5B,EAAc,eACdK,EAAc,mBACdE,EAAkB,WAClBC,EAAU,oBACVC,EAAmB,mBACnBC,EAAkB,aAClBC,EAAY,SACZC,EAAQ,SACRC,EAAQ,SACRC,EAAQ,UACR3H,IAEA,OACEP,EAAAA,cAAA,OAAKO,WAAW0I,EAAAA,EAAAA,IAAG,OAAQ1I,IACzBP,EAAAA,cAAA,MAAIO,UAAU,gDAAgD+H,EAAM,KACnEU,GACCA,EAASE,QAAU,GACnBF,EAASlH,KAAI,EAAGqH,UAASC,8BACvB,MAAM,aAAE7E,EAAY,MAAE+C,EAAK,QAAEC,GAAY4B,GACnC,OAAElM,EAAM,OAAEuK,EAAM,MAAE7G,EAAK,YAAE0G,EAAW,YAAEK,GAAgB0B,EAE5D,OACEpJ,EAAAA,cAACmH,EAAU,CACThB,IAAK5B,EACL6C,eAAgBA,EAChB7C,aAAcA,EACd5D,MAAOA,EACP0G,YAAaA,EACbC,MAAOA,EACPC,QAASA,EACTtK,OAAQA,EACRuK,OAAQA,EACRC,eAAgBA,EAChBC,YAAaA,EACbC,mBAAoBA,EACpBC,WAAYA,EACZC,oBAAqBA,EACrBC,mBAAoBA,EACpBC,aAAcA,EACdC,SAAUA,EACVC,SAAUA,EACVC,SAAUA,GACV,IAKd,CC5DO,SAASmB,GACdC,aAAcC,EACdC,eAAgBC,IAEhB,MAAM,qBACJC,EAAoB,eACpBjC,EAAc,oBACdI,EAAmB,0BACnB8B,EAAyB,oBACzBC,EAAmB,eACnBC,EAAc,KACdC,EAAI,cACJC,EAAa,gBACbC,EAAe,KACf1K,IACE2K,EAAAA,EAAAA,IAA4B,8BAEhC,IAAIC,EAAoBX,EACpBY,EAAsBV,EACtBW,EAAsBV,EAE1B,IAAKQ,IAAsBC,EAAqB,CAC9C,MAAME,EAAQ/K,EAAKgL,MAAKC,GAAOA,EAAIjB,aAAalC,iBAAmBsC,IACnEQ,EAAoBG,GAAOf,aAC3Ba,EAAsBE,GAAOb,eAC7BY,EAAsBC,GAAOf,aAAalC,cAC5C,CAEA,IAAK+C,IAAwBD,EAC3B,OAAO,KAGT,MAAOM,EAAgBC,IAAqB/K,EAAAA,EAAAA,WAAS,IAC9CgL,EAAsBC,IAA2BjL,EAAAA,EAAAA,UAAwB,MAE1EkL,EAAiBA,CAACxD,EAAwB7C,KAC9CoG,EAAwBpG,GACxBkG,GAAkB,EAAK,EAKnB1H,GAFe8D,OAAOgE,KAAKV,EAAoBnB,UAAY,CAAC,GAAGE,OAE7C,cAATY,EAAuB,YAAc,aAE9CgB,GCtCN9B,EDuCEmB,EAAoBnB,UAAY,CAAC,ECtCnC+B,EDuCEb,EAAkBlB,UAAY,CAAC,GCrC1BgC,EAAAA,EAAAA,UAAQ,IACNnE,OAAOoE,OAAOjC,GAAUkC,QAC7B,CAACC,EAAKhC,KACJ,IAAKA,EAAS,OAAOgC,EAErB,MAAM/B,EAA0B2B,EAAc5B,EAAQ5E,cACtD,IAAK6E,EAAyB,OAAO+B,EAGrC,MAAMjH,EAAiBkF,EAAwBlF,gBAAkB,SAOjE,OALKiH,EAAIjH,KACPiH,EAAIjH,GAAkB,IAGxBiH,EAAIjH,GAAgBvB,KAAK,CAAEwG,UAASC,4BAC7B+B,CAAG,GAEZ,CAAC,IAKF,CAACnC,EAAU+B,KA3BT,IACL/B,EACA+B,ED8CA,OACE/K,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACoL,EAAAA,GAAU,CACT7K,WAAW0I,EAAAA,EAAAA,IAAG,4DAA4DlG,KAC1EsI,YAAY,GAEZrL,EAAAA,cAAC+I,EAAY,CACXT,MAAM,iBACNU,SAAU8B,EAAwB,QAAK,GACvC1D,eAAgBgD,EAChB3C,eAAgBA,EAChBE,mBAAoBwC,EAAoB1L,KACxCmJ,WAAYgD,EACZ/C,oBAAqBA,EACrBC,mBAAoB6B,EACpB5B,aAAc6B,EACd5B,SAAU6B,EACV5B,SAAU8B,EACV7B,SAAU8B,IAEZhK,EAAAA,cAAC+I,EAAY,CACXT,MAAM,qBACNU,SAAU8B,EAAgB,eAAiB,GAC3C1D,eAAgBgD,EAChB3C,eAAgBA,EAChBE,mBAAoBwC,EAAoB1L,KACxCmJ,WAAYgD,EACZ/C,oBAAqBA,EACrBC,mBAAoB6B,EACpB5B,aAAc6B,EACd5B,SAAU6B,EACV5B,SAAU8B,EACV7B,SAAU8B,IAEZhK,EAAAA,cAAC+I,EAAY,CACXT,MAAM,cACNU,SAAU8B,EAAgB,eAAiB,GAC3C1D,eAAgBgD,EAChB3C,eAAgBA,EAChBE,mBAAoBwC,EAAoB1L,KACxCmJ,WAAYgD,EACZ/C,oBAAqBA,EACrBC,mBAAoB6B,EACpB5B,aAAc6B,EACd5B,SAAU6B,EACV5B,SAAU8B,EACV7B,SAAU8B,EACVzJ,UAAU,UAIY,OAAzBmK,GACC1K,EAAAA,cAACoE,EAAgB,CACfC,KAAMmG,EACNlG,aAAcmG,EACdlG,aAAcmG,IAKxB,CE/GO,SAASY,GAAwB,gBACtCC,EAAe,gBACfC,EAAe,SACfC,IAEA,MAAM,oBAAEC,EAAmB,qBAAEC,EAAoB,kBAAEC,GAAsBL,EAAgBM,UAEnF,iCAAEC,EAAgC,SAAEC,IACxCC,EAAAA,EAAAA,8CAA6C,CAC3CT,oBAGEU,ECzBD,UAA4B,gBAAEV,EAAe,gBAAEC,IACpD,MAAM,oBAAEE,GAAwBH,EAAgBM,SA4GhD,MA1GiB,CACfK,kBAAmBC,UACjB,MAAMC,EAAaV,EAAoBW,WAAWC,iBAClDd,EAAgBe,IAAI,4BAA6B,CAAEH,cAAa,EAGlEI,oBAAsBpF,IACpBoE,EAAgBe,IAAI,wBAAyB,CAAEnF,kBAAiB,EAGlEqF,aAAcrF,IACZoE,EAAgBe,IAAI,aAAc,CAAEnF,kBAAiB,EAGvDyC,eAAgBA,CAACzC,EAAgB7C,KAC/BiH,EAAgBe,IAAI,4BAA6B,CAAEnF,iBAAgB7C,gBAAe,EAGpFwF,cAAeA,CAAC3C,EAAgB7C,KAC9BiH,EAAgBe,IAAI,mBAAoB,CAAEnF,iBAAgB7C,gBAAe,EAG3EmI,mBAAoBtF,IAClBoE,EAAgBe,IAAI,wBAAyB,CAAEnF,kBAAiB,EAGlES,oBAAqBA,CAACT,EAAgB7C,KACpCiH,EAAgBe,IAAI,mBAAoB,CAAEnF,iBAAgB7C,gBAAe,EAG3EyF,gBAAiBA,CAAC5C,EAAgB7C,KAChCiH,EAAgBe,IAAI,gBAAiB,CAAEnF,iBAAgB7C,gBAAe,EAGxEoF,0BAA2BA,CAACvC,EAAgB7C,EAAc9F,KACxDkO,QAAQC,IAAI,iBAAkBxF,GAC9BuF,QAAQC,IAAI,eAAgBrI,GAC5BoI,QAAQC,IAAI,OAAQnO,GACpB+M,EAAgBe,IAAI,0BAA2B,CAAEnF,iBAAgB7C,eAAc9F,QAAO,EAGxFmL,oBAAqBA,CAACxC,EAAgB7C,KACpCiH,EAAgBe,IAAI,oBAAqB,CAAEnF,iBAAgB7C,gBAAe,EAG5EsI,6CAA8CzF,IAC5CoE,EAAgBe,IAAI,+BAAgC,CAAEnF,kBAAiB,EAGzE0F,uBAAwB1F,IACtBoE,EAAgBe,IAAI,uBAAwB,CAAEnF,kBAAiB,EAGjE2F,kBAAmBZ,UACjBX,EAAgBe,IAAI,oBAAqB,CAAEnF,kBAAiB,EAG9D4F,2BAA4B5F,IAC1BoE,EAAgBe,IAAI,eAAgB,CAAEnF,kBAAiB,EAGzD6F,SAAUA,CAAC7F,EAAgB3I,EAAM0H,EAAKb,KACpCkG,EAAgBe,IAAI,uBAAwB,CAAEnF,iBAAgB3I,OAAM0H,MAAKb,SAAQ,EAGnF4H,kCAAmCA,KACjC1B,EAAgBe,IAAI,oCAAoC,EAG1DY,iCAAkC/F,IAChCoE,EAAgBe,IAAI,iCAAkC,CAAEnF,kBAAiB,EAG3EgG,qBAAsBhG,IACpBoE,EAAgBe,IAAI,qBAAsB,CAAEnF,kBAAiB,EAG/DiG,aAAcA,EAAG5O,QAAQ6G,KACvBkG,EAAgBe,IAAI,eAAgB,CAAE9N,OAAM6G,SAAQ,EAGtDgI,gBAAiBA,EAAG7O,QAAQ6G,KAC1BkG,EAAgBe,IAAI,kBAAmB,CAAE9N,OAAM6G,SAAQ,EAGzDiI,cAAeA,EAAG9O,QAAQ6G,KACxBkG,EAAgBe,IAAI,gBAAiB,CAAE9N,OAAM6G,SAAQ,EAGvDkI,iBAAkBA,EAAG/O,QAAQ6G,KAC3BkG,EAAgBe,IAAI,mBAAoB,CAAE9N,OAAM6G,SAAQ,EAG1DmI,qBAAsBA,EAAGhP,QAAQ6G,KAC/BkG,EAAgBe,IAAI,uBAAwB,CAAE9N,OAAM6G,SAAQ,EAG9DoI,+BAAgCA,IACvBlC,EAAgBe,IAAI,kCAG7BoB,+BAAgCA,CAACvG,EAAgB9B,KAC/CkG,EAAgBe,IAAI,iCAAkC,CAAEnF,iBAAgB9B,SAAQ,EAKtF,CDrFmBsI,CAAmB,CAAErC,kBAAiBC,qBAE/C1B,KAAM+D,GAA0BlC,EAAqBmC,iBAC3D,8BACA,CACEjR,GAAI,iCACJiN,KAAM,eAKJ,kBAAEoC,GAAsBP,EAAqBmC,iBACjD,sCACA,CACEjR,GAAI,iCACJqP,kBAAmBD,EAASC,qBAI1B,eAAEzE,GAAmBkE,EAAqBmC,iBAC9C,mCACA,CACEjR,GAAI,yBACJ4K,gBAAgB,KAId,eAAEsG,GAAmBpC,EAAqBmC,iBAC9C,mCACA,CACEjR,GAAI,yBACJkR,gBAAgB,IAIdC,EAAgBlC,EAAiChK,KAAI,EAAGwH,mBAC5D,MAAM,mBAAE2E,EAAkB,eAAE7G,GAAmBkC,GACzC,SAAE4E,GAAaD,EAErB,IAAKC,EACH,MAAO,CACL9G,iBACA+G,cAAc,GAIlB,MACMC,EADqBF,EAASG,mBACI,GAElCC,EAAWC,EAAAA,SAAAA,IAAa,WAAYH,IACpC,eAAEI,EAAc,kBAAEC,GAAsBH,EAExCI,EAAa9C,EAAkB+C,+BACnCH,EACAC,GAGF,MAAO,CACLrH,iBACA+G,aAAcO,GAAYE,oBAAqB,EAChD,KAGHC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAuB3C,UAC3B,MAAM,WAAEC,GAAejJ,EACvB,GAAKiJ,EAEL,IACE,MAAM2C,GAAkBC,EAAAA,EAAAA,oBAAmB,eACrCC,GAAiBC,EAAAA,EAAAA,mBAAkB9C,GAEzC,IAAK2C,IAAoBE,EAAgB,CAEnCF,GACFA,EAAgBI,eAAe/C,SAI3BZ,EAAgBe,IAAI,qBAAsB,CAAEH,eAGlD,MAAMgD,GAAqBJ,EAAAA,EAAAA,oBAAmB,eAC1CI,GACFA,EAAmBC,cAAcjD,EAErC,CACF,CAAE,MAAOkD,GACP3C,QAAQ4C,KAAK,kCAAmCD,EAClD,GAIIE,EAAc9D,EAAoB+D,UACtC/D,EAAoBgE,OAAOC,2BAC3Bb,GAIIc,EAAoBlE,EAAoBW,WAAWC,iBAKzD,OAJIsD,GACFd,EAAqB,CAAE1C,WAAYwD,IAG9B,KACLJ,GAAa,CACd,GACA,CAAC9D,EAAqBF,IAMzB,OACExL,EAAAA,cAAC6P,EAAAA,GAAiB,CAChB9D,SAAUA,EACVzM,KAAMwM,EACNhC,KAAM+D,EACNvF,MAAM,gBACN0F,cAAeA,EACfvG,eAAgBA,EAChByE,kBAAmBA,EACnBM,oBAAqBP,EAASO,oBAC9BY,qBAAsBnB,EAASmB,qBAC/BW,eAAgBA,EAChBtB,aAAcR,EAASQ,aACvB5C,eAAgBoC,EAASpC,eACzBE,cAAekC,EAASlC,cACxB2C,mBAAoBT,EAASS,mBAC7B7E,oBAAqBoE,EAASpE,oBAC9BmC,gBAAiBiC,EAASjC,gBAC1BL,0BAA2BsC,EAAStC,0BACpCC,oBAAqBqC,EAASrC,oBAC9BiD,6CACEZ,EAASY,6CAEXC,uBAAwBb,EAASa,uBACjCC,kBAAmBd,EAASc,kBAC5BC,2BAA4Bf,EAASe,2BACrCC,SAAUhB,EAASgB,SACnBC,kCAAmCjB,EAASiB,kCAC5CC,iCAAkClB,EAASkB,iCAC3CE,aAAcpB,EAASoB,aACvBC,gBAAiBrB,EAASqB,gBAC1BC,cAAetB,EAASsB,cACxBC,iBAAkBvB,EAASuB,iBAC3BC,qBAAsBxB,EAASwB,qBAC/BqC,4BAA6B7D,EAASyB,kCAErCjC,EACDzL,EAAAA,cAAC6P,EAAAA,GAAkBE,OAAM,MAGE,cAA1BlC,EACC7N,EAAAA,cAAC6P,EAAAA,GAAkBG,UAAS,KAC1BhQ,EAAAA,cAAC6P,EAAAA,GAAkBI,eAAc,MACjCjQ,EAAAA,cAAC6P,EAAAA,GAAkBK,cAAa,MAEhClQ,EAAAA,cAACqJ,EAA0B,OAG7BrJ,EAAAA,cAAC6P,EAAAA,GAAkBM,SAAQ,KACzBnQ,EAAAA,cAAC6P,EAAAA,GAAkBO,OAAM,MACzBpQ,EAAAA,cAAC6P,EAAAA,GAAkBK,cAAa,MAEhClQ,EAAAA,cAACqJ,EAA0B,OAG9ByC,EAAiC5C,OAAS,GACzClJ,EAAAA,cAAA,OAAKO,UAAU,2BACbP,EAAAA,cAAA,OAAKO,UAAU,0EACbP,EAAAA,cAAA,YAAM,iBACNA,EAAAA,cAAA,QAAMO,UAAU,wBAAuB,OACjCP,EAAAA,cAAA,WAAK,MAEXA,EAAAA,cAAA,YAAM,mBACNA,EAAAA,cAAA,QAAMO,UAAU,wBAAuB,SAGzCP,EAAAA,cAACqG,EAAAA,GAAM,CACLC,QAvEgB+J,KACxB1D,QAAQC,IAAI,eAAe,EAuEnBrM,UAAU,SACVgG,QAAQ,UACRC,KAAK,KACLuF,UAAQ,GACT,iBAOX,CEzLA,QA9BA,UAAwB,gBAAEP,EAAe,iBAAE8E,EAAgB,gBAAE/E,IAmB3D,MAAO,CACL,CACEvO,KAAM,eACNuT,SAAU,mBACVC,UAAW,eACX7P,MAAO,eACP8P,UAxB6BC,IAE7B1Q,EAAAA,cAAA,WACEA,EAAAA,cAAC2Q,EAAAA,GAAO,CACNnF,gBAAiBA,EACjBD,gBAAiBA,EACjB+E,iBAAkBA,EAClBM,gBAAgB,sBAChBtI,MAAM,uBAERtI,EAAAA,cAACsL,EAAuB,CACtBC,gBAAiBA,EACjBC,gBAAiBA,MAe3B,E,eCNO,MCkCP,EAxDuBqF,EACrBtF,kBACAC,sBAEA,MAAM,oBAAEE,EAAmB,kBAAEE,EAAiB,oBAAEkF,GAAwBvF,EAAgBM,SAElFkF,EAAU,CAEdC,kBAAAA,EAAmB,sBAAEC,IACnB,MAAM,iBAAE3E,EAAgB,UAAEnO,GAAcuN,EAAoBW,WACtD6E,EAA6B/S,EAAUgT,IAAI7E,IAC3C,uBAAE8E,GAA2BF,EAE7BtS,EAAcgN,EAAkByF,mBAChC,eAAEC,GAAmB/F,EAAgBM,SAErC0F,EAA+BN,GAAyBG,EAAuB,GACrFE,EAAeE,KAAK,CAClBC,QAASC,EAAAA,EACTC,aAAc,CACZ/S,cACAqS,sBAAuBM,EACvBK,QAASN,EAAeO,MAE1BC,oBAAqB,wBACrBxJ,MAAO,qBAEX,EAEAyJ,uBAAsBA,EAAC,eAAE3K,KDPS+E,QACpC/E,iBACAoE,kBACAsF,0BAIA,MAAMxH,EAAewH,EAAoBkB,gBAAgB5K,GACzD,IAAKkC,EAAc,QAEnB2I,EAAAA,EAAAA,cAAaC,EAAAA,YAAaC,EAAAA,MAAAA,OAAaC,oBAAqB,CAC1DC,SAAU,EACV5T,KAAM,0BACN5B,GAAIuK,IAIN,MAAMkL,EAAiBxB,EAAoByB,kBAAkBnL,IACvD,UAAEoL,EAAS,QAAEC,GAAYH,EACzBI,EAAaF,EAAUG,eAAeC,aAAaC,UAGzD,IAAK,MAAOtO,EAAc4E,KAAYtC,OAAOC,QAAQwC,EAAaN,UAAW,CAC3E,IAAKG,EAAS,SAEd,MAAM2J,EAAsBC,OAAOxO,GACnC,IAAIyO,EAAa,EAIjB,IAAK,IAAItQ,EAAI,EAAGA,EAAIgQ,EAAWxJ,OAAQxG,IACjCgQ,EAAWhQ,KAAOoQ,GACpBE,IAKJ,MAAMC,EAAaD,EAAaP,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,GAAK,KAIjES,EAAS7Q,KAAK8Q,IAAK,EAAIF,GAAe,EAAI5Q,KAAK+Q,IAAK,EAAI,GAGxDC,EAAkB,CACtBrM,SAAUsM,YAHS,EAAIJ,EAAS,IAGEK,QAAQ,IAC1C3S,OAAQ0S,WAAWL,EAAWM,QAAQ,IACtCC,cAAe,WAIXC,EAA0B,IAC3BtK,EACHzB,YAAa,IACRyB,EAAQzB,eACR2L,IAIP/J,EAAaN,SAASzE,GAAgBkP,CACxC,CAGA,MAAMC,EAAoC,IACrCpK,EACHN,SAAU,IACLM,EAAaN,YAIpBiJ,EAAAA,EAAAA,cAAaC,EAAAA,YAAaC,EAAAA,MAAAA,OAAaC,oBAAqB,CAC1DC,SAAU,IACV5T,KAAM,0BACN5B,GAAIuK,IAIN0J,EAAoB6C,wBAAwBD,EAAoB,ECrErD3B,CAAuB,CAC5B3K,iBACAoE,kBACAsF,sBACAvF,qBAeN,MAAO,CACLwF,UACA6C,YAZkB,CAElB5C,mBAAoB,CAClB6C,UAAW9C,EAAQC,oBAErBe,uBAAwB,CACtB8B,UAAW9C,EAAQgB,yBAOrB+B,eAAgB,SACjB,ECdH,EAlCuB,CAIrBjX,GAAE,EAEFkX,eAAAA,EAAgB,gBAAExI,EAAe,gBAAEC,EAAe,iBAAE8E,EAAgB,cAAE0D,EAAgB,CAAC,IAAM,EAE7FC,eAAc,EACdC,yBAAwB,EACxBC,kBAAiBA,E","sources":["webpack:///../../../extensions/t-chaii/src/id.ts","webpack:///../../../extensions/t-chaii/src/getHangingProtocolModule.ts","webpack:///../../../extensions/t-chaii/src/Panels/Segmentation/components/LesionFlowGraph.tsx","webpack:///../../../extensions/t-chaii/src/Panels/Segmentation/components/EditLesionDialog.tsx","webpack:///../../../extensions/t-chaii/src/Panels/Segmentation/components/SegmentStats.tsx","webpack:///../../../extensions/t-chaii/src/Panels/Segmentation/components/SegmentRow.tsx","webpack:///../../../extensions/t-chaii/src/Panels/Segmentation/components/SegmentGroup.tsx","webpack:///../../../extensions/t-chaii/src/Panels/Segmentation/components/CustomSegmentationSegments.tsx","webpack:///../../../extensions/t-chaii/src/Panels/Segmentation/hooks/useSegmentGroups.ts","webpack:///../../../extensions/t-chaii/src/Panels/Segmentation/components/CustomPanelSegmentation.tsx","webpack:///../../../extensions/t-chaii/src/Panels/Segmentation/hooks/useSegmentHandlers.ts","webpack:///../../../extensions/t-chaii/src/getPanelModule.tsx","webpack:///../../../extensions/t-chaii/src/utils/updateSegmentationInfo.ts","webpack:///../../../extensions/t-chaii/src/commandsModule.ts","webpack:///../../../extensions/t-chaii/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { id } from './id';\n\nconst defaultProtocol = {\n  id: 'tchaii',\n  name: 'T-CHAII',\n  locked: true,\n  hasUpdatedPriorsInformation: false,\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  displaySetSelectors: {\n    ctDisplaySet: {\n      seriesMatchingRules: [\n        {\n          weight: 1,\n          attribute: 'Modality',\n          constraint: {\n            equals: 'CT',\n          },\n        },\n      ],\n    },\n    segDisplaySet: {\n      seriesMatchingRules: [\n        {\n          weight: 1,\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SEG',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      id: 'ctSeg',\n      name: 'CT + SEG',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            viewportType: 'stack',\n            toolGroupId: 'default',\n            allowUnmatchedView: true,\n            syncGroups: [\n              {\n                type: 'image',\n                id: 'ctSync',\n                source: true,\n                target: true,\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'ctDisplaySet',\n              matchedDisplaySetsIndex: -1,\n            },\n            {\n              id: 'segDisplaySet',\n              matchedDisplaySetsIndex: -1,\n              options: {\n                visibility: true,\n                renderOutline: true,\n              },\n            },\n          ],\n        },\n      ],\n    },\n  ],\n  numberOfPriorsReferenced: 0,\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      id: `${id}.hangingProtocolModule.default`,\n      name: `${id}.hangingProtocolModule.default`,\n      protocol: defaultProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\n","import React, { useCallback, useState } from 'react';\nimport {\n  ReactFlow,\n  Node,\n  Edge,\n  Background,\n  Controls,\n  Handle,\n  Position,\n  NodeProps,\n  NodeTypes,\n  NodeToolbar,\n} from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport { LesionInfo } from '../types';\n\n// Type for the node data only\ntype LesionNodeData = {\n  label: string;\n  created_at: string;\n  updated_at: string;\n  name: string;\n  axial_diameter: number;\n  coronal_diameter: number;\n  sagittal_diameter: number;\n  volume: number;\n  max_diameter: number;\n  isCurrent: boolean;\n  isSelected: boolean;\n  type: 'maintained' | 'joined' | 'separated';\n};\n\n// Complete node type extending Node\ntype LesionNode = Node<LesionNodeData>;\n\nconst CustomNode = ({ data, id }: NodeProps) => {\n  const nodeData = data as LesionNodeData;\n  const [isHovered, setIsHovered] = useState(false);\n\n  const bgColor = nodeData.isCurrent && nodeData.isSelected ? 'rgb(37, 99, 235)' : 'white';\n  const textColor = nodeData.isCurrent && nodeData.isSelected ? 'white' : 'black';\n  // make the border\n  const borderColor = nodeData.isSelected ? 'rgb(37, 99, 235)' : 'rgb(156, 163, 175)';\n\n  return (\n    <>\n      <NodeToolbar\n        isVisible={isHovered}\n        position={Position.Bottom}\n        offset={10}\n        className=\"bg-background border-input z-99 rounded-lg border p-4 text-white shadow-lg\"\n        style={{ zIndex: 999, overflow: 'visible' }}\n      >\n        <div className=\"space-y-1\">\n          <div className=\"text-center font-bold text-white\">{nodeData.label}</div>\n          <div className=\"text-gray-200\">\n            Volume:{' '}\n            <span className=\"font-bold\">\n              {nodeData.volume}mm<sup>3</sup>\n            </span>\n          </div>\n          <div className=\"text-gray-200\">\n            Diameter: <span className=\"font-bold\">{nodeData.max_diameter}mm</span>\n          </div>\n        </div>\n      </NodeToolbar>\n\n      <div\n        className=\"flex h-12 w-12 cursor-pointer items-center justify-center rounded-full border-4 transition-all duration-200 hover:scale-110\"\n        style={{\n          background: bgColor,\n          borderColor: borderColor,\n        }}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        <Handle type=\"target\" position={Position.Top} style={{ background: 'transparent' }} />\n        <div className={`text-sm font-bold text-${textColor}`}>{nodeData.label}</div>\n        <Handle type=\"source\" position={Position.Bottom} style={{ background: 'transparent' }} />\n      </div>\n    </>\n  );\n};\n\nconst nodeTypes: NodeTypes = {\n  lesion: CustomNode,\n};\n\ntype LesionFlowGraphProps = {\n  type: 'maintained' | 'joined' | 'separated';\n  currentControl: number;\n  selectedLesionId?: string;\n  onLesionSelect?: (lesionId: string) => void;\n  lesionInfo?: LesionInfo;\n};\n\nexport function LesionFlowGraph({\n  type,\n  currentControl,\n  selectedLesionId,\n  onLesionSelect,\n  lesionInfo,\n}: LesionFlowGraphProps) {\n  const getNodesAndEdges = useCallback(() => {\n    const nodes: Node<LesionNodeData>[] = [];\n    const edges: Edge[] = [];\n\n    // Use actual studies from lesionInfo if available\n    const studies = lesionInfo?.studySegments || [];\n\n    // Define lesions based on the type\n    const lesions = [\n      {\n        id: 'L1',\n        studies: studies.map(study => ({\n          created_at: study.created_at,\n          updated_at: study.updated_at,\n          name: study.name,\n          axial_diameter: study.axial_diameter,\n          coronal_diameter: study.coronal_diameter,\n          sagittal_diameter: study.sagittal_diameter,\n          volume: study.volume,\n          max_diameter: Math.max(study.coronal_diameter, study.sagittal_diameter),\n        })),\n      },\n      {\n        id: 'L2',\n        studies: studies.map(study => ({\n          created_at: study.created_at,\n          updated_at: study.updated_at,\n          name: study.name,\n          axial_diameter: study.axial_diameter,\n          coronal_diameter: study.coronal_diameter,\n          sagittal_diameter: study.sagittal_diameter,\n          volume: study.volume,\n          max_diameter: Math.max(study.coronal_diameter, study.sagittal_diameter),\n        })),\n      },\n      {\n        id: 'L3',\n        studies: studies.map(study => ({\n          created_at: study.created_at,\n          updated_at: study.updated_at,\n          name: study.name,\n          axial_diameter: study.axial_diameter,\n          coronal_diameter: study.coronal_diameter,\n          sagittal_diameter: study.sagittal_diameter,\n          volume: study.volume,\n          max_diameter: Math.max(study.coronal_diameter, study.sagittal_diameter),\n        })),\n      },\n    ];\n\n    lesions.forEach((lesion, lesionIndex) => {\n      const xOffset = lesionIndex * 150;\n\n      lesion.studies.forEach((study, i) => {\n        nodes.push({\n          id: `${lesion.id}-${i}`,\n          type: 'lesion',\n          position: { x: xOffset, y: i * 100 },\n          data: {\n            label: lesion.id,\n            created_at: study.created_at,\n            updated_at: study.updated_at,\n            name: study.name,\n            axial_diameter: study.axial_diameter,\n            coronal_diameter: study.coronal_diameter,\n            sagittal_diameter: study.sagittal_diameter,\n            volume: study.volume,\n            max_diameter: Math.max(study.coronal_diameter, study.sagittal_diameter),\n            isCurrent: i === currentControl,\n            isSelected: lesion.id === selectedLesionId,\n            type: 'maintained',\n          },\n        });\n\n        if (i > 0) {\n          edges.push({\n            id: `e${lesion.id}-${i}`,\n            source: `${lesion.id}-${i - 1}`,\n            target: `${lesion.id}-${i}`,\n            type: 'smoothstep',\n            style: {\n              stroke: lesion.id === selectedLesionId ? '#3b82f6' : '#9ca3af',\n            },\n          });\n        }\n      });\n    });\n\n    return { nodes, edges };\n  }, [type, currentControl, selectedLesionId, lesionInfo]);\n\n  const { nodes, edges } = getNodesAndEdges();\n\n  const handleNodeClick = (event: React.MouseEvent, node: LesionNode) => {\n    const lesionId = node.data.label;\n    onLesionSelect?.(lesionId);\n  };\n\n  return (\n    <div style={{ height: 600 }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        nodeTypes={nodeTypes}\n        onNodeClick={handleNodeClick}\n        defaultEdgeOptions={{ type: 'smoothstep', animated: true }}\n        fitView\n        fitViewOptions={{\n          padding: 0.3,\n        }}\n        proOptions={{ hideAttribution: true }}\n        colorMode=\"dark\"\n      >\n        <Background />\n        <Controls />\n      </ReactFlow>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Input,\n  Label,\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  SelectGroup,\n  TooltipProvider,\n  DialogDescription,\n} from '@ohif/ui-next';\n\nimport {\n  LesionInfo,\n  StudySegments,\n  AffectedOrgan,\n  LesionType,\n  LesionClassification,\n} from '../types';\nimport { LesionFlowGraph } from './LesionFlowGraph';\n\ntype EditLesionDialogProps = {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  segmentIndex: number;\n  initialData?: Partial<LesionInfo>;\n  onSave?: (data: LesionInfo) => void;\n};\n\nconst DEFAULT_STUDY_SEGMENTS: StudySegments[] = [\n  {\n    created_at: '01/08/2024',\n    updated_at: '01/08/2024',\n    volume: 100,\n    name: 'Study 1',\n    axial_diameter: 5,\n    coronal_diameter: 8,\n    sagittal_diameter: 8,\n    is_target_lession: true,\n    classification: 'Target',\n    lesion_segments: ['L1', 'L2', 'L3'],\n  },\n  {\n    created_at: '01/08/2024',\n    updated_at: '01/08/2024',\n    volume: 100,\n    name: 'Study 2',\n    axial_diameter: 5,\n    coronal_diameter: 8,\n    sagittal_diameter: 8,\n    is_target_lession: true,\n    classification: 'Target',\n    lesion_segments: ['L1', 'L2', 'L3'],\n  },\n  {\n    created_at: '01/08/2024',\n    updated_at: '01/08/2024',\n    volume: 100,\n    name: 'Study 3',\n    axial_diameter: 5,\n    coronal_diameter: 8,\n    sagittal_diameter: 8,\n    is_target_lession: true,\n    classification: 'Target',\n    lesion_segments: ['L1', 'L2', 'L3'],\n  },\n  // ... add more default controls if needed\n];\n\nexport function EditLesionDialog({\n  open,\n  onOpenChange,\n  segmentIndex,\n  initialData,\n  onSave,\n}: EditLesionDialogProps) {\n  const [formData, setFormData] = useState<LesionInfo>({\n    name: initialData?.name ?? `Lesion ${segmentIndex + 1}`,\n    organ: initialData?.organ ?? 'Right lung',\n    type: initialData?.type ?? 'Lymph node',\n    classification: initialData?.classification ?? 'Target',\n    studySegments: initialData?.studySegments ?? DEFAULT_STUDY_SEGMENTS,\n  });\n\n  const [selectedLesionId, setSelectedLesionId] = useState('L1');\n\n  const handleConfirm = () => {\n    onSave?.(formData);\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-6xl\">\n        <TooltipProvider>\n          <DialogHeader>\n            <DialogTitle className=\"text-primary-light\">Lesion Information</DialogTitle>\n            <DialogDescription>\n              Select the lesion to edit and update the information below.\n            </DialogDescription>\n            <div className=\"mt-4\">\n              <Label>Select Lesion:</Label>\n              <Select value={selectedLesionId} onValueChange={setSelectedLesionId}>\n                <SelectTrigger className=\"w-[200px]\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"L1\">Lesion 1</SelectItem>\n                  <SelectItem value=\"L2\">Lesion 2</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </DialogHeader>\n\n          <div className=\"grid grid-cols-2 gap-8\">\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Name:</Label>\n                <Input\n                  value={formData.name}\n                  onChange={e => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Affected Organ:</Label>\n                <Select\n                  value={formData.organ}\n                  onValueChange={value =>\n                    setFormData(prev => ({ ...prev, organ: value as AffectedOrgan }))\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectGroup>\n                      <SelectItem value=\"Right lung\">Right lung</SelectItem>\n                      <SelectItem value=\"Left lung\">Left lung</SelectItem>\n                      <SelectItem value=\"Liver\">Liver</SelectItem>\n                      <SelectItem value=\"Brain\">Brain</SelectItem>\n                    </SelectGroup>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Type:</Label>\n                <Select\n                  value={formData.type}\n                  onValueChange={value =>\n                    setFormData(prev => ({ ...prev, type: value as LesionType }))\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectGroup>\n                      <SelectItem value=\"Lymph node\">Lymph node</SelectItem>\n                      <SelectItem value=\"Tumor\">Tumor</SelectItem>\n                      <SelectItem value=\"Mass\">Mass</SelectItem>\n                      <SelectItem value=\"Nodule\">Nodule</SelectItem>\n                    </SelectGroup>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Classification:</Label>\n                <Select\n                  value={formData.classification}\n                  onValueChange={value =>\n                    setFormData(prev => ({\n                      ...prev,\n                      classification: value as LesionClassification,\n                    }))\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectGroup>\n                      <SelectItem value=\"Target\">Target</SelectItem>\n                      <SelectItem value=\"Non-Target\">Non-Target</SelectItem>\n                      <SelectItem value=\"New Lesion\">New Lesion</SelectItem>\n                    </SelectGroup>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Lesion Follow-up:</Label>\n                <div className=\"overflow-hidden rounded border\">\n                  <div className=\"min-w-full divide-y divide-gray-200\">\n                    <div className=\"bg-secondary-dark border-secondary-light\">\n                      <div className=\"text-secondary-foreground grid grid-cols-4 gap-4 px-4 py-3 text-sm font-semibold\">\n                        <div>Study Date</div>\n                        <div>\n                          Volume (cm<sup>3</sup>)\n                        </div>\n                        <div>Major Axial Diameter (mm)</div>\n                        <div>Major Diameter (mm)</div>\n                      </div>\n                    </div>\n                    <div className=\"divide-y divide-gray-200\">\n                      {formData.studySegments.map((studySegment, index) => (\n                        <div\n                          key={index}\n                          className=\"text-secondary-foreground grid grid-cols-4 gap-4 px-4 py-3 text-sm\"\n                        >\n                          <div>{studySegment.created_at}</div>\n                          <div>{studySegment.volume}</div>\n                          <div>{studySegment.axial_diameter}</div>\n                          <div>\n                            {Math.max(\n                              studySegment.coronal_diameter,\n                              studySegment.sagittal_diameter\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2 border-l pl-4\">\n              <Label>Lesion Follow-up Graph:</Label>\n              <div className=\"border-input rounded-lg border\">\n                <LesionFlowGraph\n                  type=\"separated\"\n                  currentControl={2}\n                  selectedLesionId={selectedLesionId}\n                  onLesionSelect={setSelectedLesionId}\n                  lesionInfo={formData}\n                />\n              </div>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button onClick={() => onOpenChange(false)} variant=\"outline\" size=\"lg\">\n              Cancel\n            </Button>\n            <Button onClick={handleConfirm} variant=\"default\" size=\"lg\">\n              Confirm\n            </Button>\n          </DialogFooter>\n        </TooltipProvider>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport { SegmentStatsType as SegmentStatsType } from '../types';\n\ntype SegmentStatsProps = {\n  stats: SegmentStatsType;\n  showChangeValues?: boolean;\n};\n\nexport function SegmentStats({ stats, showChangeValues = true }: SegmentStatsProps) {\n  const segmentAdditionalStats = {\n    volume: {\n      label: 'Volume',\n      unit: 'mm³',\n    },\n    diameter: {\n      label: 'Diameter',\n      unit: 'mm',\n    },\n    affected_organs: {\n      label: 'Organ',\n      unit: null,\n    },\n  };\n\n  const renderChangeValue = (change: number) => {\n    if (!showChangeValues) return null;\n\n    if (change > 0) {\n      return <span className=\"ml-2 text-red-500\">(+{change}%)</span>;\n    } else if (change < 0) {\n      return <span className=\"ml-2 text-green-500\">({change}%)</span>;\n    } else if (change === 0) {\n      return <span className=\"ml-2 text-gray-500\">({change}%)</span>;\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"ml-7 flex flex-col px-2 py-2\">\n      {Object.entries(segmentAdditionalStats).map(([key, value]) => (\n        <div\n          key={key}\n          className=\"text-secondary-foreground flex h-full items-center justify-between text-base leading-normal\"\n        >\n          <span className=\"flex-1\">{value.label}:</span>\n          <span className=\"flex-1 font-bold\">\n            {stats[key]} {value.unit}\n            {stats[`${key}_change`] && renderChangeValue(stats[`${key}_change`] as number)}\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport { DataRow } from '@ohif/ui-next';\nimport { Button } from '@ohif/ui-next';\nimport { SegmentStats } from './SegmentStats';\n\ntype SegmentRowProps = {\n  segmentationId: string;\n  segmentIndex: number;\n  label: string;\n  displayText: string;\n  color: [number, number, number];\n  visible: boolean;\n  locked: boolean;\n  active: boolean;\n  disableEditing: boolean;\n  cachedStats: any;\n  representationType: string;\n  onEditInfo: (segmentationId: string, segmentIndex: number) => void;\n  onSegmentColorClick: (segmentationId: string, segmentIndex: number) => void;\n  onToggleVisibility: (segmentationId: string, segmentIndex: number, type: string) => void;\n  onToggleLock: (segmentationId: string, segmentIndex: number) => void;\n  onSelect: (segmentationId: string, segmentIndex: number) => void;\n  onRename: (segmentationId: string, segmentIndex: number) => void;\n  onDelete: (segmentationId: string, segmentIndex: number) => void;\n};\n\nexport function SegmentRow({\n  segmentationId,\n  segmentIndex,\n  label,\n  displayText,\n  color,\n  visible,\n  locked,\n  active,\n  disableEditing,\n  cachedStats,\n  representationType,\n  onEditInfo,\n  onSegmentColorClick,\n  onToggleVisibility,\n  onToggleLock,\n  onSelect,\n  onRename,\n  onDelete,\n}: SegmentRowProps) {\n  const cssColor = `rgb(${color[0]},${color[1]},${color[2]})`;\n\n  const formatDetails = () => {\n    const primary = [];\n    const secondary = [];\n\n    // if (cachedStats?.volume) {\n    //   primary.push(`Volume: ${cachedStats.volume} ml`);\n    // }\n    // if (cachedStats?.diameter) {\n    //   primary.push(`Diameter: ${cachedStats.diameter} mm`);\n    // }\n    // if (cachedStats?.affected_organs) {\n    //   secondary.push(`Organ: ${cachedStats.affected_organs}`);\n    // }\n    // if (displayText) {\n    //   secondary.push(displayText);\n    // }\n\n    return {\n      primary,\n      secondary,\n    };\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <DataRow\n        number={segmentIndex}\n        title={label}\n        description={displayText}\n        details={formatDetails()}\n        colorHex={cssColor}\n        isSelected={active}\n        isVisible={visible}\n        isLocked={locked}\n        disableEditing={disableEditing}\n        onColor={() => onSegmentColorClick(segmentationId, segmentIndex)}\n        onToggleVisibility={() =>\n          onToggleVisibility(segmentationId, segmentIndex, representationType)\n        }\n        onToggleLocked={() => onToggleLock(segmentationId, segmentIndex)}\n        onSelect={() => onSelect(segmentationId, segmentIndex)}\n        onRename={() => onRename(segmentationId, segmentIndex)}\n        onDelete={() => onDelete(segmentationId, segmentIndex)}\n      />\n\n      <SegmentStats stats={cachedStats} />\n\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        className=\"ml-8 mb-2\"\n        onClick={() => onEditInfo(segmentationId, segmentIndex)}\n      >\n        Edit info\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { SegmentRow } from './SegmentRow';\nimport { cn } from '@ohif/ui-next/lib/utils';\n\ntype SegmentGroupProps = {\n  title: string;\n  segments: Array<{\n    segment: any;\n    segmentFromSegmentation: any;\n  }>;\n  className?: string;\n  segmentationId: string;\n  disableEditing: boolean;\n  representationType: string;\n  onEditInfo: (segmentationId: string, segmentIndex: number) => void;\n  onSegmentColorClick: (segmentationId: string, segmentIndex: number) => void;\n  onToggleVisibility: (segmentationId: string, segmentIndex: number, type: string) => void;\n  onToggleLock: (segmentationId: string, segmentIndex: number) => void;\n  onSelect: (segmentationId: string, segmentIndex: number) => void;\n  onRename: (segmentationId: string, segmentIndex: number) => void;\n  onDelete: (segmentationId: string, segmentIndex: number) => void;\n};\n\nexport function SegmentGroup({\n  title,\n  segments,\n  segmentationId,\n  disableEditing,\n  representationType,\n  onEditInfo,\n  onSegmentColorClick,\n  onToggleVisibility,\n  onToggleLock,\n  onSelect,\n  onRename,\n  onDelete,\n  className,\n}: SegmentGroupProps) {\n  return (\n    <div className={cn('mb-4', className)}>\n      <h3 className=\"text-primary-light p-2 text-lg font-semibold\">{title}:</h3>\n      {segments &&\n        segments.length >= 0 &&\n        segments.map(({ segment, segmentFromSegmentation }) => {\n          const { segmentIndex, color, visible } = segment;\n          const { locked, active, label, displayText, cachedStats } = segmentFromSegmentation;\n\n          return (\n            <SegmentRow\n              key={segmentIndex}\n              segmentationId={segmentationId}\n              segmentIndex={segmentIndex}\n              label={label}\n              displayText={displayText}\n              color={color}\n              visible={visible}\n              locked={locked}\n              active={active}\n              disableEditing={disableEditing}\n              cachedStats={cachedStats}\n              representationType={representationType}\n              onEditInfo={onEditInfo}\n              onSegmentColorClick={onSegmentColorClick}\n              onToggleVisibility={onToggleVisibility}\n              onToggleLock={onToggleLock}\n              onSelect={onSelect}\n              onRename={onRename}\n              onDelete={onDelete}\n            />\n          );\n        })}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { ScrollArea } from '@ohif/ui-next';\nimport { useSegmentationTableContext } from '@ohif/ui-next';\nimport { EditLesionDialog } from './EditLesionDialog';\nimport { SegmentGroup } from './SegmentGroup';\nimport { useSegmentGroups } from '../hooks/useSegmentGroups';\nimport { cn } from '@ohif/ui-next/lib/utils';\n\ntype CustomSegmentationSegmentsProps = {\n  segmentation?: any;\n  representation?: any;\n};\n\nexport function CustomSegmentationSegments({\n  segmentation: initialSegmentation,\n  representation: initialRepresentation,\n}: CustomSegmentationSegmentsProps) {\n  const {\n    activeSegmentationId,\n    disableEditing,\n    onSegmentColorClick,\n    onToggleSegmentVisibility,\n    onToggleSegmentLock,\n    onSegmentClick,\n    mode,\n    onSegmentEdit,\n    onSegmentDelete,\n    data,\n  } = useSegmentationTableContext('SegmentationTable.Segments');\n\n  let segmentationToUse = initialSegmentation;\n  let representationToUse = initialRepresentation;\n  let segmentationIdToUse = activeSegmentationId;\n\n  if (!segmentationToUse || !representationToUse) {\n    const entry = data.find(seg => seg.segmentation.segmentationId === activeSegmentationId);\n    segmentationToUse = entry?.segmentation;\n    representationToUse = entry?.representation;\n    segmentationIdToUse = entry?.segmentation.segmentationId;\n  }\n\n  if (!representationToUse || !segmentationToUse) {\n    return null;\n  }\n\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [selectedSegmentIndex, setSelectedSegmentIndex] = useState<number | null>(null);\n\n  const handleEditInfo = (segmentationId: string, segmentIndex: number) => {\n    setSelectedSegmentIndex(segmentIndex);\n    setEditDialogOpen(true);\n  };\n\n  const segmentCount = Object.keys(representationToUse.segments || {}).length;\n  // const height = mode === 'collapsed' ? 'h-[600px]' : `h-[${segmentCount * 200}px]`;\n  const height = mode === 'collapsed' ? 'h-[600px]' : `h-[560px]`;\n\n  const groupedSegments = useSegmentGroups(\n    representationToUse.segments || {},\n    segmentationToUse.segments || {}\n  );\n\n  function handleSaveChanges(event: React.MouseEvent<HTMLButtonElement>) {\n    console.log('save changes');\n  }\n\n  return (\n    <>\n      <ScrollArea\n        className={cn(`ohif-scrollbar invisible-scrollbar bg-bkg-low space-y-px ${height}`)}\n        showArrows={true}\n      >\n        <SegmentGroup\n          title=\"Target Lesions\"\n          segments={groupedSegments['Target'] || []}\n          segmentationId={segmentationIdToUse}\n          disableEditing={disableEditing}\n          representationType={representationToUse.type}\n          onEditInfo={handleEditInfo}\n          onSegmentColorClick={onSegmentColorClick}\n          onToggleVisibility={onToggleSegmentVisibility}\n          onToggleLock={onToggleSegmentLock}\n          onSelect={onSegmentClick}\n          onRename={onSegmentEdit}\n          onDelete={onSegmentDelete}\n        />\n        <SegmentGroup\n          title=\"Non-Target Lesions\"\n          segments={groupedSegments['Non-Target'] || []}\n          segmentationId={segmentationIdToUse}\n          disableEditing={disableEditing}\n          representationType={representationToUse.type}\n          onEditInfo={handleEditInfo}\n          onSegmentColorClick={onSegmentColorClick}\n          onToggleVisibility={onToggleSegmentVisibility}\n          onToggleLock={onToggleSegmentLock}\n          onSelect={onSegmentClick}\n          onRename={onSegmentEdit}\n          onDelete={onSegmentDelete}\n        />\n        <SegmentGroup\n          title=\"New Lesions\"\n          segments={groupedSegments['New Lesion'] || []}\n          segmentationId={segmentationIdToUse}\n          disableEditing={disableEditing}\n          representationType={representationToUse.type}\n          onEditInfo={handleEditInfo}\n          onSegmentColorClick={onSegmentColorClick}\n          onToggleVisibility={onToggleSegmentVisibility}\n          onToggleLock={onToggleSegmentLock}\n          onSelect={onSegmentClick}\n          onRename={onSegmentEdit}\n          onDelete={onSegmentDelete}\n          className=\"mb-2\"\n        />\n      </ScrollArea>\n\n      {selectedSegmentIndex !== null && (\n        <EditLesionDialog\n          open={editDialogOpen}\n          onOpenChange={setEditDialogOpen}\n          segmentIndex={selectedSegmentIndex}\n        />\n      )}\n    </>\n  );\n}\n","import { useMemo } from 'react';\n\ntype Segment = {\n  segmentIndex: number;\n  color: [number, number, number];\n  visible: boolean;\n  classification?: string;\n};\n\ntype SegmentFromSegmentation = {\n  locked: boolean;\n  active: boolean;\n  label: string;\n  displayText: string;\n  cachedStats: any;\n  classification?: string;\n};\n\nexport function useSegmentGroups(\n  segments: Record<string, Segment>,\n  segmentations: Record<string, SegmentFromSegmentation>\n) {\n  return useMemo(() => {\n    return Object.values(segments).reduce(\n      (acc, segment) => {\n        if (!segment) return acc;\n\n        const segmentFromSegmentation = segmentations[segment.segmentIndex];\n        if (!segmentFromSegmentation) return acc;\n\n        // Default to 'Non-Target' if classification is not set\n        const classification = segmentFromSegmentation.classification || 'Target';\n\n        if (!acc[classification]) {\n          acc[classification] = [];\n        }\n\n        acc[classification].push({ segment, segmentFromSegmentation });\n        return acc;\n      },\n      {} as Record<\n        string,\n        Array<{ segment: Segment; segmentFromSegmentation: SegmentFromSegmentation }>\n      >\n    );\n  }, [segments, segmentations]);\n}\n","import React, { useEffect } from 'react';\nimport { Button, SegmentationTable } from '@ohif/ui-next';\nimport { useActiveViewportSegmentationRepresentations } from '@ohif/extension-cornerstone';\nimport { getRenderingEngine, getEnabledElement } from '@cornerstonejs/core';\nimport { CustomSegmentationSegments } from './CustomSegmentationSegments';\nimport { useSegmentHandlers } from '../hooks/useSegmentHandlers';\nimport { metaData } from '@cornerstonejs/core';\nimport { Types } from '@ohif/core';\n\ntype CustomPanelSegmentationProps = {\n  servicesManager: Types.Extensions.ExtensionParams['servicesManager'];\n  commandsManager: Types.Extensions.ExtensionParams['commandsManager'];\n  children?: React.ReactNode;\n};\n\nexport function CustomPanelSegmentation({\n  servicesManager,\n  commandsManager,\n  children,\n}: CustomPanelSegmentationProps) {\n  const { viewportGridService, customizationService, displaySetService } = servicesManager.services;\n\n  const { segmentationsWithRepresentations, disabled } =\n    useActiveViewportSegmentationRepresentations({\n      servicesManager,\n    });\n\n  const handlers = useSegmentHandlers({ servicesManager, commandsManager });\n\n  const { mode: SegmentationTableMode } = customizationService.getCustomization(\n    'PanelSegmentation.tableMode',\n    {\n      id: 'default.segmentationTable.mode',\n      mode: 'collapsed',\n    }\n  );\n\n  // custom onSegmentationAdd if provided\n  const { onSegmentationAdd } = customizationService.getCustomization(\n    'PanelSegmentation.onSegmentationAdd',\n    {\n      id: 'segmentation.onSegmentationAdd',\n      onSegmentationAdd: handlers.onSegmentationAdd,\n    }\n  );\n\n  const { disableEditing } = customizationService.getCustomization(\n    'PanelSegmentation.disableEditing',\n    {\n      id: 'default.disableEditing',\n      disableEditing: false,\n    }\n  );\n\n  const { showAddSegment } = customizationService.getCustomization(\n    'PanelSegmentation.showAddSegment',\n    {\n      id: 'default.showAddSegment',\n      showAddSegment: true,\n    }\n  );\n\n  const exportOptions = segmentationsWithRepresentations.map(({ segmentation }) => {\n    const { representationData, segmentationId } = segmentation;\n    const { Labelmap } = representationData;\n\n    if (!Labelmap) {\n      return {\n        segmentationId,\n        isExportable: true,\n      };\n    }\n\n    const referencedImageIds = Labelmap.referencedImageIds;\n    const firstImageId = referencedImageIds[0];\n\n    const instance = metaData.get('instance', firstImageId);\n    const { SOPInstanceUID, SeriesInstanceUID } = instance;\n\n    const displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n      SOPInstanceUID,\n      SeriesInstanceUID\n    );\n\n    return {\n      segmentationId,\n      isExportable: displaySet?.isReconstructable ?? false,\n    };\n  });\n\n  useEffect(() => {\n    const handleViewportChange = async (event: { viewportId: string }) => {\n      const { viewportId } = event;\n      if (!viewportId) return;\n\n      try {\n        const renderingEngine = getRenderingEngine('cornerstone');\n        const enabledElement = getEnabledElement(viewportId);\n\n        if (!renderingEngine || !enabledElement) {\n          // Clean up old viewport if it exists\n          if (renderingEngine) {\n            renderingEngine.disableElement(viewportId);\n          }\n\n          // Initialize new viewport\n          await commandsManager.run('initializeViewport', { viewportId });\n\n          // Enable the new viewport\n          const newRenderingEngine = getRenderingEngine('cornerstone');\n          if (newRenderingEngine) {\n            newRenderingEngine.enableElement(viewportId);\n          }\n        }\n      } catch (error) {\n        console.warn('Error handling viewport change:', error);\n      }\n    };\n\n    // Subscribe to viewport changes\n    const unsubscribe = viewportGridService.subscribe(\n      viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED,\n      handleViewportChange\n    );\n\n    // Initialize current viewport\n    const currentViewportId = viewportGridService.getState().activeViewportId;\n    if (currentViewportId) {\n      handleViewportChange({ viewportId: currentViewportId });\n    }\n\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportGridService, commandsManager]);\n\n  const handleSaveChanges = () => {\n    console.log('save changes');\n  };\n\n  return (\n    <SegmentationTable\n      disabled={disabled}\n      data={segmentationsWithRepresentations}\n      mode={SegmentationTableMode}\n      title=\"Segmentations\"\n      exportOptions={exportOptions}\n      disableEditing={disableEditing}\n      onSegmentationAdd={onSegmentationAdd}\n      onSegmentationClick={handlers.onSegmentationClick}\n      onSegmentationDelete={handlers.onSegmentationDelete}\n      showAddSegment={showAddSegment}\n      onSegmentAdd={handlers.onSegmentAdd}\n      onSegmentClick={handlers.onSegmentClick}\n      onSegmentEdit={handlers.onSegmentEdit}\n      onSegmentationEdit={handlers.onSegmentationEdit}\n      onSegmentColorClick={handlers.onSegmentColorClick}\n      onSegmentDelete={handlers.onSegmentDelete}\n      onToggleSegmentVisibility={handlers.onToggleSegmentVisibility}\n      onToggleSegmentLock={handlers.onToggleSegmentLock}\n      onToggleSegmentationRepresentationVisibility={\n        handlers.onToggleSegmentationRepresentationVisibility\n      }\n      onSegmentationDownload={handlers.onSegmentationDownload}\n      storeSegmentation={handlers.storeSegmentation}\n      onSegmentationDownloadRTSS={handlers.onSegmentationDownloadRTSS}\n      setStyle={handlers.setStyle}\n      toggleRenderInactiveSegmentations={handlers.toggleRenderInactiveSegmentations}\n      onSegmentationRemoveFromViewport={handlers.onSegmentationRemoveFromViewport}\n      setFillAlpha={handlers.setFillAlpha}\n      setOutlineWidth={handlers.setOutlineWidth}\n      setRenderFill={handlers.setRenderFill}\n      setRenderOutline={handlers.setRenderOutline}\n      setFillAlphaInactive={handlers.setFillAlphaInactive}\n      renderInactiveSegmentations={handlers.getRenderInactiveSegmentations()}\n    >\n      {children}\n      <SegmentationTable.Config />\n      {/* <SegmentationTable.AddSegmentationRow /> */}\n\n      {SegmentationTableMode === 'collapsed' ? (\n        <SegmentationTable.Collapsed>\n          <SegmentationTable.SelectorHeader />\n          <SegmentationTable.AddSegmentRow />\n          {/* <SegmentationTable.Segments /> */}\n          <CustomSegmentationSegments />\n        </SegmentationTable.Collapsed>\n      ) : (\n        <SegmentationTable.Expanded>\n          <SegmentationTable.Header />\n          <SegmentationTable.AddSegmentRow />\n          {/* <SegmentationTable.Segments /> */}\n          <CustomSegmentationSegments />\n        </SegmentationTable.Expanded>\n      )}\n      {segmentationsWithRepresentations.length > 0 && (\n        <div className=\"flex flex-col gap-2 p-2\">\n          <div className=\"bg-secondary-dark text-secondary-foreground grid grid-cols-2 gap-2 p-2\">\n            <span>Total volume:</span>\n            <span className=\"text-right font-bold\">\n              0 mm<sup>3</sup>\n            </span>\n            <span>Total diameter:</span>\n            <span className=\"text-right font-bold\">0 mm</span>\n          </div>\n\n          <Button\n            onClick={handleSaveChanges}\n            className=\"w-full\"\n            variant=\"default\"\n            size=\"lg\"\n            disabled\n          >\n            Save Changes\n          </Button>\n        </div>\n      )}\n    </SegmentationTable>\n  );\n}\n","import { Types } from '@ohif/core';\n\nexport function useSegmentHandlers({ servicesManager, commandsManager }: withAppTypes) {\n  const { viewportGridService } = servicesManager.services;\n\n  const handlers = {\n    onSegmentationAdd: async () => {\n      const viewportId = viewportGridService.getState().activeViewportId;\n      commandsManager.run('createLabelmapForViewport', { viewportId });\n    },\n\n    onSegmentationClick: (segmentationId: string) => {\n      commandsManager.run('setActiveSegmentation', { segmentationId });\n    },\n\n    onSegmentAdd: segmentationId => {\n      commandsManager.run('addSegment', { segmentationId });\n    },\n\n    onSegmentClick: (segmentationId, segmentIndex) => {\n      commandsManager.run('setActiveSegmentAndCenter', { segmentationId, segmentIndex });\n    },\n\n    onSegmentEdit: (segmentationId, segmentIndex) => {\n      commandsManager.run('editSegmentLabel', { segmentationId, segmentIndex });\n    },\n\n    onSegmentationEdit: segmentationId => {\n      commandsManager.run('editSegmentationLabel', { segmentationId });\n    },\n\n    onSegmentColorClick: (segmentationId, segmentIndex) => {\n      commandsManager.run('editSegmentColor', { segmentationId, segmentIndex });\n    },\n\n    onSegmentDelete: (segmentationId, segmentIndex) => {\n      commandsManager.run('deleteSegment', { segmentationId, segmentIndex });\n    },\n\n    onToggleSegmentVisibility: (segmentationId, segmentIndex, type) => {\n      console.log('segmentationId', segmentationId);\n      console.log('segmentIndex', segmentIndex);\n      console.log('type', type);\n      commandsManager.run('toggleSegmentVisibility', { segmentationId, segmentIndex, type });\n    },\n\n    onToggleSegmentLock: (segmentationId, segmentIndex) => {\n      commandsManager.run('toggleSegmentLock', { segmentationId, segmentIndex });\n    },\n\n    onToggleSegmentationRepresentationVisibility: segmentationId => {\n      commandsManager.run('toggleSegmentationVisibility', { segmentationId });\n    },\n\n    onSegmentationDownload: segmentationId => {\n      commandsManager.run('downloadSegmentation', { segmentationId });\n    },\n\n    storeSegmentation: async segmentationId => {\n      commandsManager.run('storeSegmentation', { segmentationId });\n    },\n\n    onSegmentationDownloadRTSS: segmentationId => {\n      commandsManager.run('downloadRTSS', { segmentationId });\n    },\n\n    setStyle: (segmentationId, type, key, value) => {\n      commandsManager.run('setSegmentationStyle', { segmentationId, type, key, value });\n    },\n\n    toggleRenderInactiveSegmentations: () => {\n      commandsManager.run('toggleRenderInactiveSegmentations');\n    },\n\n    onSegmentationRemoveFromViewport: segmentationId => {\n      commandsManager.run('removeSegmentationFromViewport', { segmentationId });\n    },\n\n    onSegmentationDelete: segmentationId => {\n      commandsManager.run('deleteSegmentation', { segmentationId });\n    },\n\n    setFillAlpha: ({ type }, value) => {\n      commandsManager.run('setFillAlpha', { type, value });\n    },\n\n    setOutlineWidth: ({ type }, value) => {\n      commandsManager.run('setOutlineWidth', { type, value });\n    },\n\n    setRenderFill: ({ type }, value) => {\n      commandsManager.run('setRenderFill', { type, value });\n    },\n\n    setRenderOutline: ({ type }, value) => {\n      commandsManager.run('setRenderOutline', { type, value });\n    },\n\n    setFillAlphaInactive: ({ type }, value) => {\n      commandsManager.run('setFillAlphaInactive', { type, value });\n    },\n\n    getRenderInactiveSegmentations: () => {\n      return commandsManager.run('getRenderInactiveSegmentations');\n    },\n\n    setRenderInactiveSegmentations: (segmentationId, value) => {\n      commandsManager.run('setRenderInactiveSegmentations', { segmentationId, value });\n    },\n  };\n\n  return handlers;\n}\n","import React from 'react';\nimport { Toolbox } from '@ohif/ui-next';\nimport { CustomPanelSegmentation } from './Panels/Segmentation/components/CustomPanelSegmentation';\n\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }) {\n  const WrappedSegmentationPanel = () => {\n    return (\n      <div>\n        <Toolbox\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          buttonSectionId=\"segmentationToolbox\"\n          title=\"Segmentation Tools\"\n        />\n        <CustomPanelSegmentation\n          servicesManager={servicesManager}\n          commandsManager={commandsManager}\n        />\n      </div>\n    );\n  };\n\n  return [\n    {\n      name: 'segmentation',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: WrappedSegmentationPanel,\n    },\n  ];\n}\n\nexport default getPanelModule;\n","import { Segment, Segmentation } from '@cornerstonejs/tools/types';\nimport { eventTarget, Enums, triggerEvent } from '@cornerstonejs/core';\nimport * as cs from '@cornerstonejs/core';\nimport * as csTools from '@cornerstonejs/tools';\n\nexport interface SegmentStats {\n  diameter: number;\n  volume: number;\n  affectedOrgan: string;\n}\n\n// function getVolumesFromSegmentation(segmentationId) {\n//   segmentationService.getLabelmapVolume(segmentationId)\n\n//   return { labelmapVolume, referencedVolume };\n// }\n\n// function getLabelmapVolumeFromSegmentation(segmentation) {\n//   const { representationData } = segmentation;\n//   const { volumeId } = representationData[\n//     csTools.Enums.SegmentationRepresentations.Labelmap\n//   ] as csTools.Types.LabelmapToolOperationDataVolume;\n\n//   return cs.cache.getVolume(volumeId);\n// }\n\nexport const updateSegmentationInfo = async ({\n  segmentationId,\n  commandsManager,\n  segmentationService,\n}: withAppTypes<{\n  segmentationId: string;\n}>) => {\n  const segmentation = segmentationService.getSegmentation(segmentationId);\n  if (!segmentation) return;\n\n  triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n    progress: 0,\n    type: 'Calculate Segment Stats',\n    id: segmentationId,\n  });\n\n  // Get the labelmap volume for calculations\n  const labelmapVolume = segmentationService.getLabelmapVolume(segmentationId);\n  const { imageData, spacing } = labelmapVolume;\n  const scalarData = imageData.getPointData().getScalars().getData();\n\n  // Update each segment with additional info\n  for (const [segmentIndex, segment] of Object.entries(segmentation.segments)) {\n    if (!segment) continue;\n\n    const numericSegmentIndex = Number(segmentIndex);\n    let voxelCount = 0;\n    let maxDiameter = 0;\n\n    // Calculate volume by counting voxels\n    for (let i = 0; i < scalarData.length; i++) {\n      if (scalarData[i] === numericSegmentIndex) {\n        voxelCount++;\n      }\n    }\n\n    // Calculate volume in mL (cubic millimeters to milliliters)\n    const volumeInMl = voxelCount * spacing[0] * spacing[1] * spacing[2] * 1e-3;\n\n    // Calculate approximate diameter (assuming roughly spherical shape)\n    // Volume = (4/3)πr³, solve for diameter = 2r\n    const radius = Math.pow((3 * volumeInMl) / (4 * Math.PI), 1 / 3);\n    const diameterInMm = 2 * radius * 10; // Convert to mm\n\n    const additionalStats = {\n      diameter: parseFloat(diameterInMm.toFixed(1)), // mm\n      volume: parseFloat(volumeInMl.toFixed(1)), // mL\n      affectedOrgan: 'Unknown',\n    };\n\n    // Update the segment's cached stats\n    const updatedSegment: Segment = {\n      ...segment,\n      cachedStats: {\n        ...segment.cachedStats,\n        ...additionalStats,\n      },\n    };\n\n    segmentation.segments[segmentIndex] = updatedSegment;\n  }\n\n  // Update the segmentation object\n  const updatedSegmentation: Segmentation = {\n    ...segmentation,\n    segments: {\n      ...segmentation.segments,\n    },\n  };\n\n  triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n    progress: 100,\n    type: 'Calculate Segment Stats',\n    id: segmentationId,\n  });\n\n  // Update the segmentation in the service\n  segmentationService.addOrUpdateSegmentation(updatedSegmentation);\n};\n","import { Types } from '@ohif/core';\nimport DicomTagBrowser from '@ohif/extension-default/src/DicomTagBrowser/DicomTagBrowser';\nimport { updateSegmentationInfo } from './utils/updateSegmentationInfo';\n\nconst commandsModule = ({\n  servicesManager,\n  commandsManager,\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\n  const { viewportGridService, displaySetService, segmentationService } = servicesManager.services;\n\n  const actions = {\n    // You can add specific actions here if needed\n    openDICOMTagViewer({ displaySetInstanceUID }: { displaySetInstanceUID?: string }) {\n      const { activeViewportId, viewports } = viewportGridService.getState();\n      const activeViewportSpecificData = viewports.get(activeViewportId);\n      const { displaySetInstanceUIDs } = activeViewportSpecificData;\n\n      const displaySets = displaySetService.activeDisplaySets;\n      const { UIModalService } = servicesManager.services;\n\n      const defaultDisplaySetInstanceUID = displaySetInstanceUID || displaySetInstanceUIDs[0];\n      UIModalService.show({\n        content: DicomTagBrowser,\n        contentProps: {\n          displaySets,\n          displaySetInstanceUID: defaultDisplaySetInstanceUID,\n          onClose: UIModalService.hide,\n        },\n        containerDimensions: 'w-[70%] max-w-[900px]',\n        title: 'DICOM Tag Browser',\n      });\n    },\n\n    updateSegmentationInfo({ segmentationId }: { segmentationId: string }) {\n      return updateSegmentationInfo({\n        segmentationId,\n        commandsManager,\n        segmentationService,\n        servicesManager,\n      });\n    },\n  };\n\n  const definitions = {\n    // You can add command definitions here if needed\n    openDICOMTagViewer: {\n      commandFn: actions.openDICOMTagViewer,\n    },\n    updateSegmentationInfo: {\n      commandFn: actions.updateSegmentationInfo,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'VIEWER',\n  };\n};\n\nexport default commandsModule;\n","import React from 'react';\nimport { id } from './id';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getPanelModule from './getPanelModule';\nimport commandsModule from './commandsModule';\nimport getCommandsModule from './commandsModule';\nimport { Types } from '@ohif/core';\n// import getCommandsModule from '@ohif/extension-default/src/commandsModule';\n\nconst tchaiExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n\n  preRegistration({ servicesManager, commandsManager, extensionManager, configuration = {} }) {},\n\n  getPanelModule,\n  getHangingProtocolModule,\n  getCommandsModule,\n  // getCommandsModule({\n  //   servicesManager,\n  //   commandsManager,\n  //   extensionManager,\n  //   hotkeysManager,\n  //   configuration,\n  //   appConfig,\n  //   serviceProvidersManager,\n  //   peerImport,\n  // }) {\n  //   return commandsModule({\n  //     servicesManager,\n  //     commandsManager,\n  //     extensionManager,\n  //     hotkeysManager,\n  //     serviceProvidersManager,\n  //     appConfig,\n  //     configuration,\n  //     peerImport,\n  //   });\n  // },\n};\n\nexport default tchaiExtension;\n"],"names":["id","packageJson","defaultProtocol","name","locked","hasUpdatedPriorsInformation","protocolMatchingRules","toolGroupIds","displaySetSelectors","ctDisplaySet","seriesMatchingRules","weight","attribute","constraint","equals","segDisplaySet","stages","viewportStructure","layoutType","properties","rows","columns","viewports","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","syncGroups","type","source","target","displaySets","matchedDisplaySetsIndex","options","visibility","renderOutline","numberOfPriorsReferenced","protocol","nodeTypes","lesion","CustomNode","data","nodeData","isHovered","setIsHovered","useState","bgColor","isCurrent","isSelected","textColor","borderColor","React","NodeToolbar","isVisible","position","Position","Bottom","offset","className","style","zIndex","overflow","label","volume","max_diameter","background","onMouseEnter","onMouseLeave","Handle","Top","LesionFlowGraph","currentControl","selectedLesionId","onLesionSelect","lesionInfo","getNodesAndEdges","useCallback","nodes","edges","studies","studySegments","map","study","created_at","updated_at","axial_diameter","coronal_diameter","sagittal_diameter","Math","max","forEach","lesionIndex","xOffset","i","push","x","y","stroke","height","ReactFlow","onNodeClick","handleNodeClick","event","node","lesionId","defaultEdgeOptions","animated","fitView","fitViewOptions","padding","proOptions","hideAttribution","colorMode","Background","Controls","DEFAULT_STUDY_SEGMENTS","is_target_lession","classification","lesion_segments","EditLesionDialog","open","onOpenChange","segmentIndex","initialData","onSave","formData","setFormData","organ","setSelectedLesionId","Dialog","DialogContent","TooltipProvider","DialogHeader","DialogTitle","DialogDescription","Label","Select","value","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","Input","onChange","e","prev","SelectGroup","studySegment","index","key","DialogFooter","Button","onClick","variant","size","handleConfirm","SegmentStats","stats","showChangeValues","Object","entries","unit","diameter","affected_organs","change","SegmentRow","segmentationId","displayText","color","visible","active","disableEditing","cachedStats","representationType","onEditInfo","onSegmentColorClick","onToggleVisibility","onToggleLock","onSelect","onRename","onDelete","cssColor","DataRow","number","title","description","details","primary","secondary","colorHex","isLocked","onColor","onToggleLocked","SegmentGroup","segments","cn","length","segment","segmentFromSegmentation","CustomSegmentationSegments","segmentation","initialSegmentation","representation","initialRepresentation","activeSegmentationId","onToggleSegmentVisibility","onToggleSegmentLock","onSegmentClick","mode","onSegmentEdit","onSegmentDelete","useSegmentationTableContext","segmentationToUse","representationToUse","segmentationIdToUse","entry","find","seg","editDialogOpen","setEditDialogOpen","selectedSegmentIndex","setSelectedSegmentIndex","handleEditInfo","keys","groupedSegments","segmentations","useMemo","values","reduce","acc","ScrollArea","showArrows","CustomPanelSegmentation","servicesManager","commandsManager","children","viewportGridService","customizationService","displaySetService","services","segmentationsWithRepresentations","disabled","useActiveViewportSegmentationRepresentations","handlers","onSegmentationAdd","async","viewportId","getState","activeViewportId","run","onSegmentationClick","onSegmentAdd","onSegmentationEdit","console","log","onToggleSegmentationRepresentationVisibility","onSegmentationDownload","storeSegmentation","onSegmentationDownloadRTSS","setStyle","toggleRenderInactiveSegmentations","onSegmentationRemoveFromViewport","onSegmentationDelete","setFillAlpha","setOutlineWidth","setRenderFill","setRenderOutline","setFillAlphaInactive","getRenderInactiveSegmentations","setRenderInactiveSegmentations","useSegmentHandlers","SegmentationTableMode","getCustomization","showAddSegment","exportOptions","representationData","Labelmap","isExportable","firstImageId","referencedImageIds","instance","metaData","SOPInstanceUID","SeriesInstanceUID","displaySet","getDisplaySetForSOPInstanceUID","isReconstructable","useEffect","handleViewportChange","renderingEngine","getRenderingEngine","enabledElement","getEnabledElement","disableElement","newRenderingEngine","enableElement","error","warn","unsubscribe","subscribe","EVENTS","ACTIVE_VIEWPORT_ID_CHANGED","currentViewportId","SegmentationTable","renderInactiveSegmentations","Config","Collapsed","SelectorHeader","AddSegmentRow","Expanded","Header","handleSaveChanges","extensionManager","iconName","iconLabel","component","WrappedSegmentationPanel","Toolbox","buttonSectionId","commandsModule","segmentationService","actions","openDICOMTagViewer","displaySetInstanceUID","activeViewportSpecificData","get","displaySetInstanceUIDs","activeDisplaySets","UIModalService","defaultDisplaySetInstanceUID","show","content","DicomTagBrowser","contentProps","onClose","hide","containerDimensions","updateSegmentationInfo","getSegmentation","triggerEvent","eventTarget","Enums","WEB_WORKER_PROGRESS","progress","labelmapVolume","getLabelmapVolume","imageData","spacing","scalarData","getPointData","getScalars","getData","numericSegmentIndex","Number","voxelCount","volumeInMl","radius","pow","PI","additionalStats","parseFloat","toFixed","affectedOrgan","updatedSegment","updatedSegmentation","addOrUpdateSegmentation","definitions","commandFn","defaultContext","preRegistration","configuration","getPanelModule","getHangingProtocolModule","getCommandsModule"],"sourceRoot":""}