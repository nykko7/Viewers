{"version":3,"file":"5247.bundle.53ae003b9972cc6797ea.js","mappings":"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","sources":["webpack:///../../../extensions/dicom-microscopy/src/id.js","webpack:///../../../extensions/dicom-microscopy/src/utils/coordinateFormatScoord3d2Geometry.js","webpack:///../../../extensions/dicom-microscopy/src/utils/styles.js","webpack:///../../../extensions/dicom-microscopy/src/tools/viewerManager.js","webpack:///../../../extensions/dicom-microscopy/src/utils/RoiAnnotation.js","webpack:///../../../extensions/dicom-microscopy/src/utils/areaOfPolygon.js","webpack:///../../../extensions/dicom-microscopy/src/services/MicroscopyService.ts","webpack:///../../../extensions/dicom-microscopy/src/components/MicroscopyPanel/MicroscopyPanel.tsx","webpack:///../../../extensions/dicom-microscopy/src/utils/dcmCodeValues.js","webpack:///../../../extensions/dicom-microscopy/src/utils/toArray.js","webpack:///../../../extensions/dicom-microscopy/src/utils/loadSR.ts","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopySRSopClassHandler.js","webpack:///../../../extensions/dicom-microscopy/src/utils/getSourceDisplaySet.js","webpack:///../../../extensions/dicom-microscopy/src/index.tsx","webpack:///../../../extensions/dicom-microscopy/src/getPanelModule.tsx","webpack:///../../../extensions/dicom-microscopy/src/getCommandsModule.ts"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { inv, multiply } from 'mathjs';\n\n// TODO -> This is pulled out of some internal logic from Dicom Microscopy Viewer,\n// We should likely just expose this there.\n\nexport default function coordinateFormatScoord3d2Geometry(coordinates, pyramid) {\n  let transform = false;\n  if (!Array.isArray(coordinates[0])) {\n    coordinates = [coordinates];\n    transform = true;\n  }\n  const metadata = pyramid[pyramid.length - 1];\n  const orientation = metadata.ImageOrientationSlide;\n  const spacing = _getPixelSpacing(metadata);\n  const origin = metadata.TotalPixelMatrixOriginSequence[0];\n  const offset = [\n    Number(origin.XOffsetInSlideCoordinateSystem),\n    Number(origin.YOffsetInSlideCoordinateSystem),\n  ];\n\n  coordinates = coordinates.map(c => {\n    const slideCoord = [c[0], c[1]];\n    const pixelCoord = mapSlideCoord2PixelCoord({\n      offset,\n      orientation,\n      spacing,\n      point: slideCoord,\n    });\n    return [pixelCoord[0], -(pixelCoord[1] + 1), 0];\n  });\n  if (transform) {\n    return coordinates[0];\n  }\n  return coordinates;\n}\n\nfunction _getPixelSpacing(metadata) {\n  if (metadata.PixelSpacing) {\n    return metadata.PixelSpacing;\n  }\n  const functionalGroup = metadata.SharedFunctionalGroupsSequence[0];\n  const pixelMeasures = functionalGroup.PixelMeasuresSequence[0];\n  return pixelMeasures.PixelSpacing;\n}\n\nfunction mapSlideCoord2PixelCoord(options) {\n  // X and Y Offset in Slide Coordinate System\n  if (!('offset' in options)) {\n    throw new Error('Option \"offset\" is required.');\n  }\n  if (!Array.isArray(options.offset)) {\n    throw new Error('Option \"offset\" must be an array.');\n  }\n  if (options.offset.length !== 2) {\n    throw new Error('Option \"offset\" must be an array with 2 elements.');\n  }\n  const offset = options.offset;\n\n  // Image Orientation Slide with direction cosines for Row and Column direction\n  if (!('orientation' in options)) {\n    throw new Error('Option \"orientation\" is required.');\n  }\n  if (!Array.isArray(options.orientation)) {\n    throw new Error('Option \"orientation\" must be an array.');\n  }\n  if (options.orientation.length !== 6) {\n    throw new Error('Option \"orientation\" must be an array with 6 elements.');\n  }\n  const orientation = options.orientation;\n\n  // Pixel Spacing along the Row and Column direction\n  if (!('spacing' in options)) {\n    throw new Error('Option \"spacing\" is required.');\n  }\n  if (!Array.isArray(options.spacing)) {\n    throw new Error('Option \"spacing\" must be an array.');\n  }\n  if (options.spacing.length !== 2) {\n    throw new Error('Option \"spacing\" must be an array with 2 elements.');\n  }\n  const spacing = options.spacing;\n\n  // X and Y coordinate in the Slide Coordinate System\n  if (!('point' in options)) {\n    throw new Error('Option \"point\" is required.');\n  }\n  if (!Array.isArray(options.point)) {\n    throw new Error('Option \"point\" must be an array.');\n  }\n  if (options.point.length !== 2) {\n    throw new Error('Option \"point\" must be an array with 2 elements.');\n  }\n  const point = options.point;\n\n  const m = [\n    [orientation[0] * spacing[1], orientation[3] * spacing[0], offset[0]],\n    [orientation[1] * spacing[1], orientation[4] * spacing[0], offset[1]],\n    [0, 0, 1],\n  ];\n  const mInverted = inv(m);\n\n  const vSlide = [[point[0]], [point[1]], [1]];\n\n  const vImage = multiply(mInverted, vSlide);\n\n  const row = Number(vImage[1][0].toFixed(4));\n  const col = Number(vImage[0][0].toFixed(4));\n  return [col, row];\n}\n","const defaultFill = {\n  color: 'rgba(255,255,255,0.4)',\n};\n\nconst emptyFill = {\n  color: 'rgba(255,255,255,0.0)',\n};\n\nconst defaultStroke = {\n  color: 'rgb(0,255,0)',\n  width: 1.5,\n};\n\nconst activeStroke = {\n  color: 'rgb(255,255,0)',\n  width: 1.5,\n};\n\nconst defaultStyle = {\n  image: {\n    circle: {\n      fill: defaultFill,\n      stroke: activeStroke,\n      radius: 5,\n    },\n  },\n  fill: defaultFill,\n  stroke: activeStroke,\n};\n\nconst emptyStyle = {\n  image: {\n    circle: {\n      fill: emptyFill,\n      stroke: defaultStroke,\n      radius: 5,\n    },\n  },\n  fill: emptyFill,\n  stroke: defaultStroke,\n};\n\nconst styles = {\n  active: defaultStyle,\n  default: emptyStyle,\n};\n\nexport default styles;\n","import coordinateFormatScoord3d2Geometry from '../utils/coordinateFormatScoord3d2Geometry';\nimport styles from '../utils/styles';\n\nimport { PubSubService } from '@ohif/core';\n\n// Events from the third-party viewer\nconst ApiEvents = {\n  /** Triggered when a ROI was added. */\n  ROI_ADDED: 'dicommicroscopyviewer_roi_added',\n  /** Triggered when a ROI was modified. */\n  ROI_MODIFIED: 'dicommicroscopyviewer_roi_modified',\n  /** Triggered when a ROI was removed. */\n  ROI_REMOVED: 'dicommicroscopyviewer_roi_removed',\n  /** Triggered when a ROI was drawn. */\n  ROI_DRAWN: `dicommicroscopyviewer_roi_drawn`,\n  /** Triggered when a ROI was selected. */\n  ROI_SELECTED: `dicommicroscopyviewer_roi_selected`,\n  /** Triggered when a viewport move has started. */\n  MOVE_STARTED: `dicommicroscopyviewer_move_started`,\n  /** Triggered when a viewport move has ended. */\n  MOVE_ENDED: `dicommicroscopyviewer_move_ended`,\n  /** Triggered when a loading of data has started. */\n  LOADING_STARTED: `dicommicroscopyviewer_loading_started`,\n  /** Triggered when a loading of data has ended. */\n  LOADING_ENDED: `dicommicroscopyviewer_loading_ended`,\n  /** Triggered when an error occurs during loading of data. */\n  LOADING_ERROR: `dicommicroscopyviewer_loading_error`,\n  /* Triggered when the loading of an image tile has started. */\n  FRAME_LOADING_STARTED: `dicommicroscopyviewer_frame_loading_started`,\n  /* Triggered when the loading of an image tile has ended. */\n  FRAME_LOADING_ENDED: `dicommicroscopyviewer_frame_loading_ended`,\n  /* Triggered when the error occurs during loading of an image tile. */\n  FRAME_LOADING_ERROR: `dicommicroscopyviewer_frame_loading_ended`,\n};\n\nconst EVENTS = {\n  ADDED: 'added',\n  MODIFIED: 'modified',\n  REMOVED: 'removed',\n  UPDATED: 'updated',\n  SELECTED: 'selected',\n};\n\n/**\n * ViewerManager encapsulates the complexity of the third-party viewer and\n * expose only the features/behaviors that are relevant to the application\n */\nclass ViewerManager extends PubSubService {\n  constructor(viewer, viewportId, container, studyInstanceUID, seriesInstanceUID) {\n    super(EVENTS);\n    this.viewer = viewer;\n    this.viewportId = viewportId;\n    this.container = container;\n    this.studyInstanceUID = studyInstanceUID;\n    this.seriesInstanceUID = seriesInstanceUID;\n\n    this.onRoiAdded = this.roiAddedHandler.bind(this);\n    this.onRoiModified = this.roiModifiedHandler.bind(this);\n    this.onRoiRemoved = this.roiRemovedHandler.bind(this);\n    this.onRoiSelected = this.roiSelectedHandler.bind(this);\n    this.contextMenuCallback = () => {};\n\n    // init symbols\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\n    this._drawingSource = symbols.find(p => p.description === 'drawingSource');\n    this._pyramid = symbols.find(p => p.description === 'pyramid');\n    this._map = symbols.find(p => p.description === 'map');\n    this._affine = symbols.find(p => p.description === 'affine');\n\n    this.registerEvents();\n    this.activateDefaultInteractions();\n  }\n\n  addContextMenuCallback(callback) {\n    this.contextMenuCallback = callback;\n  }\n\n  /**\n   * Destroys this managed viewer instance, clearing all the event handlers\n   */\n  destroy() {\n    this.unregisterEvents();\n  }\n\n  /**\n   * This is to overrides the _broadcastEvent method of PubSubService and always\n   * send the ROI graphic object and this managed viewer instance.\n   * Due to the way that PubSubService is written, the same name override of the\n   * function doesn't work.\n   *\n   * @param {String} key key Subscription key\n   * @param {Object} roiGraphic ROI graphic object created by the third-party API\n   */\n  publish(key, roiGraphic) {\n    this._broadcastEvent(key, {\n      roiGraphic,\n      managedViewer: this,\n    });\n  }\n\n  /**\n   * Registers all the relevant event handlers for the third-party API\n   */\n  registerEvents() {\n    this.container.addEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\n    this.container.addEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\n    this.container.addEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\n    this.container.addEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\n  }\n\n  /**\n   * Clears all the relevant event handlers for the third-party API\n   */\n  unregisterEvents() {\n    this.container.removeEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\n    this.container.removeEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\n    this.container.removeEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\n    this.container.removeEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\n  }\n\n  /**\n   * Handles the ROI_ADDED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiAddedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.ADDED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_MODIFIED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiModifiedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.MODIFIED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_REMOVED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiRemovedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.REMOVED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_SELECTED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiSelectedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.SELECTED, roiGraphic);\n  }\n\n  /**\n   * Run the given callback operation without triggering any events for this\n   * instance, so subscribers will not be affected\n   *\n   * @param {Function} callback Callback that will run sinlently\n   */\n  runSilently(callback) {\n    this.unregisterEvents();\n    callback();\n    this.registerEvents();\n  }\n\n  /**\n   * Removes all the ROI graphics from the third-party API\n   */\n  clearRoiGraphics() {\n    this.runSilently(() => this.viewer.removeAllROIs());\n  }\n\n  showROIs() {\n    this.viewer.showROIs();\n  }\n\n  hideROIs() {\n    this.viewer.hideROIs();\n  }\n\n  /**\n   * Adds the given ROI graphic into the third-party API\n   *\n   * @param {Object} roiGraphic ROI graphic object to be added\n   */\n  addRoiGraphic(roiGraphic) {\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\n  }\n\n  /**\n   * Adds the given ROI graphic into the third-party API, and also add a label.\n   * Used for importing from SR.\n   *\n   * @param {Object} roiGraphic ROI graphic object to be added.\n   * @param {String} label The label of the annotation.\n   */\n  addRoiGraphicWithLabel(roiGraphic, label) {\n    // NOTE: Dicom Microscopy Viewer will override styles for \"Text\" evaluations\n    // to hide all other geometries, we are not going to use its label.\n    // if (label) {\n    //   if (!roiGraphic.properties) roiGraphic.properties = {};\n    //   roiGraphic.properties.label = label;\n    // }\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\n\n    this._broadcastEvent(EVENTS.ADDED, {\n      roiGraphic,\n      managedViewer: this,\n      label,\n    });\n  }\n\n  /**\n   * Sets ROI style\n   *\n   * @param {String} uid ROI graphic UID to be styled\n   * @param {object} styleOptions - Style options\n   * @param {object} styleOptions.stroke - Style options for the outline of the geometry\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\n   * @param {number} styleOptions.stroke.width - Width of the outline\n   * @param {object} styleOptions.fill - Style options for body the geometry\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\n   * @param {object} styleOptions.image - Style options for image\n   */\n  setROIStyle(uid, styleOptions) {\n    this.viewer.setROIStyle(uid, styleOptions);\n  }\n\n  /**\n   * Removes the ROI graphic with the given UID from the third-party API\n   *\n   * @param {String} uid ROI graphic UID to be removed\n   */\n  removeRoiGraphic(uid) {\n    this.viewer.removeROI(uid);\n  }\n\n  /**\n   * Update properties of regions of interest.\n   *\n   * @param {object} roi - ROI to be updated\n   * @param {string} roi.uid - Unique identifier of the region of interest\n   * @param {object} roi.properties - ROI properties\n   * @returns {void}\n   */\n  updateROIProperties({ uid, properties }) {\n    this.viewer.updateROI({ uid, properties });\n  }\n\n  /**\n   * Toggles overview map\n   *\n   * @returns {void}\n   */\n  toggleOverviewMap() {\n    this.viewer.toggleOverviewMap();\n  }\n\n  /**\n   * Activates the viewer default interactions\n   * @returns {void}\n   */\n  activateDefaultInteractions() {\n    /** Disable browser's native context menu inside the canvas */\n    document.querySelector('.DicomMicroscopyViewer').addEventListener(\n      'contextmenu',\n      event => {\n        event.preventDefault();\n        // comment out when context menu for microscopy is enabled\n        // if (typeof this.contextMenuCallback === 'function') {\n        //   this.contextMenuCallback(event);\n        // }\n      },\n      false\n    );\n    const defaultInteractions = [\n      [\n        'dragPan',\n        {\n          bindings: {\n            mouseButtons: ['middle'],\n          },\n        },\n      ],\n      [\n        'dragZoom',\n        {\n          bindings: {\n            mouseButtons: ['right'],\n          },\n        },\n      ],\n      ['modify', {}],\n    ];\n    this.activateInteractions(defaultInteractions);\n  }\n\n  /**\n   * Activates interactions\n   * @param {Array} interactions Interactions to be activated\n   * @returns {void}\n   */\n  activateInteractions(interactions) {\n    const interactionsMap = {\n      draw: activate => (activate ? 'activateDrawInteraction' : 'deactivateDrawInteraction'),\n      modify: activate => (activate ? 'activateModifyInteraction' : 'deactivateModifyInteraction'),\n      translate: activate =>\n        activate ? 'activateTranslateInteraction' : 'deactivateTranslateInteraction',\n      snap: activate => (activate ? 'activateSnapInteraction' : 'deactivateSnapInteraction'),\n      dragPan: activate =>\n        activate ? 'activateDragPanInteraction' : 'deactivateDragPanInteraction',\n      dragZoom: activate =>\n        activate ? 'activateDragZoomInteraction' : 'deactivateDragZoomInteraction',\n      select: activate => (activate ? 'activateSelectInteraction' : 'deactivateSelectInteraction'),\n    };\n\n    const availableInteractionsName = Object.keys(interactionsMap);\n    availableInteractionsName.forEach(availableInteractionName => {\n      const interaction = interactions.find(\n        interaction => interaction[0] === availableInteractionName\n      );\n      if (!interaction) {\n        const deactivateInteractionMethod = interactionsMap[availableInteractionName](false);\n        this.viewer[deactivateInteractionMethod]();\n      } else {\n        const [name, config] = interaction;\n        const activateInteractionMethod = interactionsMap[name](true);\n        this.viewer[activateInteractionMethod](config);\n      }\n    });\n  }\n\n  /**\n   * Accesses the internals of third-party API and returns the OpenLayers Map\n   *\n   * @returns {Object} OpenLayers Map component instance\n   */\n  _getMapView() {\n    const map = this._getMap();\n    return map.getView();\n  }\n\n  _getMap() {\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\n    const _map = symbols.find(s => String(s) === 'Symbol(map)');\n    window['map'] = this.viewer[_map];\n    return this.viewer[_map];\n  }\n\n  /**\n   * Returns the current state for the OpenLayers View\n   *\n   * @returns {Object} Current view state\n   */\n  getViewState() {\n    const view = this._getMapView();\n    return {\n      center: view.getCenter(),\n      resolution: view.getResolution(),\n      zoom: view.getZoom(),\n    };\n  }\n\n  /**\n   * Sets the current state for the OpenLayers View\n   *\n   * @param {Object} viewState View state to be applied\n   */\n  setViewState(viewState) {\n    const view = this._getMapView();\n\n    view.setZoom(viewState.zoom);\n    view.setResolution(viewState.resolution);\n    view.setCenter(viewState.center);\n  }\n\n  setViewStateByExtent(roiAnnotation) {\n    const coordinates = roiAnnotation.getCoordinates();\n\n    if (Array.isArray(coordinates[0]) && !coordinates[2]) {\n      this._jumpToPolyline(coordinates);\n    } else if (Array.isArray(coordinates[0])) {\n      this._jumpToPolygonOrEllipse(coordinates);\n    } else {\n      this._jumpToPoint(coordinates);\n    }\n  }\n\n  _jumpToPoint(coord) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n    const view = this._getMapView();\n\n    view.setCenter(mappedCoord);\n  }\n\n  _jumpToPolyline(coord) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n    const view = this._getMapView();\n\n    const x = mappedCoord[0];\n    const y = mappedCoord[1];\n\n    const xab = (x[0] + y[0]) / 2;\n    const yab = (x[1] + y[1]) / 2;\n    const midpoint = [xab, yab];\n\n    view.setCenter(midpoint);\n  }\n\n  _jumpToPolygonOrEllipse(coordinates) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n\n    coordinates.forEach(coord => {\n      let mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n\n      const [x, y] = mappedCoord;\n      if (x < minX) {\n        minX = x;\n      } else if (x > maxX) {\n        maxX = x;\n      }\n\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n    });\n\n    const width = maxX - minX;\n    const height = maxY - minY;\n\n    minX -= 0.5 * width;\n    maxX += 0.5 * width;\n    minY -= 0.5 * height;\n    maxY += 0.5 * height;\n\n    const map = this._getMap();\n    map.getView().fit([minX, minY, maxX, maxY], map.getSize());\n  }\n}\n\nexport { EVENTS };\n\nexport default ViewerManager;\n","import areaOfPolygon from './areaOfPolygon';\n\nimport { PubSubService } from '@ohif/core';\n\nconst EVENTS = {\n  LABEL_UPDATED: 'labelUpdated',\n  GRAPHIC_UPDATED: 'graphicUpdated',\n  VIEW_UPDATED: 'viewUpdated',\n  REMOVED: 'removed',\n};\n\n/**\n * Represents a single annotation for the Microscopy Viewer\n */\nclass RoiAnnotation extends PubSubService {\n  constructor(roiGraphic, studyInstanceUID, seriesInstanceUID, label = '', viewState = null) {\n    super(EVENTS);\n    this.uid = roiGraphic.uid;\n    this.roiGraphic = roiGraphic;\n    this.studyInstanceUID = studyInstanceUID;\n    this.seriesInstanceUID = seriesInstanceUID;\n    this.label = label;\n    this.viewState = viewState;\n    this.setMeasurements(roiGraphic);\n  }\n\n  getScoord3d() {\n    const roiGraphic = this.roiGraphic;\n\n    const roiGraphicSymbols = Object.getOwnPropertySymbols(roiGraphic);\n    const _scoord3d = roiGraphicSymbols.find(s => String(s) === 'Symbol(scoord3d)');\n\n    return roiGraphic[_scoord3d];\n  }\n\n  getCoordinates() {\n    const scoord3d = this.getScoord3d();\n    const scoord3dSymbols = Object.getOwnPropertySymbols(scoord3d);\n\n    const _coordinates = scoord3dSymbols.find(s => String(s) === 'Symbol(coordinates)');\n\n    const coordinates = scoord3d[_coordinates];\n    return coordinates;\n  }\n\n  /**\n   * When called will trigger the REMOVED event\n   */\n  destroy() {\n    this._broadcastEvent(EVENTS.REMOVED, this);\n  }\n\n  /**\n   * Updates the ROI graphic for the annotation and triggers the GRAPHIC_UPDATED\n   * event\n   *\n   * @param {Object} roiGraphic\n   */\n  setRoiGraphic(roiGraphic) {\n    this.roiGraphic = roiGraphic;\n    this.setMeasurements();\n    this._broadcastEvent(EVENTS.GRAPHIC_UPDATED, this);\n  }\n\n  /**\n   * Update ROI measurement values based on its scoord3d coordinates.\n   *\n   * @returns {void}\n   */\n  setMeasurements() {\n    const type = this.roiGraphic.scoord3d.graphicType;\n    const coordinates = this.roiGraphic.scoord3d.graphicData;\n\n    switch (type) {\n      case 'ELLIPSE':\n        // This is a circle so only need one side\n        const point1 = coordinates[0];\n        const point2 = coordinates[1];\n\n        let xLength2 = point2[0] - point1[0];\n        let yLength2 = point2[1] - point1[1];\n\n        xLength2 *= xLength2;\n        yLength2 *= yLength2;\n\n        const length = Math.sqrt(xLength2 + yLength2);\n        const radius = length / 2;\n\n        const areaEllipse = Math.PI * radius * radius;\n        this._area = areaEllipse;\n        this._length = undefined;\n        break;\n\n      case 'POLYGON':\n        const areaPolygon = areaOfPolygon(coordinates);\n        this._area = areaPolygon;\n        this._length = undefined;\n        break;\n\n      case 'POINT':\n        this._area = undefined;\n        this._length = undefined;\n        break;\n\n      case 'POLYLINE':\n        let len = 0;\n        for (let i = 1; i < coordinates.length; i++) {\n          const p1 = coordinates[i - 1];\n          const p2 = coordinates[i];\n\n          let xLen = p2[0] - p1[0];\n          let yLen = p2[1] - p1[1];\n\n          xLen *= xLen;\n          yLen *= yLen;\n          len += Math.sqrt(xLen + yLen);\n        }\n\n        this._area = undefined;\n        this._length = len;\n        break;\n    }\n  }\n\n  /**\n   * Update the OpenLayer Map's view state for the annotation and triggers the\n   * VIEW_UPDATED event\n   *\n   * @param {Object} viewState The new view state for the annotation\n   */\n  setViewState(viewState) {\n    this.viewState = viewState;\n    this._broadcastEvent(EVENTS.VIEW_UPDATED, this);\n  }\n\n  /**\n   * Update the label for the annotation and triggers the LABEL_UPDATED event\n   *\n   * @param {String} label New label for the annotation\n   */\n  setLabel(label, finding) {\n    this.label = label || (finding && finding.CodeMeaning);\n    this.finding = finding || {\n      CodingSchemeDesignator: '@ohif/extension-dicom-microscopy',\n      CodeValue: label,\n      CodeMeaning: label,\n    };\n    this._broadcastEvent(EVENTS.LABEL_UPDATED, this);\n  }\n\n  /**\n   * Returns the geometry type of the annotation concatenated with the label\n   * defined for the annotation.\n   * Difference with getDetailedLabel() is that this will return empty string for empty\n   * label.\n   *\n   * @returns {String} Text with geometry type and label\n   */\n  getLabel() {\n    const label = this.label ? `${this.label}` : '';\n    return label;\n  }\n\n  /**\n   * Returns the geometry type of the annotation concatenated with the label\n   * defined for the annotation\n   *\n   * @returns {String} Text with geometry type and label\n   */\n  getDetailedLabel() {\n    const label = this.label ? `${this.label}` : '(empty)';\n    return label;\n  }\n\n  getLength() {\n    return this._length;\n  }\n\n  getArea() {\n    return this._area;\n  }\n}\n\nexport { EVENTS };\n\nexport default RoiAnnotation;\n","export default function areaOfPolygon(coordinates) {\n  // Shoelace algorithm.\n  const n = coordinates.length;\n  let area = 0.0;\n  let j = n - 1;\n\n  for (let i = 0; i < n; i++) {\n    area += (coordinates[j][0] + coordinates[i][0]) * (coordinates[j][1] - coordinates[i][1]);\n    j = i; // j is previous vertex to i\n  }\n\n  // Return absolute value of half the sum\n  // (The value is halved as we are summing up triangles, not rectangles).\n  return Math.abs(area / 2.0);\n}\n","import ViewerManager, { EVENTS as ViewerEvents } from '../tools/viewerManager';\nimport RoiAnnotation, { EVENTS as AnnotationEvents } from '../utils/RoiAnnotation';\nimport styles from '../utils/styles';\nimport { DicomMetadataStore, PubSubService } from '@ohif/core';\n\nconst EVENTS = {\n  ANNOTATION_UPDATED: 'annotationUpdated',\n  ANNOTATION_SELECTED: 'annotationSelected',\n  ANNOTATION_REMOVED: 'annotationRemoved',\n  RELABEL: 'relabel',\n  DELETE: 'delete',\n};\n\n/**\n * MicroscopyService is responsible to manage multiple third-party API's\n * microscopy viewers expose methods to manage the interaction with these\n * viewers and handle their ROI graphics to create, remove and modify the\n * ROI annotations relevant to the application\n */\nexport default class MicroscopyService extends PubSubService {\n  public static REGISTRATION = servicesManager => {\n    return {\n      name: 'microscopyService',\n      altName: 'MicroscopyService',\n      create: (props) => {\n        return new MicroscopyService(props);\n      },\n    };\n  };\n\n  servicesManager: any;\n\n  managedViewers = new Set();\n  roiUids = new Set();\n  annotations = {};\n  selectedAnnotation = null;\n  pendingFocus = false;\n\n  constructor({ servicesManager, extensionManager }) {\n    super(EVENTS);\n    this.servicesManager = servicesManager;\n    this.peerImport = extensionManager.appConfig.peerImport;\n    this._onRoiAdded = this._onRoiAdded.bind(this);\n    this._onRoiModified = this._onRoiModified.bind(this);\n    this._onRoiRemoved = this._onRoiRemoved.bind(this);\n    this._onRoiUpdated = this._onRoiUpdated.bind(this);\n    this._onRoiSelected = this._onRoiSelected.bind(this);\n    this.isROIsVisible = true;\n  }\n\n  /**\n   * Clears all the annotations and managed viewers, setting the manager state\n   * to its initial state\n   */\n  clear() {\n    this.managedViewers.forEach(managedViewer => managedViewer.destroy());\n    this.managedViewers.clear();\n    for (const key in this.annotations) {\n      delete this.annotations[key];\n    }\n\n    this.roiUids.clear();\n    this.selectedAnnotation = null;\n    this.pendingFocus = false;\n  }\n\n  clearAnnotations() {\n    Object.keys(this.annotations).forEach(uid => {\n      this.removeAnnotation(this.annotations[uid]);\n    });\n  }\n\n  public importDicomMicroscopyViewer(): Promise<any> {\n    return this.peerImport(\"dicom-microscopy-viewer\");\n  }\n\n  /**\n   * Observes when a ROI graphic is added, creating the correspondent annotation\n   * with the current graphic and view state.\n   * Creates a subscription for label updating for the created annotation and\n   * publishes an ANNOTATION_UPDATED event when it happens.\n   * Also triggers the relabel process after the graphic is placed.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiAdded(data) {\n    const { roiGraphic, managedViewer, label } = data;\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\n    const viewState = managedViewer.getViewState();\n\n    const roiAnnotation = new RoiAnnotation(\n      roiGraphic,\n      studyInstanceUID,\n      seriesInstanceUID,\n      '',\n      viewState\n    );\n\n    this.roiUids.add(roiGraphic.uid);\n    this.annotations[roiGraphic.uid] = roiAnnotation;\n\n    roiAnnotation.subscribe(AnnotationEvents.LABEL_UPDATED, () => {\n      this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, roiAnnotation);\n    });\n\n    if (label !== undefined) {\n      roiAnnotation.setLabel(label);\n    } else {\n      const onRelabel = item =>\n        managedViewer.updateROIProperties({\n          uid: roiGraphic.uid,\n          properties: { label: item.label, finding: item.finding },\n        });\n      this.triggerRelabel(roiAnnotation, true, onRelabel);\n    }\n  }\n\n  /**\n   * Observes when a ROI graphic is modified, updating the correspondent\n   * annotation with the current graphic and view state.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The modified ROI graphic object\n   */\n  _onRoiModified(data) {\n    const { roiGraphic, managedViewer } = data;\n    const roiAnnotation = this.getAnnotation(roiGraphic.uid);\n    if (!roiAnnotation) {\n      return;\n    }\n    roiAnnotation.setRoiGraphic(roiGraphic);\n    roiAnnotation.setViewState(managedViewer.getViewState());\n  }\n\n  /**\n   * Observes when a ROI graphic is removed, reflecting the removal in the\n   * annotations' state.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The removed ROI graphic object\n   */\n  _onRoiRemoved(data) {\n    const { roiGraphic } = data;\n    this.roiUids.delete(roiGraphic.uid);\n    this.annotations[roiGraphic.uid].destroy();\n    delete this.annotations[roiGraphic.uid];\n    this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiGraphic);\n  }\n\n  /**\n   * Observes any changes on ROI graphics and synchronize all the managed\n   * viewers to reflect those changes.\n   * Also publishes an ANNOTATION_UPDATED event to notify the subscribers.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiUpdated(data) {\n    const { roiGraphic, managedViewer } = data;\n    this.synchronizeViewers(managedViewer);\n    this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, this.getAnnotation(roiGraphic.uid));\n  }\n\n  /**\n   * Observes when an ROI is selected.\n   * Also publishes an ANNOTATION_SELECTED event to notify the subscribers.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiSelected(data) {\n    const { roiGraphic } = data;\n    const selectedAnnotation = this.getAnnotation(roiGraphic.uid);\n    if (selectedAnnotation && selectedAnnotation !== this.getSelectedAnnotation()) {\n      if (this.selectedAnnotation) {\n        this.clearSelection();\n      }\n      this.selectedAnnotation = selectedAnnotation;\n      this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, selectedAnnotation);\n    }\n  }\n\n  /**\n   * Creates the subscriptions for the managed viewer being added\n   *\n   * @param {ViewerManager} managedViewer The viewer being added\n   */\n  _addManagedViewerSubscriptions(managedViewer) {\n    managedViewer._roiAddedSubscription = managedViewer.subscribe(\n      ViewerEvents.ADDED,\n      this._onRoiAdded\n    );\n    managedViewer._roiModifiedSubscription = managedViewer.subscribe(\n      ViewerEvents.MODIFIED,\n      this._onRoiModified\n    );\n    managedViewer._roiRemovedSubscription = managedViewer.subscribe(\n      ViewerEvents.REMOVED,\n      this._onRoiRemoved\n    );\n    managedViewer._roiUpdatedSubscription = managedViewer.subscribe(\n      ViewerEvents.UPDATED,\n      this._onRoiUpdated\n    );\n    managedViewer._roiSelectedSubscription = managedViewer.subscribe(\n      ViewerEvents.UPDATED,\n      this._onRoiSelected\n    );\n  }\n\n  /**\n   * Removes the subscriptions for the managed viewer being removed\n   *\n   * @param {ViewerManager} managedViewer The viewer being removed\n   */\n  _removeManagedViewerSubscriptions(managedViewer) {\n    managedViewer._roiAddedSubscription && managedViewer._roiAddedSubscription.unsubscribe();\n    managedViewer._roiModifiedSubscription && managedViewer._roiModifiedSubscription.unsubscribe();\n    managedViewer._roiRemovedSubscription && managedViewer._roiRemovedSubscription.unsubscribe();\n    managedViewer._roiUpdatedSubscription && managedViewer._roiUpdatedSubscription.unsubscribe();\n    managedViewer._roiSelectedSubscription && managedViewer._roiSelectedSubscription.unsubscribe();\n\n    managedViewer._roiAddedSubscription = null;\n    managedViewer._roiModifiedSubscription = null;\n    managedViewer._roiRemovedSubscription = null;\n    managedViewer._roiUpdatedSubscription = null;\n    managedViewer._roiSelectedSubscription = null;\n  }\n\n  /**\n   * Returns the managed viewers that are displaying the image with the given\n   * study and series UIDs\n   *\n   * @param {String} studyInstanceUID UID for the study\n   * @param {String} seriesInstanceUID UID for the series\n   *\n   * @returns {Array} The managed viewers for the given series UID\n   */\n  _getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID) {\n    const filter = managedViewer =>\n      managedViewer.studyInstanceUID === studyInstanceUID &&\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\n    return Array.from(this.managedViewers).filter(filter);\n  }\n\n  /**\n   * Returns the managed viewers that are displaying the image with the given\n   * study UID\n   *\n   * @param {String} studyInstanceUID UID for the study\n   *\n   * @returns {Array} The managed viewers for the given series UID\n   */\n  getManagedViewersForStudy(studyInstanceUID) {\n    const filter = managedViewer => managedViewer.studyInstanceUID === studyInstanceUID;\n    return Array.from(this.managedViewers).filter(filter);\n  }\n\n  /**\n   * Restores the created annotations for the viewer being added\n   *\n   * @param {ViewerManager} managedViewer The viewer being added\n   */\n  _restoreAnnotations(managedViewer) {\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\n    const annotations = this.getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID);\n    annotations.forEach(roiAnnotation => {\n      managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\n    });\n  }\n\n  /**\n   * Creates a managed viewer instance for the given third-party API's viewer.\n   * Restores existing annotations for the given study/series.\n   * Adds event subscriptions for the viewer being added.\n   * Focuses the selected annotation when the viewer is being loaded into the\n   * active viewport.\n   *\n   * @param viewer - Third-party viewer API's object to be managed\n   * @param viewportId - The viewport Id where the viewer will be loaded\n   * @param container - The DOM element where it will be rendered\n   * @param studyInstanceUID - The study UID of the loaded image\n   * @param seriesInstanceUID - The series UID of the loaded image\n   * @param displaySets - All displaySets related to the same StudyInstanceUID\n   *\n   * @returns {ViewerManager} managed viewer\n   */\n  addViewer(viewer, viewportId, container, studyInstanceUID, seriesInstanceUID) {\n    const managedViewer = new ViewerManager(\n      viewer,\n      viewportId,\n      container,\n      studyInstanceUID,\n      seriesInstanceUID\n    );\n\n    this._restoreAnnotations(managedViewer);\n    viewer._manager = managedViewer;\n    this.managedViewers.add(managedViewer);\n\n    // this._potentiallyLoadSR(studyInstanceUID, displaySets);\n    this._addManagedViewerSubscriptions(managedViewer);\n\n    if (this.pendingFocus) {\n      this.pendingFocus = false;\n      this.focusAnnotation(this.selectedAnnotation, viewportId);\n    }\n\n    return managedViewer;\n  }\n\n  _potentiallyLoadSR(StudyInstanceUID, displaySets) {\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\n\n    const { FrameOfReferenceUID, othersFrameOfReferenceUID } = smDisplaySet;\n\n    if (!studyMetadata) {\n      return;\n    }\n\n    let derivedDisplaySets = FrameOfReferenceUID\n      ? displaySets.filter(\n          ds =>\n            ds.ReferencedFrameOfReferenceUID === FrameOfReferenceUID ||\n            // sometimes each depth instance has the different FrameOfReferenceID\n            othersFrameOfReferenceUID.includes(ds.ReferencedFrameOfReferenceUID)\n        )\n      : [];\n\n    if (!derivedDisplaySets.length) {\n      return;\n    }\n\n    derivedDisplaySets = derivedDisplaySets.filter(ds => ds.Modality === 'SR');\n\n    if (derivedDisplaySets.some(ds => ds.isLoaded === true)) {\n      // Don't auto load\n      return;\n    }\n\n    // find most recent and load it.\n    let recentDateTime = 0;\n    let recentDisplaySet = derivedDisplaySets[0];\n\n    derivedDisplaySets.forEach(ds => {\n      const dateTime = Number(`${ds.SeriesDate}${ds.SeriesTime}`);\n      if (dateTime > recentDateTime) {\n        recentDateTime = dateTime;\n        recentDisplaySet = ds;\n      }\n    });\n\n    recentDisplaySet.isLoading = true;\n\n    recentDisplaySet.load(smDisplaySet);\n  }\n\n  /**\n   * Removes the given third-party viewer API's object from the managed viewers\n   * and clears all its event subscriptions\n   *\n   * @param {Object} viewer Third-party viewer API's object to be removed\n   */\n  removeViewer(viewer) {\n    const managedViewer = viewer._manager;\n\n    this._removeManagedViewerSubscriptions(managedViewer);\n    managedViewer.destroy();\n    this.managedViewers.delete(managedViewer);\n  }\n\n  /**\n   * Toggle ROIs visibility\n   */\n  toggleROIsVisibility() {\n    this.isROIsVisible ? this.hideROIs() : this.showROIs;\n    this.isROIsVisible = !this.isROIsVisible;\n  }\n\n  /**\n   * Hide all ROIs\n   */\n  hideROIs() {\n    this.managedViewers.forEach(mv => mv.hideROIs());\n  }\n\n  /** Show all ROIs */\n  showROIs() {\n    this.managedViewers.forEach(mv => mv.showROIs());\n  }\n\n  /**\n   * Returns a RoiAnnotation instance for the given ROI UID\n   *\n   * @param {String} uid UID of the annotation\n   *\n   * @returns {RoiAnnotation} The RoiAnnotation instance found for the given UID\n   */\n  getAnnotation(uid) {\n    return this.annotations[uid];\n  }\n\n  /**\n   * Returns all the RoiAnnotation instances being managed\n   *\n   * @returns {Array} All RoiAnnotation instances\n   */\n  getAnnotations() {\n    const annotations = [];\n    Object.keys(this.annotations).forEach(uid => {\n      annotations.push(this.getAnnotation(uid));\n    });\n    return annotations;\n  }\n\n  /**\n   * Returns the RoiAnnotation instances registered with the given study UID\n   *\n   * @param {String} studyInstanceUID UID for the study\n   */\n  getAnnotationsForStudy(studyInstanceUID) {\n    const filter = a => a.studyInstanceUID === studyInstanceUID;\n    return this.getAnnotations().filter(filter);\n  }\n\n  /**\n   * Returns the RoiAnnotation instances registered with the given study and\n   * series UIDs\n   *\n   * @param {String} studyInstanceUID UID for the study\n   * @param {String} seriesInstanceUID UID for the series\n   */\n  getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID) {\n    const filter = annotation =>\n      annotation.studyInstanceUID === studyInstanceUID &&\n      annotation.seriesInstanceUID === seriesInstanceUID;\n    return this.getAnnotations().filter(filter);\n  }\n\n  /**\n   * Returns the selected RoiAnnotation instance or null if none is selected\n   *\n   * @returns {RoiAnnotation} The selected RoiAnnotation instance\n   */\n  getSelectedAnnotation() {\n    return this.selectedAnnotation;\n  }\n\n  /**\n   * Clear current RoiAnnotation selection\n   */\n  clearSelection() {\n    if (this.selectedAnnotation) {\n      this.setROIStyle(this.selectedAnnotation.uid, {\n        stroke: {\n          color: '#00ff00',\n        },\n      });\n    }\n    this.selectedAnnotation = null;\n  }\n\n  /**\n   * Selects the given RoiAnnotation instance, publishing an ANNOTATION_SELECTED\n   * event to notify all the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be selected\n   */\n  selectAnnotation(roiAnnotation) {\n    if (this.selectedAnnotation) {\n      this.clearSelection();\n    }\n\n    this.selectedAnnotation = roiAnnotation;\n    this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, roiAnnotation);\n    this.setROIStyle(roiAnnotation.uid, styles.active);\n  }\n\n  /**\n   * Toggles overview map\n   *\n   * @param viewportId The active viewport index\n   * @returns {void}\n   */\n  toggleOverviewMap(viewportId) {\n    const managedViewers = Array.from(this.managedViewers);\n    const managedViewer = managedViewers.find(mv => mv.viewportId === viewportId);\n    if (managedViewer) {\n      managedViewer.toggleOverviewMap();\n    }\n  }\n\n  /**\n   * Removes a RoiAnnotation instance from the managed annotations and reflects\n   * its removal on all third-party viewers being managed\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be removed\n   */\n  removeAnnotation(roiAnnotation) {\n    const { uid, studyInstanceUID, seriesInstanceUID } = roiAnnotation;\n    const filter = managedViewer =>\n      managedViewer.studyInstanceUID === studyInstanceUID &&\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\n\n    const managedViewers = Array.from(this.managedViewers).filter(filter);\n\n    managedViewers.forEach(managedViewer => managedViewer.removeRoiGraphic(uid));\n\n    if (this.annotations[uid]) {\n      this.roiUids.delete(uid);\n      this.annotations[uid].destroy();\n      delete this.annotations[uid];\n\n      this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiAnnotation);\n    }\n  }\n\n  /**\n   * Focus the given RoiAnnotation instance by changing the OpenLayers' Map view\n   * state of the managed viewer with the given viewport index.\n   * If the image for the given annotation is not yet loaded into the viewport,\n   * it will set a pendingFocus flag to true in order to perform the focus when\n   * the managed viewer instance is created.\n   *\n   * @param {RoiAnnotation} roiAnnotation RoiAnnotation instance to be focused\n   * @param {string} viewportId Index of the viewport to focus\n   */\n  focusAnnotation(roiAnnotation, viewportId) {\n    const filter = mv => mv.viewportId === viewportId;\n    const managedViewer = Array.from(this.managedViewers).find(filter);\n    if (managedViewer) {\n      managedViewer.setViewStateByExtent(roiAnnotation);\n    } else {\n      this.pendingFocus = true;\n    }\n  }\n\n  /**\n   * Synchronize the ROI graphics for all the managed viewers that has the same\n   * series UID of the given managed viewer\n   *\n   * @param {ViewerManager} baseManagedViewer Reference managed viewer\n   */\n  synchronizeViewers(baseManagedViewer) {\n    const { studyInstanceUID, seriesInstanceUID } = baseManagedViewer;\n    const managedViewers = this._getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID);\n\n    // Prevent infinite loops arrising from updates.\n    managedViewers.forEach(managedViewer => this._removeManagedViewerSubscriptions(managedViewer));\n\n    managedViewers.forEach(managedViewer => {\n      if (managedViewer === baseManagedViewer) {\n        return;\n      }\n\n      const annotations = this.getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID);\n      managedViewer.clearRoiGraphics();\n      annotations.forEach(roiAnnotation => {\n        managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\n      });\n    });\n\n    managedViewers.forEach(managedViewer => this._addManagedViewerSubscriptions(managedViewer));\n  }\n\n  /**\n   * Activates interactions across all the viewers being managed\n   *\n   * @param {Array} interactions interactions\n   */\n  activateInteractions(interactions) {\n    this.managedViewers.forEach(mv => mv.activateInteractions(interactions));\n    this.activeInteractions = interactions;\n  }\n\n  getActiveInteractions() {\n    return this.activeInteractions;\n  }\n\n  /**\n   * Triggers the relabelling process for the given RoiAnnotation instance, by\n   * publishing the RELABEL event to notify the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be relabelled\n   * @param {boolean} newAnnotation Whether the annotation is newly drawn (so it deletes on cancel).\n   */\n  triggerRelabel(roiAnnotation, newAnnotation = false, onRelabel) {\n    if (!onRelabel) {\n      onRelabel = ({ label }) =>\n        this.managedViewers.forEach(mv =>\n          mv.updateROIProperties({\n            uid: roiAnnotation.uid,\n            properties: { label },\n          })\n        );\n    }\n\n    this._broadcastEvent(EVENTS.RELABEL, {\n      roiAnnotation,\n      deleteCallback: () => this.removeAnnotation(roiAnnotation),\n      successCallback: onRelabel,\n      newAnnotation,\n    });\n  }\n\n  /**\n   * Triggers the deletion process for the given RoiAnnotation instance, by\n   * publishing the DELETE event to notify the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be deleted\n   */\n  triggerDelete(roiAnnotation) {\n    this._broadcastEvent(EVENTS.DELETE, roiAnnotation);\n  }\n\n  /**\n   * Set ROI style for all managed viewers\n   *\n   * @param {string} uid The ROI uid that will be styled\n   * @param {object} styleOptions - Style options\n   * @param {object*} styleOptions.stroke - Style options for the outline of the geometry\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\n   * @param {number} styleOptions.stroke.width - Width of the outline\n   * @param {object*} styleOptions.fill - Style options for body the geometry\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\n   * @param {object*} styleOptions.image - Style options for image\n   */\n  setROIStyle(uid, styleOptions) {\n    this.managedViewers.forEach(mv => mv.setROIStyle(uid, styleOptions));\n  }\n\n  /**\n   * Get all managed viewers\n   *\n   * @returns {Array} managedViewers\n   */\n  getAllManagedViewers() {\n    return Array.from(this.managedViewers);\n  }\n}\n\nexport { EVENTS };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ExtensionManager, CommandsManager, DicomMetadataStore } from '@ohif/core';\nimport { MeasurementTable } from '@ohif/ui';\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { EVENTS as MicroscopyEvents } from '../../services/MicroscopyService';\nimport dcmjs from 'dcmjs';\nimport { callInputDialog } from '@ohif/extension-default';\nimport constructSR from '../../utils/constructSR';\nimport { saveByteArray } from '../../utils/saveByteArray';\nimport { Separator } from '@ohif/ui-next';\n\nlet saving = false;\nconst { datasetToBuffer } = dcmjs.data;\n\nconst formatArea = area => {\n  let mult = 1;\n  let unit = 'mm';\n  if (area > 1000000) {\n    unit = 'm';\n    mult = 1 / 1000000;\n  } else if (area < 1) {\n    unit = 'μm';\n    mult = 1000000;\n  }\n  return `${(area * mult).toFixed(2)} ${unit}²`;\n};\n\nconst formatLength = (length, unit) => {\n  let mult = 1;\n  if (unit == 'km' || (!unit && length > 1000000)) {\n    unit = 'km';\n    mult = 1 / 1000000;\n  } else if (unit == 'm' || (!unit && length > 1000)) {\n    unit = 'm';\n    mult = 1 / 1000;\n  } else if (unit == 'μm' || (!unit && length < 1)) {\n    unit = 'μm';\n    mult = 1000;\n  } else if (unit && unit != 'mm') {\n    throw new Error(`Unknown length unit ${unit}`);\n  } else {\n    unit = 'mm';\n  }\n  return `${(length * mult).toFixed(2)} ${unit}`;\n};\n\ninterface IMicroscopyPanelProps extends WithTranslation {\n  viewports: PropTypes.array;\n  activeViewportId: PropTypes.string;\n\n  //\n  onSaveComplete?: PropTypes.func; // callback when successfully saved annotations\n  onRejectComplete?: PropTypes.func; // callback when rejected annotations\n\n  //\n  servicesManager: AppTypes.ServicesManager;\n  extensionManager: ExtensionManager;\n  commandsManager: CommandsManager;\n}\n\n/**\n * Microscopy Measurements Panel Component\n *\n * @param props\n * @returns\n */\nfunction MicroscopyPanel(props: IMicroscopyPanelProps) {\n  const { microscopyService } = props.servicesManager.services;\n\n  const [studyInstanceUID, setStudyInstanceUID] = useState(null as string | null);\n  const [roiAnnotations, setRoiAnnotations] = useState([] as any[]);\n  const [selectedAnnotation, setSelectedAnnotation] = useState(null as any);\n  const { servicesManager, extensionManager } = props;\n\n  const { uiDialogService, displaySetService } = servicesManager.services;\n\n  useEffect(() => {\n    const viewport = props.viewports.get(props.activeViewportId);\n    if (viewport?.displaySetInstanceUIDs[0]) {\n      const displaySet = displaySetService.getDisplaySetByUID(viewport.displaySetInstanceUIDs[0]);\n      if (displaySet) {\n        setStudyInstanceUID(displaySet.StudyInstanceUID);\n      }\n    }\n  }, [props.viewports, props.activeViewportId]);\n\n  useEffect(() => {\n    const onAnnotationUpdated = () => {\n      const roiAnnotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\n      setRoiAnnotations(roiAnnotations);\n    };\n\n    const onAnnotationSelected = () => {\n      const selectedAnnotation = microscopyService.getSelectedAnnotation();\n      setSelectedAnnotation(selectedAnnotation);\n    };\n\n    const onAnnotationRemoved = () => {\n      onAnnotationUpdated();\n    };\n\n    const { unsubscribe: unsubscribeAnnotationUpdated } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_UPDATED,\n      onAnnotationUpdated\n    );\n    const { unsubscribe: unsubscribeAnnotationSelected } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_SELECTED,\n      onAnnotationSelected\n    );\n    const { unsubscribe: unsubscribeAnnotationRemoved } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_REMOVED,\n      onAnnotationRemoved\n    );\n    onAnnotationUpdated();\n    onAnnotationSelected();\n\n    // on unload unsubscribe from events\n    return () => {\n      unsubscribeAnnotationUpdated();\n      unsubscribeAnnotationSelected();\n      unsubscribeAnnotationRemoved();\n    };\n  }, [studyInstanceUID]);\n\n  /**\n   * On clicking \"Save Annotations\" button, prompt an input modal for the\n   * new series' description, and continue to save.\n   *\n   * @returns\n   */\n  const promptSave = () => {\n    const annotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\n\n    if (!annotations || saving) {\n      return;\n    }\n\n    callInputDialog({\n      uiDialogService,\n      title: 'Enter description of the Series',\n      defaultValue: '',\n      callback: (value: string, action: string) => {\n        switch (action) {\n          case 'save': {\n            saveFunction(value);\n          }\n        }\n      },\n    });\n  };\n\n  const getAllDisplaySets = (studyMetadata: any) => {\n    let allDisplaySets = [] as any[];\n    studyMetadata.series.forEach((series: any) => {\n      const displaySets = displaySetService.getDisplaySetsForSeries(series.SeriesInstanceUID);\n      allDisplaySets = allDisplaySets.concat(displaySets);\n    });\n    return allDisplaySets;\n  };\n\n  /**\n   * Save annotations as a series\n   *\n   * @param SeriesDescription - series description\n   * @returns\n   */\n  const saveFunction = async (SeriesDescription: string) => {\n    const dataSource = extensionManager.getActiveDataSource()[0];\n    const { onSaveComplete } = props;\n    const annotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\n\n    saving = true;\n\n    // There is only one viewer possible for one study,\n    // Since once study contains multiple resolution levels (series) of one whole\n    // Slide image.\n\n    const studyMetadata = DicomMetadataStore.getStudy(studyInstanceUID);\n    const displaySets = getAllDisplaySets(studyMetadata);\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\n\n    // Get the next available series number after 4700.\n\n    const dsWithMetadata = displaySets.filter(\n      ds => ds.metadata && ds.metadata.SeriesNumber && typeof ds.metadata.SeriesNumber === 'number'\n    );\n\n    // Generate next series number\n    const seriesNumbers = dsWithMetadata.map(ds => ds.metadata.SeriesNumber);\n    const maxSeriesNumber = Math.max(...seriesNumbers, 4700);\n    const SeriesNumber = maxSeriesNumber + 1;\n\n    const { instance: metadata } = smDisplaySet;\n\n    // construct SR dataset\n    const dataset = constructSR(metadata, { SeriesDescription, SeriesNumber }, annotations);\n\n    // Save in DICOM format\n    try {\n      if (dataSource) {\n        if (dataSource.wadoRoot == 'saveDicom') {\n          // download as DICOM file\n          const part10Buffer = datasetToBuffer(dataset);\n          saveByteArray(part10Buffer, `sr-microscopy.dcm`);\n        } else {\n          // Save into Web Data source\n          const { StudyInstanceUID } = dataset;\n          await dataSource.store.dicom(dataset);\n          if (StudyInstanceUID) {\n            dataSource.deleteStudyMetadataPromise(StudyInstanceUID);\n          }\n        }\n        onSaveComplete({\n          title: 'SR Saved',\n          message: 'Measurements downloaded successfully',\n          type: 'success',\n        });\n      } else {\n        console.error('Server unspecified');\n      }\n    } catch (error) {\n      onSaveComplete({\n        title: 'SR Save Failed',\n        message: error.message || error.toString(),\n        type: 'error',\n      });\n    } finally {\n      saving = false;\n    }\n  };\n\n  /**\n   * On clicking \"Reject annotations\" button\n   */\n  const onDeleteCurrentSRHandler = async () => {\n    try {\n      const activeViewport = props.viewports[props.activeViewportId];\n      const { StudyInstanceUID } = activeViewport;\n\n      // TODO: studies?\n      const study = DicomMetadataStore.getStudy(StudyInstanceUID);\n\n      const lastDerivedDisplaySet = study.derivedDisplaySets.sort((ds1: any, ds2: any) => {\n        const dateTime1 = Number(`${ds1.SeriesDate}${ds1.SeriesTime}`);\n        const dateTime2 = Number(`${ds2.SeriesDate}${ds2.SeriesTime}`);\n        return dateTime1 > dateTime2;\n      })[study.derivedDisplaySets.length - 1];\n\n      // TODO: use dataSource.reject.dicom()\n      // await DICOMSR.rejectMeasurements(\n      //   study.wadoRoot,\n      //   lastDerivedDisplaySet.StudyInstanceUID,\n      //   lastDerivedDisplaySet.SeriesInstanceUID\n      // );\n      props.onRejectComplete({\n        title: 'Report rejected',\n        message: 'Latest report rejected successfully',\n        type: 'success',\n      });\n    } catch (error) {\n      props.onRejectComplete({\n        title: 'Failed to reject report',\n        message: error.message,\n        type: 'error',\n      });\n    }\n  };\n\n  /**\n   * Handler for clicking event of an annotation item.\n   *\n   * @param param0\n   */\n  const onMeasurementItemClickHandler = ({ uid }: { uid: string }) => {\n    const roiAnnotation = microscopyService.getAnnotation(uid);\n    microscopyService.selectAnnotation(roiAnnotation);\n    microscopyService.focusAnnotation(roiAnnotation, props.activeViewportId);\n  };\n\n  /**\n   * Handler for \"Edit\" action of an annotation item\n   * @param param0\n   */\n  const onMeasurementItemEditHandler = ({ uid, isActive }: { uid: string; isActive: boolean }) => {\n    props.commandsManager.runCommand('setLabel', { uid }, 'MICROSCOPY');\n  };\n\n  const onMeasurementDeleteHandler = ({ uid, isActive }: { uid: string; isActive: boolean }) => {\n    const roiAnnotation = microscopyService.getAnnotation(uid);\n    microscopyService.removeAnnotation(roiAnnotation);\n  };\n\n  // Convert ROI annotations managed by microscopyService into our\n  // own format for display\n  const data = roiAnnotations.map((roiAnnotation, index) => {\n    const label = roiAnnotation.getDetailedLabel();\n    const area = roiAnnotation.getArea();\n    const length = roiAnnotation.getLength();\n    const shortAxisLength = roiAnnotation.roiGraphic.properties.shortAxisLength;\n    const isSelected: boolean = selectedAnnotation === roiAnnotation;\n\n    // other events\n    const { uid } = roiAnnotation;\n\n    // display text\n    const displayText = [];\n\n    if (area !== undefined) {\n      displayText.push(formatArea(area));\n    } else if (length !== undefined) {\n      displayText.push(\n        shortAxisLength\n          ? `${formatLength(length, 'μm')} x ${formatLength(shortAxisLength, 'μm')}`\n          : `${formatLength(length, 'μm')}`\n      );\n    }\n\n    // convert to measurementItem format compatible with <MeasurementTable /> component\n    return {\n      uid,\n      index,\n      label,\n      isActive: isSelected,\n      displayText,\n      roiAnnotation,\n    };\n  });\n\n  return (\n    <>\n      <div\n        className=\"ohif-scrollbar overflow-y-auto overflow-x-hidden\"\n        data-cy={'measurements-panel'}\n      >\n        <MeasurementTable\n          title=\"Measurements\"\n          servicesManager={props.servicesManager}\n          data={data}\n          onClick={onMeasurementItemClickHandler}\n          onEdit={onMeasurementItemEditHandler}\n          onDelete={onMeasurementDeleteHandler}\n        />\n      </div>\n    </>\n  );\n}\n\nconst connectedMicroscopyPanel = withTranslation(['MicroscopyTable', 'Common'])(MicroscopyPanel);\n\nexport default connectedMicroscopyPanel;\n","const DCM_CODE_VALUES = {\n  IMAGING_MEASUREMENTS: '126010',\n  MEASUREMENT_GROUP: '125007',\n  IMAGE_REGION: '111030',\n  FINDING: '121071',\n  TRACKING_UNIQUE_IDENTIFIER: '112039',\n  LENGTH: '410668003',\n  AREA: '42798000',\n  SHORT_AXIS: 'G-A186',\n  LONG_AXIS: 'G-A185',\n  ELLIPSE_AREA: 'G-D7FE', // TODO: Remove this\n};\n\nexport default DCM_CODE_VALUES;\n","export default function toArray(item) {\n  return Array.isArray(item) ? item : [item];\n}\n","import dcmjs from 'dcmjs';\n\nimport DCM_CODE_VALUES from './dcmCodeValues';\nimport toArray from './toArray';\n\nconst MeasurementReport = dcmjs.adapters.DICOMMicroscopyViewer.MeasurementReport;\n\n// Define as async so that it returns a promise, expected by the ViewportGrid\nexport default async function loadSR(\n  microscopyService,\n  microscopySRDisplaySet,\n  referencedDisplaySet\n) {\n  const naturalizedDataset = microscopySRDisplaySet.metadata;\n\n  const { StudyInstanceUID, FrameOfReferenceUID } = referencedDisplaySet;\n\n  const managedViewers = microscopyService.getManagedViewersForStudy(StudyInstanceUID);\n\n  if (!managedViewers || !managedViewers.length) {\n    return;\n  }\n\n  microscopySRDisplaySet.isLoaded = true;\n\n  const { rois, labels } = await _getROIsFromToolState(microscopyService, naturalizedDataset, FrameOfReferenceUID);\n\n  const managedViewer = managedViewers[0];\n\n  for (let i = 0; i < rois.length; i++) {\n    // NOTE: When saving Microscopy SR, we are attaching identifier property\n    // to each ROI, and when read for display, it is coming in as \"TEXT\"\n    // evaluation.\n    // As the Dicom Microscopy Viewer will override styles for \"Text\" evaluations\n    // to hide all other geometries, we are going to manually remove that\n    // evaluation item.\n    const roi = rois[i];\n    const roiSymbols = Object.getOwnPropertySymbols(roi);\n    const _properties = roiSymbols.find(s => s.description === 'properties');\n    const properties = roi[_properties];\n    properties['evaluations'] = [];\n\n    managedViewer.addRoiGraphicWithLabel(roi, labels[i]);\n  }\n}\n\nasync function _getROIsFromToolState(microscopyService, naturalizedDataset, FrameOfReferenceUID) {\n  const toolState = MeasurementReport.generateToolState(naturalizedDataset);\n  const tools = Object.getOwnPropertyNames(toolState);\n  // Does a dynamic import to prevent webpack from rebuilding the library\n  const DICOMMicroscopyViewer = await microscopyService.importDicomMicroscopyViewer();\n\n  const measurementGroupContentItems = _getMeasurementGroups(naturalizedDataset);\n\n  const rois = [];\n  const labels = [];\n\n  tools.forEach(t => {\n    const toolSpecificToolState = toolState[t];\n    let scoord3d;\n\n    const capsToolType = t.toUpperCase();\n\n    const measurementGroupContentItemsForTool = measurementGroupContentItems.filter(mg => {\n      const imageRegionContentItem = toArray(mg.ContentSequence).find(\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\n      );\n\n      return imageRegionContentItem.GraphicType === capsToolType;\n    });\n\n    toolSpecificToolState.forEach((coordinates, index) => {\n      const properties = {};\n\n      const options = {\n        coordinates,\n        frameOfReferenceUID: FrameOfReferenceUID,\n      };\n\n      if (t === 'Polygon') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polygon(options);\n      } else if (t === 'Polyline') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polyline(options);\n      } else if (t === 'Point') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Point(options);\n      } else if (t === 'Ellipse') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Ellipse(options);\n      } else {\n        throw new Error('Unsupported tool type');\n      }\n\n      const measurementGroup = measurementGroupContentItemsForTool[index];\n      const findingGroup = toArray(measurementGroup.ContentSequence).find(\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.FINDING\n      );\n\n      const trackingGroup = toArray(measurementGroup.ContentSequence).find(\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER\n      );\n\n      /**\n       * Extract presentation state from tracking identifier.\n       * Currently is stored in SR but should be stored in its tags.\n       */\n      if (trackingGroup) {\n        const regExp = /\\(([^)]+)\\)/;\n        const matches = regExp.exec(trackingGroup.TextValue);\n        if (matches && matches[1]) {\n          properties.presentationState = JSON.parse(matches[1]);\n          properties.marker = properties.presentationState.marker;\n        }\n      }\n\n      let measurements = toArray(measurementGroup.ContentSequence).filter(ci =>\n        [\n          DCM_CODE_VALUES.LENGTH,\n          DCM_CODE_VALUES.AREA,\n          DCM_CODE_VALUES.SHORT_AXIS,\n          DCM_CODE_VALUES.LONG_AXIS,\n          DCM_CODE_VALUES.ELLIPSE_AREA,\n        ].includes(ci.ConceptNameCodeSequence.CodeValue)\n      );\n\n      let evaluations = toArray(measurementGroup.ContentSequence).filter(ci =>\n        [DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER].includes(ci.ConceptNameCodeSequence.CodeValue)\n      );\n\n      /**\n       * TODO: Resolve bug in DCMJS.\n       * ConceptNameCodeSequence should be a sequence with only one item.\n       */\n      evaluations = evaluations.map(evaluation => {\n        const e = { ...evaluation };\n        e.ConceptNameCodeSequence = toArray(e.ConceptNameCodeSequence);\n        return e;\n      });\n\n      /**\n       * TODO: Resolve bug in DCMJS.\n       * ConceptNameCodeSequence should be a sequence with only one item.\n       */\n      measurements = measurements.map(measurement => {\n        const m = { ...measurement };\n        m.ConceptNameCodeSequence = toArray(m.ConceptNameCodeSequence);\n        return m;\n      });\n\n      if (measurements && measurements.length) {\n        properties.measurements = measurements;\n        console.log('[SR] retrieving measurements...', measurements);\n      }\n\n      if (evaluations && evaluations.length) {\n        properties.evaluations = evaluations;\n        console.log('[SR] retrieving evaluations...', evaluations);\n      }\n\n      const roi = new DICOMMicroscopyViewer.roi.ROI({ scoord3d, properties });\n      rois.push(roi);\n\n      if (findingGroup) {\n        labels.push(findingGroup.ConceptCodeSequence.CodeValue);\n      } else {\n        labels.push('');\n      }\n    });\n  });\n\n  return { rois, labels };\n}\n\nfunction _getMeasurementGroups(naturalizedDataset) {\n  const { ContentSequence } = naturalizedDataset;\n\n  const imagingMeasurementsContentItem = ContentSequence.find(\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGING_MEASUREMENTS\n  );\n\n  const measurementGroupContentItems = toArray(\n    imagingMeasurementsContentItem.ContentSequence\n  ).filter(ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP);\n\n  return measurementGroupContentItems;\n}\n","import OHIF, { DicomMetadataStore } from '@ohif/core';\nimport loadSR from './utils/loadSR';\nimport toArray from './utils/toArray';\nimport DCM_CODE_VALUES from './utils/dcmCodeValues';\nimport getSourceDisplaySet from './utils/getSourceDisplaySet';\n\nconst { utils } = OHIF;\n\nconst SOP_CLASS_UIDS = {\n  COMPREHENSIVE_3D_SR: '1.2.840.10008.5.1.4.1.1.88.34',\n};\n\nconst SOPClassHandlerId =\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler';\n\nfunction _getReferencedFrameOfReferenceUID(naturalizedDataset) {\n  const { ContentSequence } = naturalizedDataset;\n\n  const imagingMeasurementsContentItem = ContentSequence.find(\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGING_MEASUREMENTS\n  );\n\n  const firstMeasurementGroupContentItem = toArray(\n    imagingMeasurementsContentItem.ContentSequence\n  ).find(ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP);\n\n  const imageRegionContentItem = toArray(firstMeasurementGroupContentItem.ContentSequence).find(\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\n  );\n\n  return imageRegionContentItem.ReferencedFrameOfReferenceUID;\n}\n\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  const { displaySetService, microscopyService } = servicesManager.services;\n\n  const instance = instances[0];\n\n  // TODO ! Consumption of DICOMMicroscopySRSOPClassHandler to a derived dataset or normal dataset?\n  // TODO -> Easy to swap this to a \"non-derived\" displaySet, but unfortunately need to put it in a different extension.\n  const naturalizedDataset = DicomMetadataStore.getSeries(\n    instance.StudyInstanceUID,\n    instance.SeriesInstanceUID\n  ).instances[0];\n  const ReferencedFrameOfReferenceUID = _getReferencedFrameOfReferenceUID(naturalizedDataset);\n\n  const {\n    FrameOfReferenceUID,\n    SeriesDescription,\n    ContentDate,\n    ContentTime,\n    SeriesNumber,\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SOPClassUID,\n  } = instance;\n\n  const displaySet = {\n    plugin: 'microscopy',\n    Modality: 'SR',\n    altImageText: 'Microscopy SR',\n    displaySetInstanceUID: utils.guid(),\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    ReferencedFrameOfReferenceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    SeriesDescription,\n    // Map the content date/time to the series date/time, these are only used for filtering.\n    SeriesDate: ContentDate,\n    SeriesTime: ContentTime,\n    SeriesNumber,\n    instance,\n    metadata: naturalizedDataset,\n    isDerived: true,\n    isLoading: false,\n    isLoaded: false,\n    loadError: false,\n  };\n\n  displaySet.load = function (referencedDisplaySet) {\n    return loadSR(microscopyService, displaySet, referencedDisplaySet).catch(error => {\n      displaySet.isLoaded = false;\n      displaySet.loadError = true;\n      throw new Error(error);\n    });\n  };\n\n  displaySet.getSourceDisplaySet = function () {\n    let allDisplaySets = [];\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\n    studyMetadata.series.forEach(series => {\n      const displaySets = displaySetService.getDisplaySetsForSeries(series.SeriesInstanceUID);\n      allDisplaySets = allDisplaySets.concat(displaySets);\n    });\n    return getSourceDisplaySet(allDisplaySets, displaySet);\n  };\n\n  return [displaySet];\n}\n\nexport default function getDicomMicroscopySRSopClassHandler({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return {\n    name: 'DicomMicroscopySRSopClassHandler',\n    sopClassUids: [SOP_CLASS_UIDS.COMPREHENSIVE_3D_SR],\n    getDisplaySetsFromSeries,\n  };\n}\n","/**\n * Get referenced SM displaySet from SR displaySet\n *\n * @param {*} allDisplaySets\n * @param {*} microscopySRDisplaySet\n * @returns\n */\nexport default function getSourceDisplaySet(allDisplaySets, microscopySRDisplaySet) {\n  const { ReferencedFrameOfReferenceUID } = microscopySRDisplaySet;\n\n  const otherDisplaySets = allDisplaySets.filter(\n    ds => ds.displaySetInstanceUID !== microscopySRDisplaySet.displaySetInstanceUID\n  );\n  const referencedDisplaySet = otherDisplaySets.find(\n    displaySet =>\n      displaySet.Modality === 'SM' &&\n      (displaySet.FrameOfReferenceUID === ReferencedFrameOfReferenceUID ||\n        // sometimes each depth instance has the different FrameOfReferenceID\n        displaySet.othersFrameOfReferenceUID.includes(ReferencedFrameOfReferenceUID))\n  );\n\n  if (!referencedDisplaySet && otherDisplaySets.length >= 1) {\n    console.warn(\n      'No display set with FrameOfReferenceUID',\n      ReferencedFrameOfReferenceUID,\n      'single series, assuming data error, defaulting to only series.'\n    );\n    return otherDisplaySets.find(displaySet => displaySet.Modality === 'SM');\n  }\n\n  return referencedDisplaySet;\n}\n","import { id } from './id';\nimport React, { Suspense, useMemo } from 'react';\nimport getPanelModule from './getPanelModule';\nimport getCommandsModule from './getCommandsModule';\nimport { Types } from '@ohif/core';\n\nimport { useViewportGrid } from '@ohif/ui';\nimport getDicomMicroscopySRSopClassHandler from './DicomMicroscopySRSopClassHandler';\nimport MicroscopyService from './services/MicroscopyService';\nimport { useResizeDetector } from 'react-resize-detector';\nimport debounce from 'lodash.debounce';\n\nconst Component = React.lazy(() => {\n  return import('./DicomMicroscopyViewport');\n});\n\nconst MicroscopyViewport = props => {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension: Types.Extensions.Extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n\n  async preRegistration({ servicesManager }) {\n    servicesManager.registerService(MicroscopyService.REGISTRATION(servicesManager));\n  },\n\n  /**\n   * ViewportModule should provide a list of viewports that will be available in OHIF\n   * for Modes to consume and use in the viewports. Each viewport is defined by\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\n   * that is provided by the Cornerstone extension in OHIF.\n   */\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n\n    /**\n     *\n     * @param props {*}\n     * @param props.displaySets\n     * @param props.viewportId\n     * @param props.viewportLabel\n     * @param props.dataSource\n     * @param props.viewportOptions\n     * @param props.displaySetOptions\n     * @returns\n     */\n    const ExtendedMicroscopyViewport = props => {\n      const { viewportOptions } = props;\n\n      const [viewportGrid, viewportGridService] = useViewportGrid();\n      const { activeViewportId } = viewportGrid;\n\n      const displaySetsKey = useMemo(() => {\n        return props.displaySets.map(ds => ds.displaySetInstanceUID).join('-');\n      }, [props.displaySets]);\n\n      const onResize = debounce(() => {\n        const { microscopyService } = servicesManager.services;\n        const managedViewer = microscopyService.getAllManagedViewers();\n\n        if (managedViewer && managedViewer.length > 0) {\n          managedViewer[0].viewer.resize();\n        }\n      }, 100);\n\n      const { ref: resizeRef } = useResizeDetector({\n        onResize,\n        handleHeight: true,\n        handleWidth: true,\n      });\n\n      return (\n        <MicroscopyViewport\n          key={displaySetsKey}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          activeViewportId={activeViewportId}\n          setViewportActive={(viewportId: string) => {\n            viewportGridService.setActiveViewportId(viewportId);\n          }}\n          viewportData={viewportOptions}\n          resizeRef={resizeRef}\n          {...props}\n        />\n      );\n    };\n\n    return [\n      {\n        name: 'microscopy-dicom',\n        component: ExtendedMicroscopyViewport,\n      },\n    ];\n  },\n\n  getToolbarModule({ servicesManager }) {\n    return [\n      {\n        name: 'evaluate.microscopyTool',\n        evaluate: ({ button }) => {\n          const { microscopyService } = servicesManager.services;\n\n          const activeInteractions = microscopyService.getActiveInteractions();\n          if (!activeInteractions) {\n            return false;\n          }\n          const isPrimaryActive = activeInteractions.find(interactions => {\n            const sameMouseButton = interactions[1].bindings.mouseButtons.includes('left');\n\n            if (!sameMouseButton) {\n              return false;\n            }\n\n            const notDraw = interactions[0] !== 'draw';\n\n            // there seems to be a custom logic for draw tool for some reason\n            return notDraw\n              ? interactions[0] === button.id\n              : interactions[1].geometryType === button.id;\n          });\n\n          return {\n            disabled: false,\n            className: isPrimaryActive\n              ? '!text-black bg-primary-light'\n              : '!text-common-bright hover:!bg-primary-dark hover:!text-primary-light',\n            // Todo: isActive right now is used for nested buttons where the primary\n            // button needs to be fully rounded (vs partial rounded) when active\n            // otherwise it does not have any other use\n            isActive: isPrimaryActive,\n          };\n        },\n      },\n    ];\n  },\n\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule(params) {\n    return [getDicomMicroscopySRSopClassHandler(params)];\n  },\n\n  getPanelModule,\n\n  getCommandsModule,\n};\n\nexport default extension;\n","import React from 'react';\nimport type { Types } from '@ohif/core';\nimport { useViewportGrid } from '@ohif/ui';\nimport MicroscopyPanel from './components/MicroscopyPanel/MicroscopyPanel';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\n\nexport default function getPanelModule({\n  commandsManager,\n  extensionManager,\n  servicesManager,\n}: Types.Extensions.ExtensionParams) {\n  const wrappedMeasurementPanel = ({}) => {\n    const [{ activeViewportId, viewports }] = useViewportGrid();\n\n    return (\n      <MicroscopyPanel\n        viewports={viewports}\n        activeViewportId={activeViewportId}\n        onSaveComplete={() => {}}\n        onRejectComplete={() => {}}\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n      />\n    );\n  };\n\n  return [\n    {\n      name: 'measure',\n      iconName: 'tab-linear',\n      iconLabel: 'Measure',\n      label: 'Measurements',\n      secondaryLabel: 'Measurements',\n      component: wrappedMeasurementPanel,\n    },\n  ];\n}\n","import { CommandsManager, ExtensionManager } from '@ohif/core';\nimport { callInputDialog } from '@ohif/extension-default';\nimport styles from './utils/styles';\n\nexport default function getCommandsModule({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n}: {\n  servicesManager: AppTypes.ServicesManager;\n  commandsManager: CommandsManager;\n  extensionManager: ExtensionManager;\n}) {\n  const { viewportGridService, uiDialogService, microscopyService } = servicesManager.services;\n\n  const actions = {\n    // Measurement tool commands:\n    deleteMeasurement: ({ uid }) => {\n      if (uid) {\n        const roiAnnotation = microscopyService.getAnnotation(uid);\n        if (roiAnnotation) {\n          microscopyService.removeAnnotation(roiAnnotation);\n        }\n      }\n    },\n\n    setLabel: ({ uid }) => {\n      const roiAnnotation = microscopyService.getAnnotation(uid);\n      callInputDialog({\n        uiDialogService,\n        defaultValue: '',\n        callback: (value: string, action: string) => {\n          switch (action) {\n            case 'save': {\n              roiAnnotation.setLabel(value);\n              microscopyService.triggerRelabel(roiAnnotation);\n            }\n          }\n        },\n      });\n    },\n\n    setToolActive: ({ toolName, toolGroupId = 'MICROSCOPY' }) => {\n      const dragPanOnMiddle = [\n        'dragPan',\n        {\n          bindings: {\n            mouseButtons: ['middle'],\n          },\n        },\n      ];\n      const dragZoomOnRight = [\n        'dragZoom',\n        {\n          bindings: {\n            mouseButtons: ['right'],\n          },\n        },\n      ];\n      if (\n        ['line', 'box', 'circle', 'point', 'polygon', 'freehandpolygon', 'freehandline'].indexOf(\n          toolName\n        ) >= 0\n      ) {\n        // TODO: read from configuration\n        const options = {\n          geometryType: toolName,\n          vertexEnabled: true,\n          styleOptions: styles.default,\n          bindings: {\n            mouseButtons: ['left'],\n          },\n        } as any;\n        if ('line' === toolName) {\n          options.minPoints = 2;\n          options.maxPoints = 2;\n        } else if ('point' === toolName) {\n          delete options.styleOptions;\n          delete options.vertexEnabled;\n        }\n\n        microscopyService.activateInteractions([\n          ['draw', options],\n          dragPanOnMiddle,\n          dragZoomOnRight,\n        ]);\n      } else if (toolName == 'dragPan') {\n        microscopyService.activateInteractions([\n          [\n            'dragPan',\n            {\n              bindings: {\n                mouseButtons: ['left', 'middle'],\n              },\n            },\n          ],\n          dragZoomOnRight,\n        ]);\n      } else {\n        microscopyService.activateInteractions([\n          [\n            toolName,\n            {\n              bindings: {\n                mouseButtons: ['left'],\n              },\n            },\n          ],\n          dragPanOnMiddle,\n          dragZoomOnRight,\n        ]);\n      }\n    },\n    toggleOverlays: () => {\n      // overlay\n      const overlays = document.getElementsByClassName('microscopy-viewport-overlay');\n      let onoff = false; // true if this will toggle on\n      for (let i = 0; i < overlays.length; i++) {\n        if (i === 0) {\n          onoff = overlays.item(0).classList.contains('hidden');\n        }\n        overlays.item(i).classList.toggle('hidden');\n      }\n\n      // overview\n      const { activeViewportId } = viewportGridService.getState();\n      microscopyService.toggleOverviewMap(activeViewportId);\n    },\n    toggleAnnotations: () => {\n      microscopyService.toggleROIsVisibility();\n    },\n  };\n\n  const definitions = {\n    deleteMeasurement: {\n      commandFn: actions.deleteMeasurement,\n    },\n    setLabel: {\n      commandFn: actions.setLabel,\n    },\n    setToolActive: {\n      commandFn: actions.setToolActive,\n    },\n    toggleOverlays: {\n      commandFn: actions.toggleOverlays,\n    },\n    toggleAnnotations: {\n      commandFn: actions.toggleAnnotations,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'MICROSCOPY',\n  };\n}\n"],"names":["id","packageJson","coordinateFormatScoord3d2Geometry","coordinates","pyramid","transform","Array","isArray","metadata","length","orientation","ImageOrientationSlide","spacing","PixelSpacing","functionalGroup","SharedFunctionalGroupsSequence","PixelMeasuresSequence","_getPixelSpacing","origin","TotalPixelMatrixOriginSequence","offset","Number","XOffsetInSlideCoordinateSystem","YOffsetInSlideCoordinateSystem","map","c","slideCoord","pixelCoord","options","Error","point","m","mInverted","inv","vSlide","vImage","multiply","row","toFixed","mapSlideCoord2PixelCoord","defaultFill","color","emptyFill","defaultStroke","width","activeStroke","active","image","circle","fill","stroke","radius","default","ApiEvents","ROI_ADDED","ROI_MODIFIED","ROI_REMOVED","ROI_DRAWN","ROI_SELECTED","MOVE_STARTED","MOVE_ENDED","LOADING_STARTED","LOADING_ENDED","LOADING_ERROR","FRAME_LOADING_STARTED","FRAME_LOADING_ENDED","FRAME_LOADING_ERROR","EVENTS","ADDED","MODIFIED","REMOVED","UPDATED","SELECTED","ViewerManager","PubSubService","constructor","viewer","viewportId","container","studyInstanceUID","seriesInstanceUID","super","this","onRoiAdded","roiAddedHandler","bind","onRoiModified","roiModifiedHandler","onRoiRemoved","roiRemovedHandler","onRoiSelected","roiSelectedHandler","contextMenuCallback","symbols","Object","getOwnPropertySymbols","_drawingSource","find","p","description","_pyramid","_map","_affine","registerEvents","activateDefaultInteractions","addContextMenuCallback","callback","destroy","unregisterEvents","publish","key","roiGraphic","_broadcastEvent","managedViewer","addEventListener","removeEventListener","event","detail","payload","runSilently","clearRoiGraphics","removeAllROIs","showROIs","hideROIs","addRoiGraphic","addROI","styles","addRoiGraphicWithLabel","label","setROIStyle","uid","styleOptions","removeRoiGraphic","removeROI","updateROIProperties","properties","updateROI","toggleOverviewMap","document","querySelector","preventDefault","activateInteractions","bindings","mouseButtons","interactions","interactionsMap","draw","activate","modify","translate","snap","dragPan","dragZoom","select","keys","forEach","availableInteractionName","interaction","name","config","activateInteractionMethod","deactivateInteractionMethod","_getMapView","_getMap","getView","s","String","window","getViewState","view","center","getCenter","resolution","getResolution","zoom","getZoom","setViewState","viewState","setZoom","setResolution","setCenter","setViewStateByExtent","roiAnnotation","getCoordinates","_jumpToPolyline","_jumpToPolygonOrEllipse","_jumpToPoint","coord","mappedCoord","x","y","midpoint","minX","Infinity","maxX","minY","maxY","height","fit","getSize","LABEL_UPDATED","GRAPHIC_UPDATED","VIEW_UPDATED","RoiAnnotation","setMeasurements","getScoord3d","scoord3d","setRoiGraphic","type","graphicType","graphicData","point1","point2","xLength2","yLength2","Math","sqrt","areaEllipse","PI","_area","_length","undefined","areaPolygon","n","area","j","i","abs","areaOfPolygon","len","p1","p2","xLen","yLen","setLabel","finding","CodeMeaning","CodingSchemeDesignator","CodeValue","getLabel","getDetailedLabel","getLength","getArea","ANNOTATION_UPDATED","ANNOTATION_SELECTED","ANNOTATION_REMOVED","RELABEL","DELETE","MicroscopyService","servicesManager","extensionManager","managedViewers","Set","roiUids","annotations","selectedAnnotation","pendingFocus","peerImport","appConfig","_onRoiAdded","_onRoiModified","_onRoiRemoved","_onRoiUpdated","_onRoiSelected","isROIsVisible","clear","clearAnnotations","removeAnnotation","importDicomMicroscopyViewer","data","add","subscribe","AnnotationEvents","onRelabel","item","triggerRelabel","getAnnotation","delete","synchronizeViewers","getSelectedAnnotation","clearSelection","_addManagedViewerSubscriptions","_roiAddedSubscription","ViewerEvents","_roiModifiedSubscription","_roiRemovedSubscription","_roiUpdatedSubscription","_roiSelectedSubscription","_removeManagedViewerSubscriptions","unsubscribe","_getManagedViewersForSeries","from","filter","getManagedViewersForStudy","_restoreAnnotations","getAnnotationsForSeries","addViewer","_manager","focusAnnotation","_potentiallyLoadSR","StudyInstanceUID","displaySets","studyMetadata","DicomMetadataStore","getStudy","smDisplaySet","ds","Modality","FrameOfReferenceUID","othersFrameOfReferenceUID","derivedDisplaySets","ReferencedFrameOfReferenceUID","includes","some","isLoaded","recentDateTime","recentDisplaySet","dateTime","SeriesDate","SeriesTime","isLoading","load","removeViewer","toggleROIsVisibility","mv","getAnnotations","push","getAnnotationsForStudy","a","annotation","selectAnnotation","baseManagedViewer","activeInteractions","getActiveInteractions","newAnnotation","deleteCallback","successCallback","triggerDelete","getAllManagedViewers","_MicroscopyService","REGISTRATION","altName","create","props","datasetToBuffer","dcmjs","formatLength","unit","mult","connectedMicroscopyPanel","withTranslation","microscopyService","services","setStudyInstanceUID","useState","roiAnnotations","setRoiAnnotations","setSelectedAnnotation","uiDialogService","displaySetService","useEffect","viewport","viewports","get","activeViewportId","displaySetInstanceUIDs","displaySet","getDisplaySetByUID","onAnnotationUpdated","onAnnotationSelected","unsubscribeAnnotationUpdated","MicroscopyEvents","unsubscribeAnnotationSelected","unsubscribeAnnotationRemoved","onAnnotationRemoved","index","shortAxisLength","isSelected","displayText","formatArea","isActive","React","className","MeasurementTable","title","onClick","onMeasurementItemClickHandler","onEdit","onMeasurementItemEditHandler","commandsManager","runCommand","onDelete","onMeasurementDeleteHandler","IMAGING_MEASUREMENTS","MEASUREMENT_GROUP","IMAGE_REGION","FINDING","TRACKING_UNIQUE_IDENTIFIER","LENGTH","AREA","SHORT_AXIS","LONG_AXIS","ELLIPSE_AREA","toArray","MeasurementReport","DICOMMicroscopyViewer","async","loadSR","microscopySRDisplaySet","referencedDisplaySet","naturalizedDataset","rois","labels","toolState","generateToolState","tools","getOwnPropertyNames","measurementGroupContentItems","ContentSequence","ci","ConceptNameCodeSequence","DCM_CODE_VALUES","_getMeasurementGroups","t","toolSpecificToolState","capsToolType","toUpperCase","measurementGroupContentItemsForTool","mg","GraphicType","frameOfReferenceUID","Polygon","Polyline","Point","Ellipse","measurementGroup","findingGroup","trackingGroup","matches","exec","TextValue","presentationState","JSON","parse","marker","measurements","evaluations","evaluation","e","measurement","console","log","roi","ROI","ConceptCodeSequence","_getROIsFromToolState","utils","OHIF","SOP_CLASS_UIDS","SOPClassHandlerId","_getDisplaySetsFromSeries","instances","instance","getSeries","SeriesInstanceUID","firstMeasurementGroupContentItem","_getReferencedFrameOfReferenceUID","SeriesDescription","ContentDate","ContentTime","SeriesNumber","SOPInstanceUID","SOPClassUID","plugin","altImageText","displaySetInstanceUID","guid","isDerived","loadError","catch","error","getSourceDisplaySet","allDisplaySets","series","getDisplaySetsForSeries","concat","otherDisplaySets","warn","getDicomMicroscopySRSopClassHandler","sopClassUids","getDisplaySetsFromSeries","Component","MicroscopyViewport","Suspense","fallback","extension","preRegistration","registerService","getViewportModule","component","viewportOptions","viewportGrid","viewportGridService","useViewportGrid","displaySetsKey","useMemo","join","onResize","debounce","resize","ref","resizeRef","useResizeDetector","handleHeight","handleWidth","_extends","setViewportActive","setActiveViewportId","viewportData","getToolbarModule","evaluate","button","isPrimaryActive","geometryType","disabled","getSopClassHandlerModule","params","getPanelModule","iconName","iconLabel","secondaryLabel","wrappedMeasurementPanel","MicroscopyPanel","onSaveComplete","onRejectComplete","getCommandsModule","actions","deleteMeasurement","callInputDialog","defaultValue","value","action","setToolActive","toolName","toolGroupId","dragPanOnMiddle","dragZoomOnRight","indexOf","vertexEnabled","minPoints","maxPoints","toggleOverlays","overlays","getElementsByClassName","onoff","classList","contains","toggle","getState","toggleAnnotations","definitions","commandFn","defaultContext"],"sourceRoot":""}