{"version":3,"file":"5687.bundle.c5a7d2facc03d353e983.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-sr/src/enums.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/getRenderableData.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/tools/toolNames.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/addSRAnnotation.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/isRehydratable.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/id.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/getFilteredCornerstoneToolState.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/tools/DICOMSRDisplayTool.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/tools/SCOORD3DPointTool.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/SRSCOOR3DProbeMapper.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/addToolInstance.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/init.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-sr/src/onModeEnter.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/tools/modules/dicomSRModule.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/createReferencedImageDisplaySet.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/getLabelFromDCMJSImportedToolData.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/hydrateStructuredReport.ts"],"sourcesContent":["import { adaptersSR } from '@cornerstonejs/adapters';\n\nconst { CodeScheme: Cornerstone3DCodeScheme } = adaptersSR.Cornerstone3D;\n\nexport const SCOORDTypes = {\n  POINT: 'POINT',\n  MULTIPOINT: 'MULTIPOINT',\n  POLYLINE: 'POLYLINE',\n  CIRCLE: 'CIRCLE',\n  ELLIPSE: 'ELLIPSE',\n};\n\nexport const CodeNameCodeSequenceValues = {\n  ImagingMeasurementReport: '126000',\n  ImageLibrary: '111028',\n  ImagingMeasurements: '126010',\n  MeasurementGroup: '125007',\n  ImageLibraryGroup: '126200',\n  TrackingUniqueIdentifier: '112040',\n  TrackingIdentifier: '112039',\n  Finding: '121071',\n  FindingSite: 'G-C0E3', // SRT\n  FindingSiteSCT: '363698007', // SCT\n};\n\nexport const CodingSchemeDesignators = {\n  SRT: 'SRT',\n  SCT: 'SCT',\n  CornerstoneCodeSchemes: [Cornerstone3DCodeScheme.CodingSchemeDesignator, 'CST4'],\n};\n\nexport const RelationshipType = {\n  INFERRED_FROM: 'INFERRED FROM',\n  CONTAINS: 'CONTAINS',\n};\n\nconst enums = {\n  CodeNameCodeSequenceValues,\n  CodingSchemeDesignators,\n  RelationshipType,\n  SCOORDTypes,\n};\n\nexport default enums;\n","import { vec3 } from 'gl-matrix';\nimport { metaData, utilities, Types as csTypes } from '@cornerstonejs/core';\n\nimport { SCOORDTypes } from '../enums';\n\nconst EPSILON = 1e-4;\n\nconst getRenderableCoords = ({ GraphicData, ValueType, imageId }) => {\n  const renderableData = [];\n  if (ValueType === 'SCOORD3D') {\n    for (let i = 0; i < GraphicData.length; i += 3) {\n      renderableData.push([GraphicData[i], GraphicData[i + 1], GraphicData[i + 2]]);\n    }\n  } else {\n    for (let i = 0; i < GraphicData.length; i += 2) {\n      const worldPos = utilities.imageToWorldCoords(imageId, [GraphicData[i], GraphicData[i + 1]]);\n      renderableData.push(worldPos);\n    }\n  }\n  return renderableData;\n};\n\nfunction getRenderableData({ GraphicType, GraphicData, ValueType, imageId }) {\n  let renderableData = [];\n\n  switch (GraphicType) {\n    case SCOORDTypes.POINT:\n    case SCOORDTypes.MULTIPOINT:\n    case SCOORDTypes.POLYLINE: {\n      renderableData = getRenderableCoords({ GraphicData, ValueType, imageId });\n      break;\n    }\n    case SCOORDTypes.CIRCLE: {\n      const pointsWorld: csTypes.Point3[] = getRenderableCoords({\n        GraphicData,\n        ValueType,\n        imageId,\n      });\n      // We do not have an explicit draw circle svg helper in Cornerstone3D at\n      // this time, but we can use the ellipse svg helper to draw a circle, so\n      // here we reshape the data for that purpose.\n      const center = pointsWorld[0];\n      const onPerimeter = pointsWorld[1];\n      const radius = vec3.distance(center, onPerimeter);\n\n      const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n      if (!imagePlaneModule) {\n        throw new Error('No imagePlaneModule found');\n      }\n\n      const {\n        columnCosines,\n        rowCosines,\n      }: {\n        columnCosines: csTypes.Point3;\n        rowCosines: csTypes.Point3;\n      } = imagePlaneModule;\n\n      // we need to get major/minor axis (which are both the same size major = minor)\n\n      const firstAxisStart = vec3.create();\n      vec3.scaleAndAdd(firstAxisStart, center, columnCosines, radius);\n\n      const firstAxisEnd = vec3.create();\n      vec3.scaleAndAdd(firstAxisEnd, center, columnCosines, -radius);\n\n      const secondAxisStart = vec3.create();\n      vec3.scaleAndAdd(secondAxisStart, center, rowCosines, radius);\n\n      const secondAxisEnd = vec3.create();\n      vec3.scaleAndAdd(secondAxisEnd, center, rowCosines, -radius);\n\n      renderableData = [\n        firstAxisStart as csTypes.Point3,\n        firstAxisEnd as csTypes.Point3,\n        secondAxisStart as csTypes.Point3,\n        secondAxisEnd as csTypes.Point3,\n      ];\n\n      break;\n    }\n    case SCOORDTypes.ELLIPSE: {\n      // GraphicData is ordered as [majorAxisStartX, majorAxisStartY, majorAxisEndX, majorAxisEndY, minorAxisStartX, minorAxisStartY, minorAxisEndX, minorAxisEndY]\n      // But Cornerstone3D points are ordered as top, bottom, left, right for the\n      // ellipse so we need to identify if the majorAxis is horizontal or vertical\n      // and then choose the correct points to use for the ellipse.\n      const pointsWorld: csTypes.Point3[] = getRenderableCoords({\n        GraphicData,\n        ValueType,\n        imageId,\n      });\n\n      const majorAxisStart = vec3.fromValues(...pointsWorld[0]);\n      const majorAxisEnd = vec3.fromValues(...pointsWorld[1]);\n      const minorAxisStart = vec3.fromValues(...pointsWorld[2]);\n      const minorAxisEnd = vec3.fromValues(...pointsWorld[3]);\n\n      const majorAxisVec = vec3.create();\n      vec3.sub(majorAxisVec, majorAxisEnd, majorAxisStart);\n\n      // normalize majorAxisVec to avoid scaling issues\n      vec3.normalize(majorAxisVec, majorAxisVec);\n\n      const minorAxisVec = vec3.create();\n      vec3.sub(minorAxisVec, minorAxisEnd, minorAxisStart);\n      vec3.normalize(minorAxisVec, minorAxisVec);\n\n      const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n\n      if (!imagePlaneModule) {\n        throw new Error('imageId does not have imagePlaneModule metadata');\n      }\n\n      const { columnCosines }: { columnCosines: csTypes.Point3 } = imagePlaneModule;\n\n      // find which axis is parallel to the columnCosines\n      const columnCosinesVec = vec3.fromValues(...columnCosines);\n\n      const projectedMajorAxisOnColVec = Math.abs(vec3.dot(columnCosinesVec, majorAxisVec));\n      const projectedMinorAxisOnColVec = Math.abs(vec3.dot(columnCosinesVec, minorAxisVec));\n\n      const absoluteOfMajorDotProduct = Math.abs(projectedMajorAxisOnColVec);\n      const absoluteOfMinorDotProduct = Math.abs(projectedMinorAxisOnColVec);\n\n      renderableData = [];\n      if (Math.abs(absoluteOfMajorDotProduct - 1) < EPSILON) {\n        renderableData = [pointsWorld[0], pointsWorld[1], pointsWorld[2], pointsWorld[3]];\n      } else if (Math.abs(absoluteOfMinorDotProduct - 1) < EPSILON) {\n        renderableData = [pointsWorld[2], pointsWorld[3], pointsWorld[0], pointsWorld[1]];\n      } else {\n        console.warn('OBLIQUE ELLIPSE NOT YET SUPPORTED');\n      }\n      break;\n    }\n    default:\n      console.warn('Unsupported GraphicType:', GraphicType);\n  }\n\n  return renderableData;\n}\n\nexport default getRenderableData;\n","const toolNames = {\n  DICOMSRDisplay: 'DICOMSRDisplay',\n  SRLength: 'SRLength',\n  SRBidirectional: 'SRBidirectional',\n  SREllipticalROI: 'SREllipticalROI',\n  SRCircleROI: 'SRCircleROI',\n  SRArrowAnnotate: 'SRArrowAnnotate',\n  SRAngle: 'SRAngle',\n  SRCobbAngle: 'SRCobbAngle',\n  SRRectangleROI: 'SRRectangleROI',\n  SRPlanarFreehandROI: 'SRPlanarFreehandROI',\n  SRSCOORD3DPoint: 'SRSCOORD3DPoint',\n};\n\nexport default toolNames;\n","import { Types, annotation } from '@cornerstonejs/tools';\nimport { metaData } from '@cornerstonejs/core';\n\nimport getRenderableData from './getRenderableData';\nimport toolNames from '../tools/toolNames';\n\nexport default function addSRAnnotation(measurement, imageId, frameNumber) {\n  let toolName = toolNames.DICOMSRDisplay;\n  const renderableData = measurement.coords.reduce((acc, coordProps) => {\n    acc[coordProps.GraphicType] = acc[coordProps.GraphicType] || [];\n    acc[coordProps.GraphicType].push(getRenderableData({ ...coordProps, imageId }));\n    return acc;\n  }, {});\n\n  const { TrackingUniqueIdentifier } = measurement;\n  const { ValueType: valueType, GraphicType: graphicType } = measurement.coords[0];\n  const graphicTypePoints = renderableData[graphicType];\n\n  /** TODO: Read the tool name from the DICOM SR identification type in the future. */\n  let frameOfReferenceUID = null;\n\n  if (imageId) {\n    const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n    frameOfReferenceUID = imagePlaneModule?.frameOfReferenceUID;\n  }\n\n  if (valueType === 'SCOORD3D') {\n    toolName = toolNames.SRSCOORD3DPoint;\n\n    // get the ReferencedFrameOfReferenceUID from the measurement\n    frameOfReferenceUID = measurement.coords[0].ReferencedFrameOfReferenceSequence;\n  }\n\n  const SRAnnotation: Types.Annotation = {\n    annotationUID: TrackingUniqueIdentifier,\n    highlighted: false,\n    isLocked: false,\n    invalidated: false,\n    metadata: {\n      toolName,\n      valueType,\n      graphicType,\n      FrameOfReferenceUID: frameOfReferenceUID,\n      referencedImageId: imageId,\n    },\n    data: {\n      label: measurement.labels?.[0]?.value || undefined,\n      displayText: measurement.displayText || undefined,\n      handles: {\n        textBox: measurement.textBox ?? {},\n        points: graphicTypePoints[0],\n      },\n      cachedStats: {},\n      frameNumber,\n      renderableData,\n      TrackingUniqueIdentifier,\n      labels: measurement.labels,\n    },\n  };\n\n  /**\n   * const annotationManager = annotation.annotationState.getAnnotationManager();\n   * was not triggering annotation_added events.\n   */\n  annotation.state.addAnnotation(SRAnnotation);\n  console.debug('Adding SR annotation:', SRAnnotation);\n}\n","import { adaptersSR } from '@cornerstonejs/adapters';\n\nconst cornerstoneAdapters =\n  adaptersSR.Cornerstone3D.MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;\n\nconst supportedLegacyCornerstoneTags = ['cornerstoneTools@^4.0.0'];\nconst CORNERSTONE_3D_TAG = adaptersSR.Cornerstone3D.CORNERSTONE_3D_TAG;\n\n/**\n * Checks if the given `displaySet`can be rehydrated into the `measurementService`.\n *\n * @param {object} displaySet The SR `displaySet` to check.\n * @param {object[]} mappings The CornerstoneTools 4 mappings to the `measurementService`.\n * @returns {boolean} True if the SR can be rehydrated into the `measurementService`.\n */\nexport default function isRehydratable(displaySet, mappings) {\n  if (!mappings || !mappings.length) {\n    return false;\n  }\n\n  const mappingDefinitions = mappings.map(m => m.annotationType);\n  const { measurements } = displaySet;\n\n  const adapterKeys = Object.keys(cornerstoneAdapters).filter(\n    adapterKey =>\n      typeof cornerstoneAdapters[adapterKey].isValidCornerstoneTrackingIdentifier === 'function'\n  );\n\n  const adapters = [];\n\n  adapterKeys.forEach(key => {\n    if (mappingDefinitions.includes(key)) {\n      // Must have both a dcmjs adapter and a measurementService\n      // Definition in order to be a candidate for import.\n      adapters.push(cornerstoneAdapters[key]);\n    }\n  });\n\n  for (let i = 0; i < measurements.length; i++) {\n    const { TrackingIdentifier } = measurements[i] || {};\n    const hydratable = adapters.some(adapter => {\n      let [cornerstoneTag, toolName] = TrackingIdentifier.split(':');\n      if (supportedLegacyCornerstoneTags.includes(cornerstoneTag)) {\n        cornerstoneTag = CORNERSTONE_3D_TAG;\n      }\n\n      const mappedTrackingIdentifier = `${cornerstoneTag}:${toolName}`;\n\n      return adapter.isValidCornerstoneTrackingIdentifier(mappedTrackingIdentifier);\n    });\n\n    if (hydratable) {\n      return true;\n    }\n    console.log('Measurement is not rehydratable', TrackingIdentifier, measurements[i]);\n  }\n\n  console.log('No measurements found which were rehydratable');\n  return false;\n}\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nconst SOPClassHandlerName = 'dicom-sr';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nconst SOPClassHandlerName3D = 'dicom-sr-3d';\nconst SOPClassHandlerId3D = `${id}.sopClassHandlerModule.${SOPClassHandlerName3D}`;\n\nexport { SOPClassHandlerName, SOPClassHandlerId, SOPClassHandlerName3D, SOPClassHandlerId3D, id };\n","import { utils, classes, DisplaySetService, Types } from '@ohif/core';\nimport { Enums as CSExtensionEnums } from '@ohif/extension-cornerstone';\nimport { adaptersSR } from '@cornerstonejs/adapters';\n\nimport addSRAnnotation from './utils/addSRAnnotation';\nimport isRehydratable from './utils/isRehydratable';\nimport {\n  SOPClassHandlerName,\n  SOPClassHandlerId,\n  SOPClassHandlerId3D,\n  SOPClassHandlerName3D,\n} from './id';\nimport { CodeNameCodeSequenceValues, CodingSchemeDesignators } from './enums';\n\nconst { sopClassDictionary } = utils;\nconst { CORNERSTONE_3D_TOOLS_SOURCE_NAME, CORNERSTONE_3D_TOOLS_SOURCE_VERSION } = CSExtensionEnums;\nconst { ImageSet, MetadataProvider: metadataProvider } = classes;\nconst { CodeScheme: Cornerstone3DCodeScheme } = adaptersSR.Cornerstone3D;\n\ntype InstanceMetadata = Types.InstanceMetadata;\n\n/**\n * TODO\n * - [ ] Add SR thumbnail\n * - [ ] Make viewport\n * - [ ] Get stacks from referenced displayInstanceUID and load into wrapped CornerStone viewport\n */\n\nconst sopClassUids = [\n  sopClassDictionary.BasicTextSR,\n  sopClassDictionary.EnhancedSR,\n  sopClassDictionary.ComprehensiveSR,\n];\n\nconst validateSameStudyUID = (uid: string, instances): void => {\n  instances.forEach(it => {\n    if (it.StudyInstanceUID !== uid) {\n      console.warn('Not all instances have the same UID', uid, it);\n      throw new Error(`Instances ${it.SOPInstanceUID} does not belong to ${uid}`);\n    }\n  });\n};\n\n/**\n * Adds instances to the DICOM SR series, rather than creating a new\n * series, so that as SR's are saved, they append to the series, and the\n * key image display set gets updated as well, containing just the new series.\n * @param instances is a list of instances from THIS series that are not\n *     in this DICOM SR Display Set already.\n */\nfunction addInstances(instances: InstanceMetadata[], displaySetService: DisplaySetService) {\n  this.instances.push(...instances);\n  utils.sortStudyInstances(this.instances);\n  // The last instance is the newest one, so is the one most interesting.\n  // Eventually, the SR viewer should have the ability to choose which SR\n  // gets loaded, and to navigate among them.\n  this.instance = this.instances[this.instances.length - 1];\n  this.isLoaded = false;\n  return this;\n}\n\n/**\n * DICOM SR SOP Class Handler\n * For all referenced images in the TID 1500/300 sections, add an image to the\n * display.\n * @param instances is a set of instances all from the same series\n * @param servicesManager is the services that can be used for creating\n * @returns The list of display sets created for the given instances object\n */\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager\n) {\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  utils.sortStudyInstances(instances);\n  // The last instance is the newest one, so is the one most interesting.\n  // Eventually, the SR viewer should have the ability to choose which SR\n  // gets loaded, and to navigate among them.\n  const instance = instances[instances.length - 1];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    ConceptNameCodeSequence,\n    SOPClassUID,\n  } = instance;\n  validateSameStudyUID(instance.StudyInstanceUID, instances);\n\n  const is3DSR = SOPClassUID === sopClassDictionary.Comprehensive3DSR;\n\n  const isImagingMeasurementReport =\n    ConceptNameCodeSequence?.CodeValue === CodeNameCodeSequenceValues.ImagingMeasurementReport;\n\n  const displaySet = {\n    Modality: 'SR',\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId: is3DSR ? SOPClassHandlerId3D : SOPClassHandlerId,\n    SOPClassUID,\n    instances,\n    referencedImages: null,\n    measurements: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isImagingMeasurementReport,\n    sopClassUids,\n    instance,\n    addInstances,\n  };\n\n  displaySet.load = () => _load(displaySet, servicesManager, extensionManager);\n\n  return [displaySet];\n}\n\n/**\n * Loads the display set with the given services and extension manager.\n * @param srDisplaySet - The display set to load.\n * @param servicesManager - The services manager containing displaySetService and measurementService.\n * @param extensionManager - The extension manager containing data sources.\n */\nasync function _load(\n  srDisplaySet: Types.DisplaySet,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager: AppTypes.ExtensionManager\n) {\n  const { displaySetService, measurementService } = servicesManager.services;\n  const dataSources = extensionManager.getDataSources();\n  const dataSource = dataSources[0];\n  const { ContentSequence } = srDisplaySet.instance;\n\n  async function retrieveBulkData(obj, parentObj = null, key = null) {\n    for (const prop in obj) {\n      if (typeof obj[prop] === 'object' && obj[prop] !== null) {\n        await retrieveBulkData(obj[prop], obj, prop);\n      } else if (Array.isArray(obj[prop])) {\n        await Promise.all(obj[prop].map(item => retrieveBulkData(item, obj, prop)));\n      } else if (prop === 'BulkDataURI') {\n        const value = await dataSource.retrieve.bulkDataURI({\n          BulkDataURI: obj[prop],\n          StudyInstanceUID: srDisplaySet.instance.StudyInstanceUID,\n          SeriesInstanceUID: srDisplaySet.instance.SeriesInstanceUID,\n          SOPInstanceUID: srDisplaySet.instance.SOPInstanceUID,\n        });\n        if (parentObj && key) {\n          parentObj[key] = new Float32Array(value);\n        }\n      }\n    }\n  }\n\n  if (srDisplaySet.isLoaded !== true) {\n    await retrieveBulkData(ContentSequence);\n  }\n\n  if (srDisplaySet.isImagingMeasurementReport) {\n    srDisplaySet.referencedImages = _getReferencedImagesList(ContentSequence);\n    srDisplaySet.measurements = _getMeasurements(ContentSequence);\n  } else {\n    srDisplaySet.referencedImages = [];\n    srDisplaySet.measurements = [];\n  }\n\n  const mappings = measurementService.getSourceMappings(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  srDisplaySet.isHydrated = false;\n  srDisplaySet.isRehydratable = isRehydratable(srDisplaySet, mappings);\n  srDisplaySet.isLoaded = true;\n\n  /** Check currently added displaySets and add measurements if the sources exist */\n  displaySetService.activeDisplaySets.forEach(activeDisplaySet => {\n    _checkIfCanAddMeasurementsToDisplaySet(\n      srDisplaySet,\n      activeDisplaySet,\n      dataSource,\n      servicesManager\n    );\n  });\n\n  /** Subscribe to new displaySets as the source may come in after */\n  displaySetService.subscribe(displaySetService.EVENTS.DISPLAY_SETS_ADDED, data => {\n    const { displaySetsAdded } = data;\n    /**\n     * If there are still some measurements that have not yet been loaded into cornerstone,\n     * See if we can load them onto any of the new displaySets.\n     */\n    displaySetsAdded.forEach(newDisplaySet => {\n      _checkIfCanAddMeasurementsToDisplaySet(\n        srDisplaySet,\n        newDisplaySet,\n        dataSource,\n        servicesManager\n      );\n    });\n  });\n}\n\n/**\n * Checks if measurements can be added to a display set.\n *\n * @param srDisplaySet - The source display set containing measurements.\n * @param newDisplaySet - The new display set to check if measurements can be added.\n * @param dataSource - The data source used to retrieve image IDs.\n * @param servicesManager - The services manager.\n */\nfunction _checkIfCanAddMeasurementsToDisplaySet(\n  srDisplaySet,\n  newDisplaySet,\n  dataSource,\n  servicesManager: AppTypes.ServicesManager\n) {\n  const { customizationService } = servicesManager.services;\n\n  const unloadedMeasurements = srDisplaySet.measurements.filter(\n    measurement => measurement.loaded === false\n  );\n\n  if (\n    unloadedMeasurements.length === 0 ||\n    !(newDisplaySet instanceof ImageSet) ||\n    newDisplaySet.unsupported\n  ) {\n    return;\n  }\n\n  // const { sopClassUids } = newDisplaySet;\n  // Create a Set for faster lookups\n  // const sopClassUidSet = new Set(sopClassUids);\n\n  // Create a Map to efficiently look up ImageIds by SOPInstanceUID and frame number\n  const imageIdMap = new Map<string, string>();\n  const imageIds = dataSource.getImageIdsForDisplaySet(newDisplaySet);\n\n  for (const imageId of imageIds) {\n    const { SOPInstanceUID, frameNumber } = metadataProvider.getUIDsFromImageID(imageId);\n    const key = `${SOPInstanceUID}:${frameNumber || 1}`;\n    imageIdMap.set(key, imageId);\n  }\n\n  if (!unloadedMeasurements?.length) {\n    return;\n  }\n\n  const is3DSR = srDisplaySet.SOPClassUID === sopClassDictionary.Comprehensive3DSR;\n\n  for (let j = unloadedMeasurements.length - 1; j >= 0; j--) {\n    let measurement = unloadedMeasurements[j];\n\n    const onBeforeSRAddMeasurement = customizationService.getModeCustomization(\n      'onBeforeSRAddMeasurement'\n    )?.value;\n\n    if (typeof onBeforeSRAddMeasurement === 'function') {\n      measurement = onBeforeSRAddMeasurement({\n        measurement,\n        StudyInstanceUID: srDisplaySet.StudyInstanceUID,\n        SeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\n      });\n    }\n\n    // if it is 3d SR we can just add the SR annotation\n    if (is3DSR) {\n      addSRAnnotation(measurement, null, null);\n      measurement.loaded = true;\n      continue;\n    }\n\n    const referencedSOPSequence = measurement.coords[0].ReferencedSOPSequence;\n    if (!referencedSOPSequence) {\n      continue;\n    }\n\n    const { ReferencedSOPInstanceUID } = referencedSOPSequence;\n    const frame = referencedSOPSequence.ReferencedFrameNumber || 1;\n    const key = `${ReferencedSOPInstanceUID}:${frame}`;\n    const imageId = imageIdMap.get(key);\n\n    if (\n      imageId &&\n      _measurementReferencesSOPInstanceUID(measurement, ReferencedSOPInstanceUID, frame)\n    ) {\n      addSRAnnotation(measurement, imageId, frame);\n\n      // Update measurement properties\n      measurement.loaded = true;\n      measurement.imageId = imageId;\n      measurement.displaySetInstanceUID = newDisplaySet.displaySetInstanceUID;\n      measurement.ReferencedSOPInstanceUID = ReferencedSOPInstanceUID;\n      measurement.frameNumber = frame;\n\n      unloadedMeasurements.splice(j, 1);\n    }\n  }\n}\n\n/**\n * Checks if a measurement references a specific SOP Instance UID.\n * @param measurement - The measurement object.\n * @param SOPInstanceUID - The SOP Instance UID to check against.\n * @param frameNumber - The frame number to check against (optional).\n * @returns True if the measurement references the specified SOP Instance UID, false otherwise.\n */\nfunction _measurementReferencesSOPInstanceUID(measurement, SOPInstanceUID, frameNumber) {\n  const { coords } = measurement;\n\n  /**\n   * NOTE: The ReferencedFrameNumber can be multiple values according to the DICOM\n   * Standard. But for now, we will support only one ReferenceFrameNumber.\n   */\n  const ReferencedFrameNumber =\n    (measurement.coords[0].ReferencedSOPSequence &&\n      measurement.coords[0].ReferencedSOPSequence?.ReferencedFrameNumber) ||\n    1;\n\n  if (frameNumber && Number(frameNumber) !== Number(ReferencedFrameNumber)) {\n    return false;\n  }\n\n  for (let j = 0; j < coords.length; j++) {\n    const coord = coords[j];\n    const { ReferencedSOPInstanceUID } = coord.ReferencedSOPSequence;\n    if (ReferencedSOPInstanceUID === SOPInstanceUID) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Retrieves the SOP class handler module.\n *\n * @param {Object} options - The options for retrieving the SOP class handler module.\n * @param {Object} options.servicesManager - The services manager.\n * @param {Object} options.extensionManager - The extension manager.\n * @returns {Array} An array containing the SOP class handler module.\n */\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n  return [\n    {\n      name: SOPClassHandlerName,\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n    {\n      name: SOPClassHandlerName3D,\n      sopClassUids: [sopClassDictionary.Comprehensive3DSR],\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\n/**\n * Retrieves the measurements from the ImagingMeasurementReportContentSequence.\n *\n * @param {Array} ImagingMeasurementReportContentSequence - The ImagingMeasurementReportContentSequence array.\n * @returns {Array} - The array of measurements.\n */\nfunction _getMeasurements(ImagingMeasurementReportContentSequence) {\n  const ImagingMeasurements = ImagingMeasurementReportContentSequence.find(\n    item =>\n      item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.ImagingMeasurements\n  );\n\n  if (!ImagingMeasurements) {\n    return [];\n  }\n\n  const MeasurementGroups = _getSequenceAsArray(ImagingMeasurements.ContentSequence).filter(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.MeasurementGroup\n  );\n\n  const mergedContentSequencesByTrackingUniqueIdentifiers =\n    _getMergedContentSequencesByTrackingUniqueIdentifiers(MeasurementGroups);\n  const measurements = [];\n\n  Object.keys(mergedContentSequencesByTrackingUniqueIdentifiers).forEach(\n    trackingUniqueIdentifier => {\n      const mergedContentSequence =\n        mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier];\n\n      const measurement = _processMeasurement(mergedContentSequence);\n      if (measurement) {\n        measurements.push(measurement);\n      }\n    }\n  );\n\n  return measurements;\n}\n\n/**\n * Retrieves merged content sequences by tracking unique identifiers.\n *\n * @param {Array} MeasurementGroups - The measurement groups.\n * @returns {Object} - The merged content sequences by tracking unique identifiers.\n */\nfunction _getMergedContentSequencesByTrackingUniqueIdentifiers(MeasurementGroups) {\n  const mergedContentSequencesByTrackingUniqueIdentifiers = {};\n\n  MeasurementGroups.forEach(MeasurementGroup => {\n    const ContentSequence = _getSequenceAsArray(MeasurementGroup.ContentSequence);\n\n    const TrackingUniqueIdentifierItem = ContentSequence.find(\n      item =>\n        item.ConceptNameCodeSequence.CodeValue ===\n        CodeNameCodeSequenceValues.TrackingUniqueIdentifier\n    );\n    if (!TrackingUniqueIdentifierItem) {\n      console.warn('No Tracking Unique Identifier, skipping ambiguous measurement.');\n    }\n\n    const trackingUniqueIdentifier = TrackingUniqueIdentifierItem.UID;\n\n    if (mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier] === undefined) {\n      // Add the full ContentSequence\n      mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier] = [\n        ...ContentSequence,\n      ];\n    } else {\n      // Add the ContentSequence minus the tracking identifier, as we have this\n      // Information in the merged ContentSequence anyway.\n      ContentSequence.forEach(item => {\n        if (\n          item.ConceptNameCodeSequence.CodeValue !==\n          CodeNameCodeSequenceValues.TrackingUniqueIdentifier\n        ) {\n          mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier].push(item);\n        }\n      });\n    }\n  });\n\n  return mergedContentSequencesByTrackingUniqueIdentifiers;\n}\n\n/**\n * Processes the measurement based on the merged content sequence.\n * If the merged content sequence contains SCOORD or SCOORD3D value types,\n * it calls the _processTID1410Measurement function.\n * Otherwise, it calls the _processNonGeometricallyDefinedMeasurement function.\n *\n * @param {Array<Object>} mergedContentSequence - The merged content sequence to process.\n * @returns {any} - The processed measurement result.\n */\nfunction _processMeasurement(mergedContentSequence) {\n  if (\n    mergedContentSequence.some(\n      group => group.ValueType === 'SCOORD' || group.ValueType === 'SCOORD3D'\n    )\n  ) {\n    return _processTID1410Measurement(mergedContentSequence);\n  }\n\n  return _processNonGeometricallyDefinedMeasurement(mergedContentSequence);\n}\n\n/**\n * Processes TID 1410 style measurements from the mergedContentSequence.\n * TID 1410 style measurements have a SCOORD or SCOORD3D at the top level,\n * and non-geometric representations where each NUM has \"INFERRED FROM\" SCOORD/SCOORD3D.\n *\n * @param mergedContentSequence - The merged content sequence containing the measurements.\n * @returns The measurement object containing the loaded status, labels, coordinates, tracking unique identifier, and tracking identifier.\n */\nfunction _processTID1410Measurement(mergedContentSequence) {\n  // Need to deal with TID 1410 style measurements, which will have a SCOORD or SCOORD3D at the top level,\n  // And non-geometric representations where each NUM has \"INFERRED FROM\" SCOORD/SCOORD3D\n\n  const graphicItem = mergedContentSequence.find(\n    group => group.ValueType === 'SCOORD' || group.ValueType === 'SCOORD3D'\n  );\n\n  const UIDREFContentItem = mergedContentSequence.find(group => group.ValueType === 'UIDREF');\n\n  const TrackingIdentifierContentItem = mergedContentSequence.find(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.TrackingIdentifier\n  );\n\n  if (!graphicItem) {\n    console.warn(\n      `graphic ValueType ${graphicItem.ValueType} not currently supported, skipping annotation.`\n    );\n    return;\n  }\n\n  const NUMContentItems = mergedContentSequence.filter(group => group.ValueType === 'NUM');\n\n  const measurement = {\n    loaded: false,\n    labels: [],\n    coords: [_getCoordsFromSCOORDOrSCOORD3D(graphicItem)],\n    TrackingUniqueIdentifier: UIDREFContentItem.UID,\n    TrackingIdentifier: TrackingIdentifierContentItem.TextValue,\n  };\n\n  NUMContentItems.forEach(item => {\n    const { ConceptNameCodeSequence, MeasuredValueSequence } = item;\n    if (MeasuredValueSequence) {\n      measurement.labels.push(\n        _getLabelFromMeasuredValueSequence(ConceptNameCodeSequence, MeasuredValueSequence)\n      );\n    }\n  });\n\n  const findingSites = mergedContentSequence.filter(\n    item =>\n      item.ConceptNameCodeSequence.CodingSchemeDesignator === CodingSchemeDesignators.SCT &&\n      item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.FindingSiteSCT\n  );\n  if (findingSites.length) {\n    measurement.labels.push({\n      label: CodeNameCodeSequenceValues.FindingSiteSCT,\n      value: findingSites[0].ConceptCodeSequence.CodeMeaning,\n    });\n  }\n\n  return measurement;\n}\n\n/**\n * Processes the non-geometrically defined measurement from the merged content sequence.\n *\n * @param mergedContentSequence The merged content sequence containing the measurement data.\n * @returns The processed measurement object.\n */\nfunction _processNonGeometricallyDefinedMeasurement(mergedContentSequence) {\n  const NUMContentItems = mergedContentSequence.filter(group => group.ValueType === 'NUM');\n  const UIDREFContentItem = mergedContentSequence.find(group => group.ValueType === 'UIDREF');\n\n  const TrackingIdentifierContentItem = mergedContentSequence.find(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.TrackingIdentifier\n  );\n\n  const finding = mergedContentSequence.find(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.Finding\n  );\n\n  const findingSites = mergedContentSequence.filter(\n    item =>\n      item.ConceptNameCodeSequence.CodingSchemeDesignator === CodingSchemeDesignators.SRT &&\n      item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.FindingSite\n  );\n\n  const measurement = {\n    loaded: false,\n    labels: [],\n    coords: [],\n    TrackingUniqueIdentifier: UIDREFContentItem.UID,\n    TrackingIdentifier: TrackingIdentifierContentItem.TextValue,\n  };\n\n  if (\n    finding &&\n    CodingSchemeDesignators.CornerstoneCodeSchemes.includes(\n      finding.ConceptCodeSequence.CodingSchemeDesignator\n    ) &&\n    finding.ConceptCodeSequence.CodeValue === Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT\n  ) {\n    measurement.labels.push({\n      label: Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT,\n      value: finding.ConceptCodeSequence.CodeMeaning,\n    });\n  }\n\n  // TODO -> Eventually hopefully support SNOMED or some proper code library, just free text for now.\n  if (findingSites.length) {\n    const cornerstoneFreeTextFindingSite = findingSites.find(\n      FindingSite =>\n        CodingSchemeDesignators.CornerstoneCodeSchemes.includes(\n          FindingSite.ConceptCodeSequence.CodingSchemeDesignator\n        ) &&\n        FindingSite.ConceptCodeSequence.CodeValue ===\n          Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT\n    );\n\n    if (cornerstoneFreeTextFindingSite) {\n      measurement.labels.push({\n        label: Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT,\n        value: cornerstoneFreeTextFindingSite.ConceptCodeSequence.CodeMeaning,\n      });\n    }\n  }\n\n  NUMContentItems.forEach(item => {\n    const { ConceptNameCodeSequence, ContentSequence, MeasuredValueSequence } = item;\n\n    const { ValueType } = ContentSequence;\n    if (!ValueType === 'SCOORD') {\n      console.warn(`Graphic ${ValueType} not currently supported, skipping annotation.`);\n      return;\n    }\n\n    const coords = _getCoordsFromSCOORDOrSCOORD3D(ContentSequence);\n    if (coords) {\n      measurement.coords.push(coords);\n    }\n\n    if (MeasuredValueSequence) {\n      measurement.labels.push(\n        _getLabelFromMeasuredValueSequence(ConceptNameCodeSequence, MeasuredValueSequence)\n      );\n    }\n  });\n\n  return measurement;\n}\n\n/**\n * Extracts coordinates from a graphic item of type SCOORD or SCOORD3D.\n * @param {object} graphicItem - The graphic item containing the coordinates.\n * @returns {object} - The extracted coordinates.\n */\nconst _getCoordsFromSCOORDOrSCOORD3D = graphicItem => {\n  const { ValueType, GraphicType, GraphicData } = graphicItem;\n  const coords = { ValueType, GraphicType, GraphicData };\n  coords.ReferencedSOPSequence = graphicItem.ContentSequence?.ReferencedSOPSequence;\n  coords.ReferencedFrameOfReferenceSequence =\n    graphicItem.ReferencedFrameOfReferenceUID ||\n    graphicItem.ContentSequence?.ReferencedFrameOfReferenceSequence;\n  return coords;\n};\n\n/**\n * Retrieves the label and value from the provided ConceptNameCodeSequence and MeasuredValueSequence.\n * @param {Object} ConceptNameCodeSequence - The ConceptNameCodeSequence object.\n * @param {Object} MeasuredValueSequence - The MeasuredValueSequence object.\n * @returns {Object} - An object containing the label and value.\n *                    The label represents the CodeMeaning from the ConceptNameCodeSequence.\n *                    The value represents the formatted NumericValue and CodeValue from the MeasuredValueSequence.\n *                    Example: { label: 'Long Axis', value: '31.00 mm' }\n */\nfunction _getLabelFromMeasuredValueSequence(ConceptNameCodeSequence, MeasuredValueSequence) {\n  const { CodeMeaning } = ConceptNameCodeSequence;\n  const { NumericValue, MeasurementUnitsCodeSequence } = MeasuredValueSequence;\n  const { CodeValue } = MeasurementUnitsCodeSequence;\n  const formatedNumericValue = NumericValue ? Number(NumericValue).toFixed(2) : '';\n  return {\n    label: CodeMeaning,\n    value: `${formatedNumericValue} ${CodeValue}`,\n  }; // E.g. Long Axis: 31.0 mm\n}\n\n/**\n * Retrieves a list of referenced images from the Imaging Measurement Report Content Sequence.\n *\n * @param {Array} ImagingMeasurementReportContentSequence - The Imaging Measurement Report Content Sequence.\n * @returns {Array} - The list of referenced images.\n */\nfunction _getReferencedImagesList(ImagingMeasurementReportContentSequence) {\n  const ImageLibrary = ImagingMeasurementReportContentSequence.find(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.ImageLibrary\n  );\n\n  if (!ImageLibrary) {\n    return [];\n  }\n\n  const ImageLibraryGroup = _getSequenceAsArray(ImageLibrary.ContentSequence).find(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.ImageLibraryGroup\n  );\n  if (!ImageLibraryGroup) {\n    return [];\n  }\n\n  const referencedImages = [];\n\n  _getSequenceAsArray(ImageLibraryGroup.ContentSequence).forEach(item => {\n    const { ReferencedSOPSequence } = item;\n    if (!ReferencedSOPSequence) {\n      return;\n    }\n    for (const ref of _getSequenceAsArray(ReferencedSOPSequence)) {\n      if (ref.ReferencedSOPClassUID) {\n        const { ReferencedSOPClassUID, ReferencedSOPInstanceUID } = ref;\n\n        referencedImages.push({\n          ReferencedSOPClassUID,\n          ReferencedSOPInstanceUID,\n        });\n      }\n    }\n  });\n\n  return referencedImages;\n}\n\n/**\n * Converts a DICOM sequence to an array.\n * If the sequence is null or undefined, an empty array is returned.\n * If the sequence is already an array, it is returned as is.\n * Otherwise, the sequence is wrapped in an array and returned.\n *\n * @param {any} sequence - The DICOM sequence to convert.\n * @returns {any[]} - The converted array.\n */\nfunction _getSequenceAsArray(sequence) {\n  if (!sequence) {\n    return [];\n  }\n  return Array.isArray(sequence) ? sequence : [sequence];\n}\n\nexport default getSopClassHandlerModule;\n","import { Types } from '@ohif/core';\n\nconst srProtocol: Types.HangingProtocol.Protocol = {\n  id: '@ohif/sr',\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'SR Key Images',\n  // Just apply this one when specifically listed\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'srDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    srDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SR',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'SR Key Images',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: { allowUnmatchedView: true },\n          displaySets: [\n            {\n              id: 'srDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: srProtocol.id,\n      protocol: srProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\nexport { srProtocol };\n","import OHIF from '@ohif/core';\nimport { annotation } from '@cornerstonejs/tools';\nconst { log } = OHIF;\n\nfunction getFilteredCornerstoneToolState(measurementData, additionalFindingTypes) {\n  const filteredToolState = {};\n\n  function addToFilteredToolState(annotation, toolType) {\n    if (!annotation.metadata?.referencedImageId) {\n      log.warn(`[DICOMSR] No referencedImageId found for ${toolType} ${annotation.id}`);\n      return;\n    }\n\n    const imageId = annotation.metadata.referencedImageId;\n\n    if (!filteredToolState[imageId]) {\n      filteredToolState[imageId] = {};\n    }\n\n    const imageIdSpecificToolState = filteredToolState[imageId];\n\n    if (!imageIdSpecificToolState[toolType]) {\n      imageIdSpecificToolState[toolType] = {\n        data: [],\n      };\n    }\n\n    const measurementDataI = measurementData.find(md => md.uid === annotation.annotationUID);\n    const toolData = imageIdSpecificToolState[toolType].data;\n\n    let { finding } = measurementDataI;\n    const findingSites = [];\n\n    // NOTE -> We use the CORNERSTONEJS coding schemeDesignator which we have\n    // defined in the @cornerstonejs/adapters\n    if (measurementDataI.label) {\n      if (additionalFindingTypes.includes(toolType)) {\n        finding = {\n          CodeValue: 'CORNERSTONEFREETEXT',\n          CodingSchemeDesignator: 'CORNERSTONEJS',\n          CodeMeaning: measurementDataI.label,\n        };\n      } else {\n        findingSites.push({\n          CodeValue: 'CORNERSTONEFREETEXT',\n          CodingSchemeDesignator: 'CORNERSTONEJS',\n          CodeMeaning: measurementDataI.label,\n        });\n      }\n    }\n\n    if (measurementDataI.findingSites) {\n      findingSites.push(...measurementDataI.findingSites);\n    }\n\n    const measurement = Object.assign({}, annotation, {\n      finding,\n      findingSites,\n    });\n\n    toolData.push(measurement);\n  }\n\n  const uidFilter = measurementData.map(md => md.uid);\n  const uids = uidFilter.slice();\n\n  const annotationManager = annotation.state.getAnnotationManager();\n  const framesOfReference = annotationManager.getFramesOfReference();\n\n  for (let i = 0; i < framesOfReference.length; i++) {\n    const frameOfReference = framesOfReference[i];\n\n    const frameOfReferenceAnnotations = annotationManager.getAnnotations(frameOfReference);\n\n    const toolTypes = Object.keys(frameOfReferenceAnnotations);\n\n    for (let j = 0; j < toolTypes.length; j++) {\n      const toolType = toolTypes[j];\n\n      const annotations = frameOfReferenceAnnotations[toolType];\n\n      if (annotations) {\n        for (let k = 0; k < annotations.length; k++) {\n          const annotation = annotations[k];\n          const uidIndex = uids.findIndex(uid => uid === annotation.annotationUID);\n\n          if (uidIndex !== -1) {\n            addToFilteredToolState(annotation, toolType);\n            uids.splice(uidIndex, 1);\n\n            if (!uids.length) {\n              return filteredToolState;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return filteredToolState;\n}\n\nexport default getFilteredCornerstoneToolState;\n","import { metaData, utilities } from '@cornerstonejs/core';\n\nimport OHIF, { DicomMetadataStore } from '@ohif/core';\nimport dcmjs from 'dcmjs';\nimport { adaptersSR } from '@cornerstonejs/adapters';\n\nimport getFilteredCornerstoneToolState from './utils/getFilteredCornerstoneToolState';\n\nconst { MeasurementReport } = adaptersSR.Cornerstone3D;\nconst { log } = OHIF;\n\n/**\n *\n * @param measurementData An array of measurements from the measurements service\n * that you wish to serialize.\n * @param additionalFindingTypes toolTypes that should be stored with labels as Findings\n * @param options Naturalized DICOM JSON headers to merge into the displaySet.\n *\n */\nconst _generateReport = (measurementData, additionalFindingTypes, options = {}) => {\n  const filteredToolState = getFilteredCornerstoneToolState(\n    measurementData,\n    additionalFindingTypes\n  );\n\n  const report = MeasurementReport.generateReport(\n    filteredToolState,\n    metaData,\n    utilities.worldToImageCoords,\n    options\n  );\n\n  const { dataset } = report;\n\n  // Set the default character set as UTF-8\n  // https://dicom.innolitics.com/ciods/nm-image/sop-common/00080005\n  if (typeof dataset.SpecificCharacterSet === 'undefined') {\n    dataset.SpecificCharacterSet = 'ISO_IR 192';\n  }\n  return dataset;\n};\n\nconst commandsModule = (props: withAppTypes) => {\n  const { servicesManager } = props;\n  const { customizationService } = servicesManager.services;\n  const actions = {\n    /**\n     *\n     * @param measurementData An array of measurements from the measurements service\n     * @param additionalFindingTypes toolTypes that should be stored with labels as Findings\n     * @param options Naturalized DICOM JSON headers to merge into the displaySet.\n     * as opposed to Finding Sites.\n     * that you wish to serialize.\n     */\n    downloadReport: ({ measurementData, additionalFindingTypes, options = {} }) => {\n      const srDataset = actions.generateReport(measurementData, additionalFindingTypes, options);\n      const reportBlob = dcmjs.data.datasetToBlob(srDataset);\n\n      //Create a URL for the binary.\n      const objectUrl = URL.createObjectURL(reportBlob);\n      window.location.assign(objectUrl);\n    },\n\n    /**\n     *\n     * @param measurementData An array of measurements from the measurements service\n     * that you wish to serialize.\n     * @param dataSource The dataSource that you wish to use to persist the data.\n     * @param additionalFindingTypes toolTypes that should be stored with labels as Findings\n     * @param options Naturalized DICOM JSON headers to merge into the displaySet.\n     * @return The naturalized report\n     */\n    storeMeasurements: async ({\n      measurementData,\n      dataSource,\n      additionalFindingTypes,\n      options = {},\n    }) => {\n      // Use the @cornerstonejs adapter for converting to/from DICOM\n      // But it is good enough for now whilst we only have cornerstone as a datasource.\n      log.info('[DICOMSR] storeMeasurements');\n\n      if (!dataSource || !dataSource.store || !dataSource.store.dicom) {\n        log.error('[DICOMSR] datasource has no dataSource.store.dicom endpoint!');\n        return Promise.reject({});\n      }\n\n      try {\n        const naturalizedReport = _generateReport(measurementData, additionalFindingTypes, options);\n\n        const { StudyInstanceUID, ContentSequence } = naturalizedReport;\n        // The content sequence has 5 or more elements, of which\n        // the `[4]` element contains the annotation data, so this is\n        // checking that there is some annotation data present.\n        if (!ContentSequence?.[4].ContentSequence?.length) {\n          console.log('naturalizedReport missing imaging content', naturalizedReport);\n          throw new Error('Invalid report, no content');\n        }\n\n        const onBeforeDicomStore =\n          customizationService.getModeCustomization('onBeforeDicomStore')?.value;\n\n        let dicomDict;\n        if (typeof onBeforeDicomStore === 'function') {\n          dicomDict = onBeforeDicomStore({ measurementData, naturalizedReport });\n        }\n\n        await dataSource.store.dicom(naturalizedReport, null, dicomDict);\n\n        if (StudyInstanceUID) {\n          dataSource.deleteStudyMetadataPromise(StudyInstanceUID);\n        }\n\n        // The \"Mode\" route listens for DicomMetadataStore changes\n        // When a new instance is added, it listens and\n        // automatically calls makeDisplaySets\n        DicomMetadataStore.addInstances([naturalizedReport], true);\n\n        return naturalizedReport;\n      } catch (error) {\n        console.warn(error);\n        log.error(`[DICOMSR] Error while saving the measurements: ${error.message}`);\n        throw new Error(error.message || 'Error while saving the measurements.');\n      }\n    },\n  };\n\n  const definitions = {\n    downloadReport: {\n      commandFn: actions.downloadReport,\n    },\n    storeMeasurements: {\n      commandFn: actions.storeMeasurements,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'CORNERSTONE_STRUCTURED_REPORT',\n  };\n};\n\nexport default commandsModule;\n","import { Types, metaData, utilities as csUtils } from '@cornerstonejs/core';\nimport {\n  AnnotationTool,\n  annotation,\n  drawing,\n  utilities,\n  Types as cs3DToolsTypes,\n} from '@cornerstonejs/tools';\nimport { getTrackingUniqueIdentifiersForElement } from './modules/dicomSRModule';\nimport { SCOORDTypes } from '../enums';\nimport toolNames from './toolNames';\n\nexport default class DICOMSRDisplayTool extends AnnotationTool {\n  static toolName = toolNames.DICOMSRDisplay;\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      configuration: {},\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _getTextBoxLinesFromLabels(labels) {\n    // TODO -> max 5 for now (label + shortAxis + longAxis), need a generic solution for this!\n\n    const labelLength = Math.min(labels.length, 5);\n    const lines = [];\n\n    for (let i = 0; i < labelLength; i++) {\n      const labelEntry = labels[i];\n      lines.push(`${_labelToShorthand(labelEntry.label)}: ${labelEntry.value}`);\n    }\n\n    return lines;\n  }\n\n  // This tool should not inherit from AnnotationTool and we should not need\n  // to add the following lines.\n  isPointNearTool = () => null;\n  getHandleNearImagePoint = () => null;\n\n  renderAnnotation = (enabledElement: Types.IEnabledElement, svgDrawingHelper: any): void => {\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = annotation.state.getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n\n    if (!annotations?.length) {\n      return;\n    }\n\n    const trackingUniqueIdentifiersForElement = getTrackingUniqueIdentifiersForElement(element);\n\n    const { activeIndex, trackingUniqueIdentifiers } = trackingUniqueIdentifiersForElement;\n\n    const activeTrackingUniqueIdentifier = trackingUniqueIdentifiers[activeIndex];\n\n    // Filter toolData to only render the data for the active SR.\n    const filteredAnnotations = annotations.filter(annotation =>\n      trackingUniqueIdentifiers.includes(annotation.data?.TrackingUniqueIdentifier)\n    );\n\n    if (!viewport._actors?.size) {\n      return;\n    }\n\n    const styleSpecifier: cs3DToolsTypes.AnnotationStyle.StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n    const { style: annotationStyle } = annotation.config;\n\n    for (let i = 0; i < filteredAnnotations.length; i++) {\n      const annotation = filteredAnnotations[i];\n      const annotationUID = annotation.annotationUID;\n      const { renderableData, TrackingUniqueIdentifier } = annotation.data;\n      const { referencedImageId } = annotation.metadata;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const groupStyle = annotationStyle.getToolGroupToolStyles(this.toolGroupId)[\n        this.getToolName()\n      ];\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color =\n        TrackingUniqueIdentifier === activeTrackingUniqueIdentifier\n          ? 'rgb(0, 255, 0)'\n          : this.getStyle('color', styleSpecifier, annotation);\n\n      const options = {\n        color,\n        lineDash,\n        lineWidth,\n        ...groupStyle,\n      };\n\n      Object.keys(renderableData).forEach(GraphicType => {\n        const renderableDataForGraphicType = renderableData[GraphicType];\n\n        let renderMethod;\n        let canvasCoordinatesAdapter;\n\n        switch (GraphicType) {\n          case SCOORDTypes.POINT:\n            renderMethod = this.renderPoint;\n            break;\n          case SCOORDTypes.MULTIPOINT:\n            renderMethod = this.renderMultipoint;\n            break;\n          case SCOORDTypes.POLYLINE:\n            renderMethod = this.renderPolyLine;\n            break;\n          case SCOORDTypes.CIRCLE:\n            renderMethod = this.renderEllipse;\n            break;\n          case SCOORDTypes.ELLIPSE:\n            renderMethod = this.renderEllipse;\n            canvasCoordinatesAdapter = utilities.math.ellipse.getCanvasEllipseCorners;\n            break;\n          default:\n            throw new Error(`Unsupported GraphicType: ${GraphicType}`);\n        }\n\n        const canvasCoordinates = renderMethod(\n          svgDrawingHelper,\n          viewport,\n          renderableDataForGraphicType,\n          annotationUID,\n          referencedImageId,\n          options\n        );\n\n        this.renderTextBox(\n          svgDrawingHelper,\n          viewport,\n          canvasCoordinates,\n          canvasCoordinatesAdapter,\n          annotation,\n          styleSpecifier,\n          options\n        );\n      });\n    }\n  };\n\n  renderPolyLine(\n    svgDrawingHelper,\n    viewport,\n    renderableData,\n    annotationUID,\n    referencedImageId,\n    options\n  ) {\n    const drawingOptions = {\n      color: options.color,\n      width: options.lineWidth,\n      lineDash: options.lineDash,\n    };\n    let allCanvasCoordinates = [];\n    renderableData.map((data, index) => {\n      const canvasCoordinates = data.map(p => viewport.worldToCanvas(p));\n      const lineUID = `${index}`;\n\n      if (canvasCoordinates.length === 2) {\n        drawing.drawLine(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          canvasCoordinates[0],\n          canvasCoordinates[1],\n          drawingOptions\n        );\n      } else {\n        drawing.drawPolyline(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          canvasCoordinates,\n          drawingOptions\n        );\n      }\n\n      allCanvasCoordinates = allCanvasCoordinates.concat(canvasCoordinates);\n    });\n\n    return allCanvasCoordinates; // used for drawing textBox\n  }\n\n  renderMultipoint(\n    svgDrawingHelper,\n    viewport,\n    renderableData,\n    annotationUID,\n    referencedImageId,\n    options\n  ) {\n    let canvasCoordinates;\n    renderableData.map((data, index) => {\n      canvasCoordinates = data.map(p => viewport.worldToCanvas(p));\n      const handleGroupUID = '0';\n      drawing.drawHandles(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n        color: options.color,\n      });\n    });\n  }\n\n  renderPoint(\n    svgDrawingHelper,\n    viewport,\n    renderableData,\n    annotationUID,\n    referencedImageId,\n    options\n  ) {\n    const canvasCoordinates = [];\n    renderableData.map((data, index) => {\n      const point = data[0];\n      // This gives us one point for arrow\n      canvasCoordinates.push(viewport.worldToCanvas(point));\n\n      if (data[1] !== undefined) {\n        canvasCoordinates.push(viewport.worldToCanvas(data[1]));\n      }\n      else{\n         // We get the other point for the arrow by using the image size\n      const imagePixelModule = metaData.get('imagePixelModule', referencedImageId);\n\n      let xOffset = 10;\n      let yOffset = 10;\n\n      if (imagePixelModule) {\n        const { columns, rows } = imagePixelModule;\n        xOffset = columns / 10;\n        yOffset = rows / 10;\n      }\n\n      const imagePoint = csUtils.worldToImageCoords(referencedImageId, point);\n      const arrowEnd = csUtils.imageToWorldCoords(referencedImageId, [\n        imagePoint[0] + xOffset,\n        imagePoint[1] + yOffset,\n      ]);\n\n      canvasCoordinates.push(viewport.worldToCanvas(arrowEnd));\n        \n      }\n     \n\n      const arrowUID = `${index}`;\n\n      // Todo: handle drawing probe as probe, currently we are drawing it as an arrow\n      drawing.drawArrow(\n        svgDrawingHelper,\n        annotationUID,\n        arrowUID,\n        canvasCoordinates[1],\n        canvasCoordinates[0],\n        {\n          color: options.color,\n          width: options.lineWidth,\n        }\n      );\n    });\n\n    return canvasCoordinates; // used for drawing textBox\n  }\n\n  renderEllipse(\n    svgDrawingHelper,\n    viewport,\n    renderableData,\n    annotationUID,\n    referencedImageId,\n    options\n  ) {\n    let canvasCoordinates;\n    renderableData.map((data, index) => {\n      if (data.length === 0) {\n        // since oblique ellipse is not supported for hydration right now\n        // we just return\n        return;\n      }\n\n      const ellipsePointsWorld = data;\n\n      const rotation = viewport.getRotation();\n\n      canvasCoordinates = ellipsePointsWorld.map(p => viewport.worldToCanvas(p));\n      let canvasCorners;\n      if (rotation == 90 || rotation == 270) {\n        canvasCorners = utilities.math.ellipse.getCanvasEllipseCorners([\n          canvasCoordinates[2],\n          canvasCoordinates[3],\n          canvasCoordinates[0],\n          canvasCoordinates[1],\n        ]) as Array<Types.Point2>;\n      } else {\n        canvasCorners = utilities.math.ellipse.getCanvasEllipseCorners(\n          canvasCoordinates\n        ) as Array<Types.Point2>;\n      }\n\n      const lineUID = `${index}`;\n      drawing.drawEllipse(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCorners[0],\n        canvasCorners[1],\n        {\n          color: options.color,\n          width: options.lineWidth,\n          lineDash: options.lineDash,\n        }\n      );\n    });\n\n    return canvasCoordinates;\n  }\n\n  renderTextBox(\n    svgDrawingHelper,\n    viewport,\n    canvasCoordinates,\n    canvasCoordinatesAdapter,\n    annotation,\n    styleSpecifier,\n    options = {}\n  ) {\n    if (!canvasCoordinates || !annotation) {\n      return;\n    }\n\n    const { annotationUID, data = {} } = annotation;\n    const { labels } = data;\n    const { color } = options;\n\n    let adaptedCanvasCoordinates = canvasCoordinates;\n    // adapt coordinates if there is an adapter\n    if (typeof canvasCoordinatesAdapter === 'function') {\n      adaptedCanvasCoordinates = canvasCoordinatesAdapter(canvasCoordinates);\n    }\n    const textLines = this._getTextBoxLinesFromLabels(labels);\n    const canvasTextBoxCoords = utilities.drawing.getTextBoxCoordsCanvas(adaptedCanvasCoordinates);\n\n    if (!annotation.data?.handles?.textBox?.worldPosition) {\n      annotation.data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);\n    }\n\n    const textBoxPosition = viewport.worldToCanvas(annotation.data.handles.textBox.worldPosition);\n\n    const textBoxUID = '1';\n    const textBoxOptions = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n\n    const boundingBox = drawing.drawLinkedTextBox(\n      svgDrawingHelper,\n      annotationUID,\n      textBoxUID,\n      textLines,\n      textBoxPosition,\n      canvasCoordinates,\n      {},\n      {\n        ...textBoxOptions,\n        color,\n      }\n    );\n\n    const { x: left, y: top, width, height } = boundingBox;\n\n    annotation.data.handles.textBox.worldBoundingBox = {\n      topLeft: viewport.canvasToWorld([left, top]),\n      topRight: viewport.canvasToWorld([left + width, top]),\n      bottomLeft: viewport.canvasToWorld([left, top + height]),\n      bottomRight: viewport.canvasToWorld([left + width, top + height]),\n    };\n  }\n}\n\nconst SHORT_HAND_MAP = {\n  'Short Axis': 'W: ',\n  'Long Axis': 'L: ',\n  AREA: 'Area: ',\n  Length: '',\n  CORNERSTONEFREETEXT: '',\n};\n\nfunction _labelToShorthand(label) {\n  const shortHand = SHORT_HAND_MAP[label];\n\n  if (shortHand !== undefined) {\n    return shortHand;\n  }\n\n  return label;\n}\n","import { Types, metaData, utilities as csUtils } from '@cornerstonejs/core';\nimport {\n  annotation,\n  drawing,\n  utilities,\n  Types as cs3DToolsTypes,\n  AnnotationDisplayTool,\n} from '@cornerstonejs/tools';\nimport toolNames from './toolNames';\nimport { Annotation } from '@cornerstonejs/tools/dist/types/types';\n\nexport default class SCOORD3DPointTool extends AnnotationDisplayTool {\n  static toolName = toolNames.SRSCOORD3DPoint;\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      configuration: {},\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _getTextBoxLinesFromLabels(labels) {\n    // TODO -> max 5 for now (label + shortAxis + longAxis), need a generic solution for this!\n\n    const labelLength = Math.min(labels.length, 5);\n    const lines = [];\n\n    return lines;\n  }\n\n  // This tool should not inherit from AnnotationTool and we should not need\n  // to add the following lines.\n  isPointNearTool = () => null;\n  getHandleNearImagePoint = () => null;\n\n  renderAnnotation = (enabledElement: Types.IEnabledElement, svgDrawingHelper: any): void => {\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    const annotations = annotation.state.getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return;\n    }\n\n    // Filter toolData to only render the data for the active SR.\n    const filteredAnnotations = annotations;\n    if (!viewport._actors?.size) {\n      return;\n    }\n\n    const styleSpecifier: cs3DToolsTypes.AnnotationStyle.StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < filteredAnnotations.length; i++) {\n      const annotation = filteredAnnotations[i];\n\n      const annotationUID = annotation.annotationUID;\n      const { renderableData } = annotation.data;\n      const { POINT: points } = renderableData;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const options = {\n        color,\n        lineDash,\n        lineWidth,\n      };\n\n      const point = points[0][0];\n\n      // check if viewport can render it\n      const viewable = viewport.isReferenceViewable(\n        { FrameOfReferenceUID: annotation.metadata.FrameOfReferenceUID, cameraFocalPoint: point },\n        { asNearbyProjection: true }\n      );\n\n      if (!viewable) {\n        continue;\n      }\n\n      // render the point\n      const arrowPointCanvas = viewport.worldToCanvas(point);\n      // Todo: configure this\n      const arrowEndCanvas = [arrowPointCanvas[0] + 20, arrowPointCanvas[1] + 20];\n      const canvasCoordinates = [arrowPointCanvas, arrowEndCanvas];\n\n      drawing.drawArrow(\n        svgDrawingHelper,\n        annotationUID,\n        '1',\n        canvasCoordinates[1],\n        canvasCoordinates[0],\n        {\n          color: options.color,\n          width: options.lineWidth,\n        }\n      );\n\n      this.renderTextBox(\n        svgDrawingHelper,\n        viewport,\n        canvasCoordinates,\n        annotation,\n        styleSpecifier,\n        options\n      );\n    }\n  };\n\n  renderTextBox(\n    svgDrawingHelper,\n    viewport,\n    canvasCoordinates,\n    annotation,\n    styleSpecifier,\n    options = {}\n  ) {\n    if (!canvasCoordinates || !annotation) {\n      return;\n    }\n\n    const { annotationUID, data = {} } = annotation;\n    const { labels } = data;\n\n    const textLines = [];\n\n    for (const label of labels) {\n      // make this generic\n      // fix this\n      if (label.label === '363698007') {\n        textLines.push(`Finding Site: ${label.value}`);\n      }\n    }\n\n    const { color } = options;\n\n    const adaptedCanvasCoordinates = canvasCoordinates;\n    // adapt coordinates if there is an adapter\n    const canvasTextBoxCoords = utilities.drawing.getTextBoxCoordsCanvas(adaptedCanvasCoordinates);\n\n    if (!annotation.data?.handles?.textBox?.worldPosition) {\n      annotation.data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);\n    }\n\n    const textBoxPosition = viewport.worldToCanvas(annotation.data.handles.textBox.worldPosition);\n\n    const textBoxUID = '1';\n    const textBoxOptions = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n\n    const boundingBox = drawing.drawLinkedTextBox(\n      svgDrawingHelper,\n      annotationUID,\n      textBoxUID,\n      textLines,\n      textBoxPosition,\n      canvasCoordinates,\n      {},\n      {\n        ...textBoxOptions,\n        color,\n      }\n    );\n\n    const { x: left, y: top, width, height } = boundingBox;\n\n    annotation.data.handles.textBox.worldBoundingBox = {\n      topLeft: viewport.canvasToWorld([left, top]),\n      topRight: viewport.canvasToWorld([left + width, top]),\n      bottomLeft: viewport.canvasToWorld([left, top + height]),\n      bottomRight: viewport.canvasToWorld([left + width, top + height]),\n    };\n  }\n\n  public getLinkedTextBoxStyle(\n    specifications: cs3DToolsTypes.AnnotationStyle.StyleSpecifier,\n    annotation?: Annotation\n  ): Record<string, unknown> {\n    // Todo: this function can be used to set different styles for different toolMode\n    // for the textBox.\n\n    return {\n      visibility: this.getStyle('textBoxVisibility', specifications, annotation),\n      fontFamily: this.getStyle('textBoxFontFamily', specifications, annotation),\n      fontSize: this.getStyle('textBoxFontSize', specifications, annotation),\n      color: this.getStyle('textBoxColor', specifications, annotation),\n      shadow: this.getStyle('textBoxShadow', specifications, annotation),\n      background: this.getStyle('textBoxBackground', specifications, annotation),\n      lineWidth: this.getStyle('textBoxLinkLineWidth', specifications, annotation),\n      lineDash: this.getStyle('textBoxLinkLineDash', specifications, annotation),\n    };\n  }\n}\n","const SRSCOOR3DProbe = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Probe tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName } = metadata;\n    const { points } = data.handles;\n\n    const displayText = getDisplayText(annotation);\n    return {\n      uid: annotationUID,\n      points,\n      metadata,\n      toolName: metadata.toolName,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType?.(toolName) ?? null,\n    };\n  },\n};\n\nfunction getDisplayText(annotation) {\n  const { data } = annotation;\n\n  if (!data) {\n    return [''];\n  }\n  const { labels } = data;\n\n  const displayText = [];\n\n  for (const label of labels) {\n    // make this generic\n    if (label.label === '33636980076') {\n      displayText.push(`Finding Site: ${label.value}`);\n    }\n  }\n\n  return displayText;\n}\n\nexport default SRSCOOR3DProbe;\n","import { addTool } from '@cornerstonejs/tools';\n\nexport default function addToolInstance(name: string, toolClass, configuration = {}): void {\n  class InstanceClass extends toolClass {\n    static toolName = name;\n    constructor(toolProps, defaultToolProps) {\n      toolProps.configuration = toolProps.configuration\n        ? { ...toolProps.configuration, ...configuration }\n        : configuration;\n      super(toolProps, defaultToolProps);\n    }\n  }\n  addTool(InstanceClass);\n}\n","import {\n  AngleTool,\n  annotation,\n  ArrowAnnotateTool,\n  BidirectionalTool,\n  CobbAngleTool,\n  EllipticalROITool,\n  CircleROITool,\n  LengthTool,\n  PlanarFreehandROITool,\n  RectangleROITool,\n  utilities as csToolsUtils,\n} from '@cornerstonejs/tools';\nimport { Types, MeasurementService } from '@ohif/core';\nimport { StackViewport, utilities as csUtils } from '@cornerstonejs/core';\nimport { Enums as CSExtensionEnums } from '@ohif/extension-cornerstone';\nimport DICOMSRDisplayTool from './tools/DICOMSRDisplayTool';\nimport SCOORD3DPointTool from './tools/SCOORD3DPointTool';\nimport SRSCOOR3DProbeMapper from './utils/SRSCOOR3DProbeMapper';\nimport addToolInstance from './utils/addToolInstance';\nimport toolNames from './tools/toolNames';\n\nconst { CORNERSTONE_3D_TOOLS_SOURCE_NAME, CORNERSTONE_3D_TOOLS_SOURCE_VERSION } = CSExtensionEnums;\n\n/**\n * @param {object} configuration\n */\nexport default function init({\n  configuration = {},\n  servicesManager,\n}: Types.Extensions.ExtensionParams): void {\n  const { measurementService, cornerstoneViewportService } = servicesManager.services;\n\n  addToolInstance(toolNames.DICOMSRDisplay, DICOMSRDisplayTool);\n  addToolInstance(toolNames.SRLength, LengthTool);\n  addToolInstance(toolNames.SRBidirectional, BidirectionalTool);\n  addToolInstance(toolNames.SREllipticalROI, EllipticalROITool);\n  addToolInstance(toolNames.SRCircleROI, CircleROITool);\n  addToolInstance(toolNames.SRArrowAnnotate, ArrowAnnotateTool);\n  addToolInstance(toolNames.SRAngle, AngleTool);\n  addToolInstance(toolNames.SRPlanarFreehandROI, PlanarFreehandROITool);\n  addToolInstance(toolNames.SRRectangleROI, RectangleROITool);\n  addToolInstance(toolNames.SRSCOORD3DPoint, SCOORD3DPointTool);\n\n  // TODO - fix the SR display of Cobb Angle, as it joins the two lines\n  addToolInstance(toolNames.SRCobbAngle, CobbAngleTool);\n\n  const csTools3DVer1MeasurementSource = measurementService.getSource(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  const { POINT } = measurementService.VALUE_TYPES;\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'SRSCOORD3DPoint',\n    POINT,\n    SRSCOOR3DProbeMapper.toAnnotation,\n    SRSCOOR3DProbeMapper.toMeasurement\n  );\n\n  // Modify annotation tools to use dashed lines on SR\n  const dashedLine = {\n    lineDash: '4,4',\n  };\n  annotation.config.style.setToolGroupToolStyles('SRToolGroup', {\n    [toolNames.DICOMSRDisplay]: dashedLine,\n    SRLength: dashedLine,\n    SRBidirectional: dashedLine,\n    SREllipticalROI: dashedLine,\n    SRCircleROI: dashedLine,\n    SRArrowAnnotate: dashedLine,\n    SRCobbAngle: dashedLine,\n    SRAngle: dashedLine,\n    SRPlanarFreehandROI: dashedLine,\n    SRRectangleROI: dashedLine,\n    global: {},\n  });\n\n  measurementService.subscribe(\n    MeasurementService.EVENTS.JUMP_TO_MEASUREMENT_LAYOUT,\n    ({ viewportId, measurement, isConsumed }) => {\n      if (isConsumed) {\n        return;\n      }\n      try {\n        const currentViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n        const { viewPlaneNormal } = currentViewport.getCamera();\n        const referencedImageId = csToolsUtils.getClosestImageIdForStackViewport(\n          currentViewport as StackViewport,\n          measurement.points[0],\n          viewPlaneNormal\n        );\n        const imageIndex = (currentViewport as StackViewport)\n          .getImageIds()\n          .indexOf(referencedImageId);\n        csUtils.jumpToSlice(currentViewport.element, { imageIndex });\n      } catch (error) {\n        console.warn('Unable to jump to image based on measurement coordinate', error);\n      }\n    }\n  );\n}\n","import React from 'react';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport { srProtocol } from './getHangingProtocolModule';\nimport onModeEnter from './onModeEnter';\nimport getCommandsModule from './commandsModule';\nimport preRegistration from './init';\nimport { id } from './id.js';\nimport toolNames from './tools/toolNames';\nimport hydrateStructuredReport from './utils/hydrateStructuredReport';\nimport createReferencedImageDisplaySet from './utils/createReferencedImageDisplaySet';\nimport Enums from './enums';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './components/OHIFCornerstoneSRViewport');\n});\n\nconst OHIFCornerstoneSRViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n *\n */\nconst dicomSRExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n  onModeEnter,\n\n  preRegistration,\n\n  /**\n   *\n   *\n   * @param {object} [configuration={}]\n   * @param {object|array} [configuration.csToolsConfig] - Passed directly to `initCornerstoneTools`\n   */\n  getViewportModule({ servicesManager, extensionManager }) {\n    const ExtendedOHIFCornerstoneSRViewport = props => {\n      return (\n        <OHIFCornerstoneSRViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-sr', component: ExtendedOHIFCornerstoneSRViewport }];\n  },\n  getCommandsModule,\n  getSopClassHandlerModule,\n  // Include dynamically computed values such as toolNames not known till instantiation\n  getUtilityModule({ servicesManager }) {\n    return [\n      {\n        name: 'tools',\n        exports: {\n          toolNames,\n        },\n      },\n    ];\n  },\n};\n\nexport default dicomSRExtension;\n\n// Put static exports here so they can be type checked\nexport { hydrateStructuredReport, createReferencedImageDisplaySet, srProtocol, Enums, toolNames };\n","import { SOPClassHandlerId, SOPClassHandlerId3D } from './id';\n\nexport default function onModeEnter({ servicesManager }) {\n  const { displaySetService } = servicesManager.services;\n  const displaySetCache = displaySetService.getDisplaySetCache();\n\n  const srDisplaySets = [...displaySetCache.values()].filter(\n    ds => ds.SOPClassHandlerId === SOPClassHandlerId || ds.SOPClassHandlerId === SOPClassHandlerId3D\n  );\n\n  srDisplaySets.forEach(ds => {\n    // New mode route, allow SRs to be hydrated again\n    ds.isHydrated = false;\n  });\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\n\nconst state = {\n  TrackingUniqueIdentifier: null,\n  trackingIdentifiersByViewportId: {},\n};\n\n/**\n * This file is being used to store the per-viewport state of the SR tools,\n * Since, all the toolStates are added to the cornerstoneTools, when displaying the SRTools,\n * if there are two viewports rendering the same imageId, we don't want to show\n * the same SR annotation twice on irrelevant viewport, hence, we are storing the state\n * of the SR tools in state here, so that we can filter them later.\n */\n\nfunction setTrackingUniqueIdentifiersForElement(\n  element,\n  trackingUniqueIdentifiers,\n  activeIndex = 0\n) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  state.trackingIdentifiersByViewportId[viewport.id] = {\n    trackingUniqueIdentifiers,\n    activeIndex,\n  };\n}\n\nfunction setActiveTrackingUniqueIdentifierForElement(element, TrackingUniqueIdentifier) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const trackingIdentifiersForElement = state.trackingIdentifiersByViewportId[viewport.id];\n\n  if (trackingIdentifiersForElement) {\n    const activeIndex = trackingIdentifiersForElement.trackingUniqueIdentifiers.findIndex(\n      tuid => tuid === TrackingUniqueIdentifier\n    );\n\n    trackingIdentifiersForElement.activeIndex = activeIndex;\n  }\n}\n\nfunction getTrackingUniqueIdentifiersForElement(element) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  if (state.trackingIdentifiersByViewportId[viewport.id]) {\n    return state.trackingIdentifiersByViewportId[viewport.id];\n  }\n\n  return { trackingUniqueIdentifiers: [] };\n}\n\nexport {\n  setTrackingUniqueIdentifiersForElement,\n  setActiveTrackingUniqueIdentifierForElement,\n  getTrackingUniqueIdentifiersForElement,\n};\n","import { DisplaySetService, classes } from '@ohif/core';\n\nconst ImageSet = classes.ImageSet;\n\nconst findInstance = (measurement, displaySetService: DisplaySetService) => {\n  const { displaySetInstanceUID, ReferencedSOPInstanceUID: sopUid } = measurement;\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n  if (!referencedDisplaySet.images) {\n    return;\n  }\n  return referencedDisplaySet.images.find(it => it.SOPInstanceUID === sopUid);\n};\n\n/** Finds references to display sets inside the measurements\n * contained within the provided display set.\n * @return an array of instances referenced.\n */\nconst findReferencedInstances = (displaySetService: DisplaySetService, displaySet) => {\n  const instances = [];\n  const instanceById = {};\n  for (const measurement of displaySet.measurements) {\n    const { imageId } = measurement;\n    if (!imageId) {\n      continue;\n    }\n    if (instanceById[imageId]) {\n      continue;\n    }\n\n    const instance = findInstance(measurement, displaySetService);\n    if (!instance) {\n      console.log('Measurement', measurement, 'had no instances found');\n      continue;\n    }\n\n    instanceById[imageId] = instance;\n    instances.push(instance);\n  }\n  return instances;\n};\n\n/**\n * Creates a new display set containing a single image instance for each\n * referenced image.\n *\n * @param displaySetService\n * @param displaySet - containing measurements referencing images.\n * @returns A new (registered/active) display set containing the referenced images\n */\nconst createReferencedImageDisplaySet = (displaySetService, displaySet) => {\n  const instances = findReferencedInstances(displaySetService, displaySet);\n  // This will be a  member function of the created image set\n  const updateInstances = function () {\n    this.images.splice(\n      0,\n      this.images.length,\n      ...findReferencedInstances(displaySetService, displaySet)\n    );\n    this.numImageFrames = this.images.length;\n  };\n\n  const imageSet = new ImageSet(instances);\n  const instance = instances[0];\n\n  if (!instance) {\n    return;\n  }\n\n  imageSet.setAttributes({\n    displaySetInstanceUID: imageSet.uid, // create a local alias for the imageSet UID\n    SeriesDate: instance.SeriesDate,\n    SeriesTime: instance.SeriesTime,\n    SeriesInstanceUID: imageSet.uid,\n    StudyInstanceUID: instance.StudyInstanceUID,\n    SeriesNumber: instance.SeriesNumber || 0,\n    SOPClassUID: instance.SOPClassUID,\n    SeriesDescription: `${displaySet.SeriesDescription} KO ${displaySet.instance.SeriesNumber}`,\n    Modality: 'KO',\n    isMultiFrame: false,\n    numImageFrames: instances.length,\n    SOPClassHandlerId: `@ohif/extension-default.sopClassHandlerModule.stack`,\n    isReconstructable: false,\n    // This object is made of multiple instances from other series\n    isCompositeStack: true,\n    madeInClient: true,\n    excludeFromThumbnailBrowser: true,\n    updateInstances,\n  });\n\n  displaySetService.addDisplaySets(imageSet);\n\n  return imageSet;\n};\n\nexport default createReferencedImageDisplaySet;\n","import { adaptersSR } from '@cornerstonejs/adapters';\n\nconst { CodeScheme: Cornerstone3DCodeScheme } = adaptersSR.Cornerstone3D;\n\n/**\n * Extracts the label from the toolData imported from dcmjs. We need to do this\n * as dcmjs does not depeend on OHIF/the measurementService, it just produces data for cornestoneTools.\n * This optional data is available for the consumer to process if they wish to.\n * @param {object} toolData The tooldata relating to the\n *\n * @returns {string} The extracted label.\n */\nexport default function getLabelFromDCMJSImportedToolData(toolData) {\n  const { findingSites = [], finding } = toolData;\n\n  let freeTextLabel = findingSites.find(\n    fs => fs.CodeValue === Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT\n  );\n\n  if (freeTextLabel) {\n    return freeTextLabel.CodeMeaning;\n  }\n\n  if (finding && finding.CodeValue === Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT) {\n    return finding.CodeMeaning;\n  }\n}\n","import { utilities, metaData } from '@cornerstonejs/core';\nimport OHIF, { DicomMetadataStore } from '@ohif/core';\nimport getLabelFromDCMJSImportedToolData from './getLabelFromDCMJSImportedToolData';\nimport { adaptersSR } from '@cornerstonejs/adapters';\nimport { annotation as CsAnnotation } from '@cornerstonejs/tools';\nimport { Enums as CSExtensionEnums } from '@ohif/extension-cornerstone';\n\nconst { locking } = CsAnnotation;\nconst { guid } = OHIF.utils;\nconst { MeasurementReport, CORNERSTONE_3D_TAG } = adaptersSR.Cornerstone3D;\nconst { CORNERSTONE_3D_TOOLS_SOURCE_NAME, CORNERSTONE_3D_TOOLS_SOURCE_VERSION } = CSExtensionEnums;\nconst supportedLegacyCornerstoneTags = ['cornerstoneTools@^4.0.0'];\n\nconst convertCode = (codingValues, code) => {\n  if (!code || code.CodingSchemeDesignator === 'CORNERSTONEJS') {\n    return;\n  }\n  const ref = `${code.CodingSchemeDesignator}:${code.CodeValue}`;\n  const ret = { ...codingValues[ref], ref, ...code, text: code.CodeMeaning };\n  return ret;\n};\n\nconst convertSites = (codingValues, sites) => {\n  if (!sites || !sites.length) {\n    return;\n  }\n  const ret = [];\n  // Do as a loop to convert away from Proxy instances\n  for (let i = 0; i < sites.length; i++) {\n    // Deal with irregular conversion from dcmjs\n    const site = convertCode(codingValues, sites[i][0] || sites[i]);\n    if (site) {\n      ret.push(site);\n    }\n  }\n  return (ret.length && ret) || undefined;\n};\n\n/**\n * Hydrates a structured report, for default viewports.\n *\n */\nexport default function hydrateStructuredReport(\n  { servicesManager, extensionManager, appConfig }: withAppTypes,\n  displaySetInstanceUID\n) {\n  const annotationManager = CsAnnotation.state.getAnnotationManager();\n  const dataSource = extensionManager.getActiveDataSource()[0];\n  const { measurementService, displaySetService, customizationService } = servicesManager.services;\n\n  const codingValues = customizationService.getCustomization('codingValues', {});\n\n  const { disableEditing } = customizationService.getCustomization(\n    'PanelMeasurement.disableEditing',\n    {\n      id: 'default.disableEditing',\n      disableEditing: false,\n    }\n  );\n\n  const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n  // TODO -> We should define a strict versioning somewhere.\n  const mappings = measurementService.getSourceMappings(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  if (!mappings || !mappings.length) {\n    throw new Error(\n      `Attempting to hydrate measurements service when no mappings present. This shouldn't be reached.`\n    );\n  }\n\n  const instance = DicomMetadataStore.getInstance(\n    displaySet.StudyInstanceUID,\n    displaySet.SeriesInstanceUID,\n    displaySet.SOPInstanceUID\n  );\n\n  const sopInstanceUIDToImageId = {};\n  const imageIdsForToolState = {};\n\n  displaySet.measurements.forEach(measurement => {\n    const { ReferencedSOPInstanceUID, imageId, frameNumber } = measurement;\n\n    if (!sopInstanceUIDToImageId[ReferencedSOPInstanceUID]) {\n      sopInstanceUIDToImageId[ReferencedSOPInstanceUID] = imageId;\n      imageIdsForToolState[ReferencedSOPInstanceUID] = [];\n    }\n    if (!imageIdsForToolState[ReferencedSOPInstanceUID][frameNumber]) {\n      imageIdsForToolState[ReferencedSOPInstanceUID][frameNumber] = imageId;\n    }\n  });\n\n  const datasetToUse = _mapLegacyDataSet(instance);\n\n  // Use dcmjs to generate toolState.\n  let storedMeasurementByAnnotationType = MeasurementReport.generateToolState(\n    datasetToUse,\n    // NOTE: we need to pass in the imageIds to dcmjs since the we use them\n    // for the imageToWorld transformation. The following assumes that the order\n    // that measurements were added to the display set are the same order as\n    // the measurementGroups in the instance.\n    sopInstanceUIDToImageId,\n    utilities.imageToWorldCoords,\n    metaData\n  );\n\n  const onBeforeSRHydration =\n    customizationService.getModeCustomization('onBeforeSRHydration')?.value;\n\n  if (typeof onBeforeSRHydration === 'function') {\n    storedMeasurementByAnnotationType = onBeforeSRHydration({\n      storedMeasurementByAnnotationType,\n      displaySet,\n    });\n  }\n\n  // Filter what is found by DICOM SR to measurements we support.\n  const mappingDefinitions = mappings.map(m => m.annotationType);\n  const hydratableMeasurementsInSR = {};\n\n  Object.keys(storedMeasurementByAnnotationType).forEach(key => {\n    if (mappingDefinitions.includes(key)) {\n      hydratableMeasurementsInSR[key] = storedMeasurementByAnnotationType[key];\n    }\n  });\n\n  // Set the series touched as tracked.\n  const imageIds = [];\n\n  // TODO: notification if no hydratable?\n  Object.keys(hydratableMeasurementsInSR).forEach(annotationType => {\n    const toolDataForAnnotationType = hydratableMeasurementsInSR[annotationType];\n\n    toolDataForAnnotationType.forEach(toolData => {\n      // Add the measurement to toolState\n      // dcmjs and Cornerstone3D has structural defect in supporting multi-frame\n      // files, and looking up the imageId from sopInstanceUIDToImageId results\n      // in the wrong value.\n      const frameNumber = (toolData.annotation.data && toolData.annotation.data.frameNumber) || 1;\n      const imageId =\n        imageIdsForToolState[toolData.sopInstanceUid][frameNumber] ||\n        sopInstanceUIDToImageId[toolData.sopInstanceUid];\n\n      if (!imageIds.includes(imageId)) {\n        imageIds.push(imageId);\n      }\n    });\n  });\n\n  let targetStudyInstanceUID;\n  const SeriesInstanceUIDs = [];\n\n  for (let i = 0; i < imageIds.length; i++) {\n    const imageId = imageIds[i];\n    const { SeriesInstanceUID, StudyInstanceUID } = metaData.get('instance', imageId);\n\n    if (!SeriesInstanceUIDs.includes(SeriesInstanceUID)) {\n      SeriesInstanceUIDs.push(SeriesInstanceUID);\n    }\n\n    if (!targetStudyInstanceUID) {\n      targetStudyInstanceUID = StudyInstanceUID;\n    } else if (targetStudyInstanceUID !== StudyInstanceUID) {\n      console.warn('NO SUPPORT FOR SRs THAT HAVE MEASUREMENTS FROM MULTIPLE STUDIES.');\n    }\n  }\n\n  Object.keys(hydratableMeasurementsInSR).forEach(annotationType => {\n    const toolDataForAnnotationType = hydratableMeasurementsInSR[annotationType];\n\n    toolDataForAnnotationType.forEach(toolData => {\n      // Add the measurement to toolState\n      // dcmjs and Cornerstone3D has structural defect in supporting multi-frame\n      // files, and looking up the imageId from sopInstanceUIDToImageId results\n      // in the wrong value.\n      const frameNumber = (toolData.annotation.data && toolData.annotation.data.frameNumber) || 1;\n      const imageId =\n        imageIdsForToolState[toolData.sopInstanceUid][frameNumber] ||\n        sopInstanceUIDToImageId[toolData.sopInstanceUid];\n\n      toolData.uid = guid();\n\n      const instance = metaData.get('instance', imageId);\n      const {\n        FrameOfReferenceUID,\n        // SOPInstanceUID,\n        // SeriesInstanceUID,\n        // StudyInstanceUID,\n      } = instance;\n\n      const annotation = {\n        annotationUID: toolData.annotation.annotationUID,\n        data: toolData.annotation.data,\n        metadata: {\n          toolName: annotationType,\n          referencedImageId: imageId,\n          FrameOfReferenceUID,\n        },\n      };\n\n      const source = measurementService.getSource(\n        CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n        CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n      );\n      annotation.data.label = getLabelFromDCMJSImportedToolData(toolData);\n      annotation.data.finding = convertCode(codingValues, toolData.finding?.[0]);\n      annotation.data.findingSites = convertSites(codingValues, toolData.findingSites);\n      annotation.data.site = annotation.data.findingSites?.[0];\n\n      const matchingMapping = mappings.find(m => m.annotationType === annotationType);\n\n      const newAnnotationUID = measurementService.addRawMeasurement(\n        source,\n        annotationType,\n        { annotation },\n        matchingMapping.toMeasurementSchema,\n        dataSource\n      );\n\n      if (disableEditing) {\n        const addedAnnotation = annotationManager.getAnnotation(newAnnotationUID);\n        locking.setAnnotationLocked(addedAnnotation, true);\n      }\n\n      if (!imageIds.includes(imageId)) {\n        imageIds.push(imageId);\n      }\n    });\n  });\n\n  displaySet.isHydrated = true;\n\n  return {\n    StudyInstanceUID: targetStudyInstanceUID,\n    SeriesInstanceUIDs,\n  };\n}\n\nfunction _mapLegacyDataSet(dataset) {\n  const REPORT = 'Imaging Measurements';\n  const GROUP = 'Measurement Group';\n  const TRACKING_IDENTIFIER = 'Tracking Identifier';\n\n  // Identify the Imaging Measurements\n  const imagingMeasurementContent = toArray(dataset.ContentSequence).find(\n    codeMeaningEquals(REPORT)\n  );\n\n  // Retrieve the Measurements themselves\n  const measurementGroups = toArray(imagingMeasurementContent.ContentSequence).filter(\n    codeMeaningEquals(GROUP)\n  );\n\n  // For each of the supported measurement types, compute the measurement data\n  const measurementData = {};\n\n  const cornerstoneToolClasses = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;\n\n  const registeredToolClasses = [];\n\n  Object.keys(cornerstoneToolClasses).forEach(key => {\n    registeredToolClasses.push(cornerstoneToolClasses[key]);\n    measurementData[key] = [];\n  });\n\n  measurementGroups.forEach((measurementGroup, index) => {\n    const measurementGroupContentSequence = toArray(measurementGroup.ContentSequence);\n\n    const TrackingIdentifierGroup = measurementGroupContentSequence.find(\n      contentItem => contentItem.ConceptNameCodeSequence.CodeMeaning === TRACKING_IDENTIFIER\n    );\n\n    const TrackingIdentifier = TrackingIdentifierGroup.TextValue;\n\n    let [cornerstoneTag, toolName] = TrackingIdentifier.split(':');\n    if (supportedLegacyCornerstoneTags.includes(cornerstoneTag)) {\n      cornerstoneTag = CORNERSTONE_3D_TAG;\n    }\n\n    const mappedTrackingIdentifier = `${cornerstoneTag}:${toolName}`;\n\n    TrackingIdentifierGroup.TextValue = mappedTrackingIdentifier;\n  });\n\n  return dataset;\n}\n\nconst toArray = function (x) {\n  return Array.isArray(x) ? x : [x];\n};\n\nconst codeMeaningEquals = codeMeaningName => {\n  return contentItem => {\n    return contentItem.ConceptNameCodeSequence.CodeMeaning === codeMeaningName;\n  };\n};\n"],"names":["CodeScheme","Cornerstone3DCodeScheme","adaptersSR","Cornerstone3D","SCOORDTypes","POINT","MULTIPOINT","POLYLINE","CIRCLE","ELLIPSE","CodeNameCodeSequenceValues","ImagingMeasurementReport","ImageLibrary","ImagingMeasurements","MeasurementGroup","ImageLibraryGroup","TrackingUniqueIdentifier","TrackingIdentifier","Finding","FindingSite","FindingSiteSCT","CodingSchemeDesignators","SRT","SCT","CornerstoneCodeSchemes","CodingSchemeDesignator","RelationshipType","INFERRED_FROM","CONTAINS","EPSILON","getRenderableCoords","GraphicData","ValueType","imageId","renderableData","i","length","push","worldPos","utilities","GraphicType","pointsWorld","center","onPerimeter","radius","vec3","imagePlaneModule","metaData","Error","columnCosines","rowCosines","firstAxisStart","firstAxisEnd","secondAxisStart","secondAxisEnd","majorAxisStart","majorAxisEnd","minorAxisStart","minorAxisEnd","majorAxisVec","minorAxisVec","columnCosinesVec","projectedMajorAxisOnColVec","Math","abs","projectedMinorAxisOnColVec","absoluteOfMajorDotProduct","absoluteOfMinorDotProduct","console","warn","DICOMSRDisplay","SRLength","SRBidirectional","SREllipticalROI","SRCircleROI","SRArrowAnnotate","SRAngle","SRCobbAngle","SRRectangleROI","SRPlanarFreehandROI","SRSCOORD3DPoint","addSRAnnotation","measurement","frameNumber","toolName","toolNames","coords","reduce","acc","coordProps","getRenderableData","valueType","graphicType","graphicTypePoints","frameOfReferenceUID","ReferencedFrameOfReferenceSequence","SRAnnotation","annotationUID","highlighted","isLocked","invalidated","metadata","FrameOfReferenceUID","referencedImageId","data","label","labels","value","undefined","displayText","handles","textBox","points","cachedStats","annotation","debug","cornerstoneAdapters","MeasurementReport","CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE","supportedLegacyCornerstoneTags","CORNERSTONE_3D_TAG","id","packageJson","SOPClassHandlerName","SOPClassHandlerId","SOPClassHandlerName3D","SOPClassHandlerId3D","sopClassDictionary","utils","CORNERSTONE_3D_TOOLS_SOURCE_NAME","CORNERSTONE_3D_TOOLS_SOURCE_VERSION","CSExtensionEnums","ImageSet","MetadataProvider","metadataProvider","classes","sopClassUids","BasicTextSR","EnhancedSR","ComprehensiveSR","validateSameStudyUID","uid","instances","forEach","it","StudyInstanceUID","SOPInstanceUID","addInstances","displaySetService","this","sortStudyInstances","instance","isLoaded","_getDisplaySetsFromSeries","servicesManager","extensionManager","SeriesInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","ConceptNameCodeSequence","SOPClassUID","is3DSR","Comprehensive3DSR","isImagingMeasurementReport","CodeValue","displaySet","Modality","displaySetInstanceUID","guid","referencedImages","measurements","isDerivedDisplaySet","load","async","srDisplaySet","measurementService","services","dataSources","getDataSources","dataSource","ContentSequence","retrieveBulkData","obj","parentObj","key","prop","Array","isArray","Promise","all","map","item","retrieve","bulkDataURI","BulkDataURI","Float32Array","ImagingMeasurementReportContentSequence","find","_getSequenceAsArray","ReferencedSOPSequence","ref","ReferencedSOPClassUID","ReferencedSOPInstanceUID","_getReferencedImagesList","mergedContentSequencesByTrackingUniqueIdentifiers","MeasurementGroups","TrackingUniqueIdentifierItem","trackingUniqueIdentifier","UID","_getMergedContentSequencesByTrackingUniqueIdentifiers","filter","Object","keys","mergedContentSequence","some","group","graphicItem","UIDREFContentItem","TrackingIdentifierContentItem","NUMContentItems","loaded","_getCoordsFromSCOORDOrSCOORD3D","TextValue","MeasuredValueSequence","_getLabelFromMeasuredValueSequence","findingSites","ConceptCodeSequence","CodeMeaning","_processTID1410Measurement","finding","includes","codeValues","CORNERSTONEFREETEXT","cornerstoneFreeTextFindingSite","_processNonGeometricallyDefinedMeasurement","_processMeasurement","_getMeasurements","mappings","getSourceMappings","isHydrated","isRehydratable","mappingDefinitions","m","annotationType","adapterKeys","adapterKey","isValidCornerstoneTrackingIdentifier","adapters","adapter","cornerstoneTag","split","mappedTrackingIdentifier","log","activeDisplaySets","activeDisplaySet","_checkIfCanAddMeasurementsToDisplaySet","subscribe","EVENTS","DISPLAY_SETS_ADDED","displaySetsAdded","newDisplaySet","_load","customizationService","unloadedMeasurements","unsupported","imageIdMap","Map","imageIds","getImageIdsForDisplaySet","getUIDsFromImageID","set","j","onBeforeSRAddMeasurement","getModeCustomization","referencedSOPSequence","frame","ReferencedFrameNumber","get","_measurementReferencesSOPInstanceUID","splice","Number","coord","ReferencedFrameOfReferenceUID","NumericValue","MeasurementUnitsCodeSequence","toFixed","sequence","getDisplaySetsFromSeries","name","srProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","srDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","OHIF","measurementData","additionalFindingTypes","filteredToolState","addToFilteredToolState","toolType","imageIdSpecificToolState","measurementDataI","md","toolData","assign","uids","slice","annotationManager","framesOfReference","getFramesOfReference","frameOfReference","frameOfReferenceAnnotations","getAnnotations","toolTypes","annotations","k","uidIndex","findIndex","props","actions","downloadReport","options","srDataset","generateReport","reportBlob","dcmjs","datasetToBlob","objectUrl","URL","createObjectURL","window","location","storeMeasurements","info","store","dicom","error","reject","naturalizedReport","_generateReport","getFilteredCornerstoneToolState","report","dataset","SpecificCharacterSet","onBeforeDicomStore","dicomDict","deleteStudyMetadataPromise","DicomMetadataStore","message","definitions","commandFn","defaultContext","DICOMSRDisplayTool","AnnotationTool","constructor","toolProps","defaultToolProps","configuration","super","isPointNearTool","getHandleNearImagePoint","renderAnnotation","enabledElement","svgDrawingHelper","viewport","element","getToolName","filterInteractableAnnotationsForElement","trackingUniqueIdentifiersForElement","getTrackingUniqueIdentifiersForElement","activeIndex","trackingUniqueIdentifiers","activeTrackingUniqueIdentifier","filteredAnnotations","_actors","size","styleSpecifier","viewportId","style","annotationStyle","groupStyle","getToolGroupToolStyles","lineWidth","getStyle","lineDash","color","renderableDataForGraphicType","renderMethod","canvasCoordinatesAdapter","renderPoint","renderMultipoint","renderPolyLine","renderEllipse","canvasCoordinates","renderTextBox","_getTextBoxLinesFromLabels","labelLength","min","lines","labelEntry","_labelToShorthand","drawingOptions","width","allCanvasCoordinates","index","p","worldToCanvas","lineUID","drawing","concat","point","imagePixelModule","xOffset","yOffset","imagePoint","csUtils","arrowEnd","arrowUID","ellipsePointsWorld","rotation","getRotation","canvasCorners","adaptedCanvasCoordinates","textLines","canvasTextBoxCoords","worldPosition","canvasToWorld","textBoxPosition","textBoxOptions","getLinkedTextBoxStyle","boundingBox","x","left","y","top","height","worldBoundingBox","topLeft","topRight","bottomLeft","bottomRight","SHORT_HAND_MAP","AREA","Length","shortHand","SCOORD3DPointTool","AnnotationDisplayTool","isReferenceViewable","cameraFocalPoint","asNearbyProjection","arrowPointCanvas","specifications","visibility","fontFamily","fontSize","shadow","background","toAnnotation","toMeasurement","csToolsEventDetail","CornerstoneViewportService","getValueTypeFromToolType","getDisplayText","type","addToolInstance","toolClass","InstanceClass","addTool","Component","React","OHIFCornerstoneSRViewport","fallback","onModeEnter","getDisplaySetCache","values","ds","preRegistration","cornerstoneViewportService","LengthTool","BidirectionalTool","EllipticalROITool","CircleROITool","ArrowAnnotateTool","AngleTool","PlanarFreehandROITool","RectangleROITool","CobbAngleTool","csTools3DVer1MeasurementSource","getSource","VALUE_TYPES","addMapping","SRSCOOR3DProbeMapper","dashedLine","setToolGroupToolStyles","global","MeasurementService","JUMP_TO_MEASUREMENT_LAYOUT","isConsumed","currentViewport","getCornerstoneViewport","viewPlaneNormal","getCamera","csToolsUtils","imageIndex","getImageIds","indexOf","getViewportModule","component","_extends","getCommandsModule","getSopClassHandlerModule","getUtilityModule","exports","state","trackingIdentifiersByViewportId","setTrackingUniqueIdentifiersForElement","getEnabledElement","findInstance","sopUid","referencedDisplaySet","getDisplaySetByUID","images","findReferencedInstances","instanceById","createReferencedImageDisplaySet","imageSet","setAttributes","SeriesTime","isMultiFrame","numImageFrames","isReconstructable","isCompositeStack","madeInClient","excludeFromThumbnailBrowser","updateInstances","addDisplaySets","locking","CsAnnotation","convertCode","codingValues","code","text","convertSites","sites","ret","site","hydrateStructuredReport","appConfig","getActiveDataSource","getCustomization","disableEditing","getInstance","sopInstanceUIDToImageId","imageIdsForToolState","datasetToUse","REPORT","GROUP","TRACKING_IDENTIFIER","imagingMeasurementContent","toArray","codeMeaningEquals","measurementGroups","cornerstoneToolClasses","registeredToolClasses","measurementGroup","TrackingIdentifierGroup","contentItem","_mapLegacyDataSet","storedMeasurementByAnnotationType","generateToolState","onBeforeSRHydration","hydratableMeasurementsInSR","targetStudyInstanceUID","sopInstanceUid","SeriesInstanceUIDs","source","freeTextLabel","fs","getLabelFromDCMJSImportedToolData","matchingMapping","newAnnotationUID","addRawMeasurement","toMeasurementSchema","addedAnnotation","getAnnotation","setAnnotationLocked","codeMeaningName"],"sourceRoot":""}