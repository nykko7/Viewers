{"version":3,"file":"5717.bundle.b8aa8ab6825291a6bba0.js","mappings":"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K,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAA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","sources":["webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/drawImageSync.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/calculateTransform.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/addVolumesToViewports.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/addImageSlicesToViewports.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/Settings.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/cache/classes/Contour.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/cache/classes/ContourSet.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/cache/classes/Surface.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/enums/BlendModes.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/enums/GeometryType.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/enums/CalibrationTypes.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/enums/GenerateImageType.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/getEnabledElement.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/webWorkerManager/webWorkerManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/init.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/geometryLoader.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/imageLoader.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/utils/contourSet/createContourSet.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/utils/contourSet/validateContourSet.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/utils/surface/createSurface.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/utils/surface/validateSurface.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/volumeLoader.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/ProgressiveIterator.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/RLEVoxelMap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/actorCheck.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/applyPreset.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/autoLoad.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clamp.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/colormap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createLinearRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/decimate.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepClone.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestImageId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageSliceDataForVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getMinMax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSliceRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSpacingInNormalDirection.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getTargetVolumeAndSpacingInNormalDir.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVoiFromSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeActorCorners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeSliceRangeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportScrollInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasFloatScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasNaNValues.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageIdToURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageRetrieveMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/TargetEventListeners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/MultiTargetEventListenerManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRuntimeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calibratedPixelSpacingMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isOpposite.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/indexWithinDimensions.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportsContainingSameVolumes.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isPTPrescaledWithSUV.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasGPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasCPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/loadImageToCanvas.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/worldToImageCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageToWorldCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithImageURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestStackImageIndexForPoint.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getCurrentVolumeViewportSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/spatialRegistrationMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateViewportsSpatialRegistration.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageCornersInWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/PointsManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageLegacy.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isValidVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isVideoTransferSyntax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertStackToVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertVolumeToStackViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/roundNumber.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertToGrayscale.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRandomSampleFromArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/color.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/splitImageIdsBy4DTags.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getDynamicVolumeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clip.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scroll.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/jumpToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportModality.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/invertRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/makeVolumeMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/planar.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/pointInShapeCallback.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/snapFocalPointToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/sortImageIdsAndGetSpacing.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transferFunctionUtils.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformCanvasToIJK.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformIndexToWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformWorldToIndex.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/updateVTKImageDataWithCornerstoneImage.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/windowLevel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/MouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/ImageMouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGCursorDescriptor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGMouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/getSvgDrawingHelper.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/draw.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/setAttributesIfNecessary.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/setNewAttributesIfValid.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipseByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHeight.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPolyline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPath.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawTextBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLink.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLinkedTextBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRectByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRedactionRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/StrategyCallbacks.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/AnnotationStyleStates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/WorkerTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/contourSegmentation/contourSegmentationCompleted.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/imageChangeEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/annotationInterpolationEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraResetEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createPresentationViewSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createImageSliceSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createSlabThicknessSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelRegionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AdvancedMagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OverlayGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SegmentationIntersectionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SculptorTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/HeightTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ETDRSGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundDirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/KeyImageTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AnnotationEraserTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OrientationMarkerTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentSelectTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/VideoRedactionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/AnnotationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/ToolStyle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/helpers.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/getAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/helpers/state.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStyle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentationsToViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationDataModified.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getCurrentLabelmapImageIdForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getNextColorLUTIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportIdsWithSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeVolumeLabelmapFromStack.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Contour/computeAndAddContourRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Labelmap/computeAndAddLabelmapRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Surface/computeAndAddSurfaceRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Surface/updateSurfaceData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Surface/createAndCacheSurfacesFromRaw.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Surface/convertContourToSurface.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Surface/convertLabelmapToSurface.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/Surface/surfaceComputationStrategies.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/canComputeRequestedRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/polySeg/computeAndAddRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getStackSegmentationImageIdsForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateLabelmapSegmentationImageReferences.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/ToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getAllToolGroups.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupsWithToolName.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/addTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/state.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationDisplayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/BaseTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Surface/surfaceDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/types/ContourAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getViewportsForAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/findClosestPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getUniqueSegmentIndices.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/invalidateBrushCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/Core/CellArray.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/ImageData.js","webpack:///../../../node_modules/lodash.get/index.js","webpack:///../../../node_modules/comlink/dist/esm/comlink.mjs","webpack:///../../../node_modules/d3-array/src/transpose.js","webpack:///../../../node_modules/d3-array/src/zip.js","webpack:///../../../node_modules/d3-array/src/min.js","webpack:///../../../node_modules/d3-interpolate/src/quantize.js"],"sourcesContent":["import now from './rendering/now';\nimport { renderColorImage } from './rendering/renderColorImage';\nimport { renderGrayscaleImage } from './rendering/renderGrayscaleImage';\nimport { renderPseudoColorImage } from './rendering/renderPseudoColorImage';\nexport default function (enabledElement, invalidated) {\n    const image = enabledElement.image;\n    if (!enabledElement.canvas || !enabledElement.image) {\n        return;\n    }\n    const start = now();\n    image.stats = {\n        lastGetPixelDataTime: -1.0,\n        lastStoredPixelDataToCanvasImageDataTime: -1.0,\n        lastPutImageDataTime: -1.0,\n        lastRenderTime: -1.0,\n        lastLutGenerateTime: -1.0,\n    };\n    if (image) {\n        let render = image.render;\n        if (!render) {\n            if (enabledElement.viewport.colormap) {\n                render = renderPseudoColorImage;\n            }\n            else if (image.color) {\n                render = renderColorImage;\n            }\n            else {\n                render = renderGrayscaleImage;\n            }\n        }\n        render(enabledElement, invalidated);\n    }\n    const renderTimeInMs = now() - start;\n    image.stats.lastRenderTime = renderTimeInMs;\n    enabledElement.invalid = false;\n    enabledElement.needsRedraw = false;\n}\n","import { Transform } from './transform';\nexport default function (enabledElement, scale) {\n    const transform = new Transform();\n    if (!enabledElement.viewport.displayedArea) {\n        return transform;\n    }\n    transform.translate(enabledElement.canvas.width / 2, enabledElement.canvas.height / 2);\n    const angle = enabledElement.viewport.rotation;\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    let widthScale = enabledElement.viewport.scale;\n    let heightScale = enabledElement.viewport.scale;\n    const width = enabledElement.viewport.displayedArea.brhc.x -\n        (enabledElement.viewport.displayedArea.tlhc.x - 1);\n    const height = enabledElement.viewport.displayedArea.brhc.y -\n        (enabledElement.viewport.displayedArea.tlhc.y - 1);\n    if (enabledElement.viewport.displayedArea.presentationSizeMode === 'NONE') {\n        if (enabledElement.image.rowPixelSpacing <\n            enabledElement.image.columnPixelSpacing) {\n            widthScale *=\n                enabledElement.image.columnPixelSpacing /\n                    enabledElement.image.rowPixelSpacing;\n        }\n        else if (enabledElement.image.columnPixelSpacing <\n            enabledElement.image.rowPixelSpacing) {\n            heightScale *=\n                enabledElement.image.rowPixelSpacing /\n                    enabledElement.image.columnPixelSpacing;\n        }\n    }\n    else {\n        widthScale = enabledElement.viewport.displayedArea.columnPixelSpacing;\n        heightScale = enabledElement.viewport.displayedArea.rowPixelSpacing;\n        if (enabledElement.viewport.displayedArea.presentationSizeMode ===\n            'SCALE TO FIT') {\n            const verticalScale = enabledElement.canvas.height / (height * heightScale);\n            const horizontalScale = enabledElement.canvas.width / (width * widthScale);\n            widthScale = heightScale = Math.min(horizontalScale, verticalScale);\n            if (enabledElement.viewport.displayedArea.rowPixelSpacing <\n                enabledElement.viewport.displayedArea.columnPixelSpacing) {\n                widthScale *=\n                    enabledElement.viewport.displayedArea.columnPixelSpacing /\n                        enabledElement.viewport.displayedArea.rowPixelSpacing;\n            }\n            else if (enabledElement.viewport.displayedArea.columnPixelSpacing <\n                enabledElement.viewport.displayedArea.rowPixelSpacing) {\n                heightScale *=\n                    enabledElement.viewport.displayedArea.rowPixelSpacing /\n                        enabledElement.viewport.displayedArea.columnPixelSpacing;\n            }\n        }\n    }\n    transform.scale(widthScale, heightScale);\n    if (angle !== 0) {\n        transform.rotate((-angle * Math.PI) / 180);\n    }\n    transform.translate(enabledElement.viewport.translation.x, enabledElement.viewport.translation.y);\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    if (scale !== undefined) {\n        transform.scale(scale, scale);\n    }\n    if (enabledElement.viewport.hflip) {\n        transform.scale(-1, 1);\n    }\n    if (enabledElement.viewport.vflip) {\n        transform.scale(1, -1);\n    }\n    transform.translate(-width / 2, -height / 2);\n    return transform;\n}\n","import createViewport from './createViewport';\nimport getImageFitScale from './getImageFitScale';\nexport default function (canvas, image, modality, colormap) {\n    if (canvas === undefined) {\n        throw new Error('getDefaultViewport: parameter canvas must not be undefined');\n    }\n    if (image === undefined) {\n        return createViewport();\n    }\n    const scale = getImageFitScale(canvas, image, 0).scaleFactor;\n    let voi;\n    if (modality === 'PT' && image.isPreScaled) {\n        voi = {\n            windowWidth: 5,\n            windowCenter: 2.5,\n        };\n    }\n    else if (image.windowWidth !== undefined &&\n        image.windowCenter !== undefined) {\n        voi = {\n            windowWidth: Array.isArray(image.windowWidth)\n                ? image.windowWidth[0]\n                : image.windowWidth,\n            windowCenter: Array.isArray(image.windowCenter)\n                ? image.windowCenter[0]\n                : image.windowCenter,\n        };\n    }\n    return {\n        scale,\n        translation: {\n            x: 0,\n            y: 0,\n        },\n        voi,\n        invert: image.invert,\n        pixelReplication: false,\n        rotation: 0,\n        hflip: false,\n        vflip: false,\n        modalityLUT: image.modalityLUT,\n        modality,\n        voiLUT: image.voiLUT,\n        colormap: colormap !== undefined ? colormap : image.colormap,\n        displayedArea: {\n            tlhc: {\n                x: 1,\n                y: 1,\n            },\n            brhc: {\n                x: image.columns,\n                y: image.rows,\n            },\n            rowPixelSpacing: image.rowPixelSpacing === undefined ? 1 : image.rowPixelSpacing,\n            columnPixelSpacing: image.columnPixelSpacing === undefined ? 1 : image.columnPixelSpacing,\n            presentationSizeMode: 'NONE',\n        },\n    };\n}\n","import BaseVolumeViewport from '../BaseVolumeViewport';\nasync function addVolumesToViewports(renderingEngine, volumeInputs, viewportIds, immediateRender = false, suppressEvents = false) {\n    for (const viewportId of viewportIds) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        if (!viewport) {\n            throw new Error(`Viewport with Id ${viewportId} does not exist`);\n        }\n        if (!(viewport instanceof BaseVolumeViewport)) {\n            console.warn(`Viewport with Id ${viewportId} is not a BaseVolumeViewport. Cannot add volume to this viewport.`);\n            return;\n        }\n    }\n    const addVolumePromises = viewportIds.map(async (viewportId) => {\n        const viewport = renderingEngine.getViewport(viewportId);\n        await viewport.addVolumes(volumeInputs, immediateRender, suppressEvents);\n    });\n    await Promise.all(addVolumePromises);\n    return;\n}\nexport default addVolumesToViewports;\n","async function addImageSlicesToViewports(renderingEngine, stackInputs, viewportIds) {\n    for (const viewportId of viewportIds) {\n        const viewport = renderingEngine.getStackViewport(viewportId);\n        if (!viewport) {\n            throw new Error(`Viewport with Id ${viewportId} does not exist`);\n        }\n        if (!viewport.addImages) {\n            console.warn(`Viewport with Id ${viewportId} does not have addImages. Cannot add image segmentation to this viewport.`);\n            return;\n        }\n    }\n    const addStackPromises = viewportIds.map(async (viewportId) => {\n        const viewport = renderingEngine.getStackViewport(viewportId);\n        viewport.addImages(stackInputs);\n    });\n    await Promise.all(addStackPromises);\n}\nexport default addImageSlicesToViewports;\n","const DEFAULT_SETTINGS = Symbol('DefaultSettings');\nconst RUNTIME_SETTINGS = Symbol('RuntimeSettings');\nconst OBJECT_SETTINGS_MAP = Symbol('ObjectSettingsMap');\nconst DICTIONARY = Symbol('Dictionary');\nexport default class Settings {\n    constructor(base) {\n        const dictionary = Object.create((base instanceof Settings && DICTIONARY in base\n            ? base[DICTIONARY]\n            : null));\n        Object.seal(Object.defineProperty(this, DICTIONARY, {\n            value: dictionary,\n        }));\n    }\n    set(key, value) {\n        return set(this[DICTIONARY], key, value, null);\n    }\n    get(key) {\n        return get(this[DICTIONARY], key);\n    }\n    unset(key) {\n        return unset(this[DICTIONARY], key + '');\n    }\n    forEach(callback) {\n        iterate(this[DICTIONARY], callback);\n    }\n    extend() {\n        return new Settings(this);\n    }\n    import(root) {\n        if (isPlainObject(root)) {\n            Object.keys(root).forEach((key) => {\n                set(this[DICTIONARY], key, root[key], null);\n            });\n        }\n    }\n    dump() {\n        const context = {};\n        iterate(this[DICTIONARY], (key, value) => {\n            if (typeof value !== 'undefined') {\n                deepSet(context, key, value);\n            }\n        });\n        return context;\n    }\n    static assert(subject) {\n        return subject instanceof Settings\n            ? subject\n            : Settings.getRuntimeSettings();\n    }\n    static getDefaultSettings(subfield = null) {\n        let defaultSettings = Settings[DEFAULT_SETTINGS];\n        if (!(defaultSettings instanceof Settings)) {\n            defaultSettings = new Settings();\n            Settings[DEFAULT_SETTINGS] = defaultSettings;\n        }\n        if (subfield) {\n            const settingObj = {};\n            defaultSettings.forEach((name) => {\n                if (name.startsWith(subfield)) {\n                    const setting = name.split(`${subfield}.`)[1];\n                    settingObj[setting] = defaultSettings.get(name);\n                }\n            });\n            return settingObj;\n        }\n        return defaultSettings;\n    }\n    static getRuntimeSettings() {\n        let runtimeSettings = Settings[RUNTIME_SETTINGS];\n        if (!(runtimeSettings instanceof Settings)) {\n            runtimeSettings = new Settings(Settings.getDefaultSettings());\n            Settings[RUNTIME_SETTINGS] = runtimeSettings;\n        }\n        return runtimeSettings;\n    }\n    static getObjectSettings(subject, from) {\n        let settings = null;\n        if (subject instanceof Settings) {\n            settings = subject;\n        }\n        else if (typeof subject === 'object' && subject !== null) {\n            let objectSettingsMap = Settings[OBJECT_SETTINGS_MAP];\n            if (!(objectSettingsMap instanceof WeakMap)) {\n                objectSettingsMap = new WeakMap();\n                Settings[OBJECT_SETTINGS_MAP] = objectSettingsMap;\n            }\n            settings = objectSettingsMap.get(subject);\n            if (!(settings instanceof Settings)) {\n                settings = new Settings(Settings.assert(Settings.getObjectSettings(from)));\n                objectSettingsMap.set(subject, settings);\n            }\n        }\n        return settings;\n    }\n    static extendRuntimeSettings() {\n        return Settings.getRuntimeSettings().extend();\n    }\n}\nfunction unset(dictionary, name) {\n    if (name.endsWith('.')) {\n        let deleteCount = 0;\n        const namespace = name;\n        const base = namespace.slice(0, -1);\n        const deleteAll = base.length === 0;\n        for (const key in dictionary) {\n            if (Object.prototype.hasOwnProperty.call(dictionary, key) &&\n                (deleteAll || key.startsWith(namespace) || key === base)) {\n                delete dictionary[key];\n                ++deleteCount;\n            }\n        }\n        return deleteCount > 0;\n    }\n    return delete dictionary[name];\n}\nfunction iterate(dictionary, callback) {\n    for (const key in dictionary) {\n        callback(key, dictionary[key]);\n    }\n}\nfunction setAll(dictionary, prefix, record, references) {\n    let failCount;\n    if (references.has(record)) {\n        return set(dictionary, prefix, null, references);\n    }\n    references.add(record);\n    failCount = 0;\n    for (const field in record) {\n        if (Object.prototype.hasOwnProperty.call(record, field)) {\n            const key = field.length === 0 ? prefix : `${prefix}.${field}`;\n            if (!set(dictionary, key, record[field], references)) {\n                ++failCount;\n            }\n        }\n    }\n    references.delete(record);\n    return failCount === 0;\n}\nfunction set(dictionary, key, value, references) {\n    if (isValidKey(key)) {\n        if (isPlainObject(value)) {\n            return setAll(dictionary, key, value, references instanceof WeakSet ? references : new WeakSet());\n        }\n        dictionary[key] = value;\n        return true;\n    }\n    return false;\n}\nfunction get(dictionary, key) {\n    return dictionary[key];\n}\nfunction isValidKey(key) {\n    let last, current, previous;\n    if (typeof key !== 'string' || (last = key.length - 1) < 0) {\n        return false;\n    }\n    previous = -1;\n    while ((current = key.indexOf('.', previous + 1)) >= 0) {\n        if (current - previous < 2 || current === last) {\n            return false;\n        }\n        previous = current;\n    }\n    return true;\n}\nfunction isPlainObject(subject) {\n    if (typeof subject === 'object' && subject !== null) {\n        const prototype = Object.getPrototypeOf(subject);\n        if (prototype === Object.prototype || prototype === null) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction deepSet(context, key, value) {\n    const separator = key.indexOf('.');\n    if (separator >= 0) {\n        const subKey = key.slice(0, separator);\n        let subContext = context[subKey];\n        if (typeof subContext !== 'object' || subContext === null) {\n            const subContextValue = subContext;\n            subContext = {};\n            if (typeof subContextValue !== 'undefined') {\n                subContext[''] = subContextValue;\n            }\n            context[subKey] = subContext;\n        }\n        deepSet(subContext, key.slice(separator + 1, key.length), value);\n    }\n    else {\n        context[key] = value;\n    }\n}\nSettings.getDefaultSettings().set('useCursors', true);\n","export class Contour {\n    constructor(props) {\n        const { points, type } = props.data;\n        this.id = props.id;\n        this._points = points;\n        this._type = type;\n        this._color = props.color;\n        this._segmentIndex = props.segmentIndex;\n        this.sizeInBytes = this._getSizeInBytes();\n    }\n    _getSizeInBytes() {\n        return this._points.length * 3;\n    }\n    get points() {\n        return this._points;\n    }\n    set points(value) {\n        this._points = value;\n    }\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._color = value;\n    }\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value;\n    }\n    get segmentIndex() {\n        return this._segmentIndex;\n    }\n    set segmentIndex(value) {\n        this._segmentIndex = value;\n    }\n    get flatPointsArray() {\n        return this._points.map((point) => [...point]).flat();\n    }\n}\nexport default Contour;\n","import Contour from './Contour';\nexport class ContourSet {\n    constructor(props) {\n        this._color = [200, 0, 0];\n        this.id = props.id;\n        this._contours = [];\n        this._color = props.color ?? this._color;\n        this.frameOfReferenceUID = props.frameOfReferenceUID;\n        this._segmentIndex = props.segmentIndex;\n        this._createEachContour(props.data);\n        this.sizeInBytes = this._getSizeInBytes();\n    }\n    _createEachContour(contourDataArray) {\n        contourDataArray.forEach((contourData) => {\n            const { points, type, color } = contourData;\n            const contour = new Contour({\n                id: `${this.id}-segment-${this._segmentIndex}`,\n                data: {\n                    points,\n                    type,\n                    segmentIndex: this._segmentIndex,\n                    color: color ?? this._color,\n                },\n                segmentIndex: this._segmentIndex,\n                color: color ?? this._color,\n            });\n            this._contours.push(contour);\n        });\n        this._updateContourSetCentroid();\n    }\n    _updateContourSetCentroid() {\n        const numberOfPoints = this.totalNumberOfPoints;\n        const flatPointsArray = this.flatPointsArray;\n        const sumOfPoints = flatPointsArray.reduce((acc, point) => {\n            return [acc[0] + point[0], acc[1] + point[1], acc[2] + point[2]];\n        }, [0, 0, 0]);\n        const centroid = [\n            sumOfPoints[0] / numberOfPoints,\n            sumOfPoints[1] / numberOfPoints,\n            sumOfPoints[2] / numberOfPoints,\n        ];\n        const closestPoint = flatPointsArray.reduce((closestPoint, point) => {\n            const distanceToPoint = this._getDistance(centroid, point);\n            const distanceToClosestPoint = this._getDistance(centroid, closestPoint);\n            if (distanceToPoint < distanceToClosestPoint) {\n                return point;\n            }\n            else {\n                return closestPoint;\n            }\n        }, flatPointsArray[0]);\n        this._centroid = closestPoint;\n    }\n    _getSizeInBytes() {\n        return this._contours.reduce((sizeInBytes, contour) => {\n            return sizeInBytes + contour.sizeInBytes;\n        }, 0);\n    }\n    _getDistance(pointA, pointB) {\n        return Math.sqrt((pointA[0] - pointB[0]) ** 2 +\n            (pointA[1] - pointB[1]) ** 2 +\n            (pointA[2] - pointB[2]) ** 2);\n    }\n    get centroid() {\n        return this._centroid;\n    }\n    get segmentIndex() {\n        return this._segmentIndex;\n    }\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._color = value;\n        this._contours.forEach((contour) => {\n            if (contour instanceof Contour) {\n                contour.color = value;\n            }\n        });\n    }\n    get contours() {\n        return this._contours;\n    }\n    get flatPointsArray() {\n        return this._contours.flatMap((contour) => contour.points);\n    }\n    get numberOfContours() {\n        return this._contours.length;\n    }\n    get totalNumberOfPoints() {\n        return this._contours.reduce((numberOfPoints, contour) => {\n            return numberOfPoints + contour.points.length;\n        }, 0);\n    }\n    get numberOfPointsArray() {\n        return this._contours.map((contour) => contour.points.length);\n    }\n    getPointsInContour(contourIndex) {\n        return this._contours[contourIndex].points;\n    }\n    getNumberOfPointsInAContour(contourIndex) {\n        return this.getPointsInContour(contourIndex).length;\n    }\n}\nexport default ContourSet;\n","export class Surface {\n    constructor(props) {\n        this._color = [200, 0, 0];\n        this.id = props.id;\n        this._points = props.points;\n        this._polys = props.polys;\n        this._color = props.color ?? this._color;\n        this.frameOfReferenceUID = props.frameOfReferenceUID;\n        this._segmentIndex = props.segmentIndex;\n        this.sizeInBytes = this._getSizeInBytes();\n        this._updateCentroid();\n    }\n    _getSizeInBytes() {\n        return this._points.length * 4 + this._polys.length * 4;\n    }\n    _updateCentroid() {\n        const numberOfPoints = this._points.length / 3;\n        let sumX = 0, sumY = 0, sumZ = 0;\n        for (let i = 0; i < this._points.length; i += 3) {\n            sumX += this._points[i];\n            sumY += this._points[i + 1];\n            sumZ += this._points[i + 2];\n        }\n        this._centroid = [\n            sumX / numberOfPoints,\n            sumY / numberOfPoints,\n            sumZ / numberOfPoints,\n        ];\n    }\n    get color() {\n        return this._color;\n    }\n    set color(color) {\n        this._color = color;\n    }\n    get points() {\n        return this._points;\n    }\n    set points(points) {\n        this._points = points;\n        this._updateCentroid();\n    }\n    get polys() {\n        return this._polys;\n    }\n    set polys(polys) {\n        this._polys = polys;\n    }\n    get segmentIndex() {\n        return this._segmentIndex;\n    }\n    get centroid() {\n        return this._centroid;\n    }\n    get flatPointsArray() {\n        return this._points;\n    }\n    get totalNumberOfPoints() {\n        return this._points.length / 3;\n    }\n}\n","import vtkConstants from '@kitware/vtk.js/Rendering/Core/VolumeMapper/Constants';\nconst { BlendMode } = vtkConstants;\nvar BlendModes;\n(function (BlendModes) {\n    BlendModes[BlendModes[\"COMPOSITE\"] = BlendMode.COMPOSITE_BLEND] = \"COMPOSITE\";\n    BlendModes[BlendModes[\"MAXIMUM_INTENSITY_BLEND\"] = BlendMode.MAXIMUM_INTENSITY_BLEND] = \"MAXIMUM_INTENSITY_BLEND\";\n    BlendModes[BlendModes[\"MINIMUM_INTENSITY_BLEND\"] = BlendMode.MINIMUM_INTENSITY_BLEND] = \"MINIMUM_INTENSITY_BLEND\";\n    BlendModes[BlendModes[\"AVERAGE_INTENSITY_BLEND\"] = BlendMode.AVERAGE_INTENSITY_BLEND] = \"AVERAGE_INTENSITY_BLEND\";\n})(BlendModes || (BlendModes = {}));\nexport default BlendModes;\n","var GeometryType;\n(function (GeometryType) {\n    GeometryType[\"CONTOUR\"] = \"CONTOUR\";\n    GeometryType[\"SURFACE\"] = \"SURFACE\";\n})(GeometryType || (GeometryType = {}));\nexport default GeometryType;\n","export var CalibrationTypes;\n(function (CalibrationTypes) {\n    CalibrationTypes[\"NOT_APPLICABLE\"] = \"\";\n    CalibrationTypes[\"ERMF\"] = \"ERMF\";\n    CalibrationTypes[\"USER\"] = \"User\";\n    CalibrationTypes[\"PROJECTION\"] = \"Proj\";\n    CalibrationTypes[\"REGION\"] = \"Region\";\n    CalibrationTypes[\"ERROR\"] = \"Error\";\n    CalibrationTypes[\"UNCALIBRATED\"] = \"Uncalibrated\";\n})(CalibrationTypes || (CalibrationTypes = {}));\nexport default CalibrationTypes;\n","export var GenerateImageType;\n(function (GenerateImageType) {\n    GenerateImageType[\"SUM\"] = \"SUM\";\n    GenerateImageType[\"SUBTRACT\"] = \"SUBTRACT\";\n    GenerateImageType[\"AVERAGE\"] = \"AVERAGE\";\n})(GenerateImageType || (GenerateImageType = {}));\n","import getRenderingEngine, { getRenderingEngines, } from './RenderingEngine/getRenderingEngine';\nexport default function getEnabledElement(element) {\n    if (!element) {\n        return;\n    }\n    const { viewportUid, renderingEngineUid } = element.dataset;\n    return getEnabledElementByIds(viewportUid, renderingEngineUid);\n}\nexport function getEnabledElementByIds(viewportId, renderingEngineId) {\n    if (!renderingEngineId || !viewportId) {\n        return;\n    }\n    const renderingEngine = getRenderingEngine(renderingEngineId);\n    if (!renderingEngine || renderingEngine.hasBeenDestroyed) {\n        return;\n    }\n    const viewport = renderingEngine.getViewport(viewportId);\n    if (!viewport) {\n        return;\n    }\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n    return {\n        viewport,\n        renderingEngine,\n        viewportId,\n        renderingEngineId,\n        FrameOfReferenceUID,\n    };\n}\nexport function getEnabledElementByViewportId(viewportId) {\n    const renderingEngines = getRenderingEngines();\n    for (let i = 0; i < renderingEngines.length; i++) {\n        const renderingEngine = renderingEngines[i];\n        const viewport = renderingEngine.getViewport(viewportId);\n        if (viewport) {\n            return getEnabledElementByIds(viewportId, renderingEngine.id);\n        }\n    }\n}\nexport function getEnabledElements() {\n    const enabledElements = [];\n    const renderingEngines = getRenderingEngines();\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getViewports();\n        viewports.forEach(({ element }) => {\n            enabledElements.push(getEnabledElement(element));\n        });\n    });\n    return enabledElements;\n}\n","import * as Comlink from 'comlink';\nimport { RequestType } from '../enums/';\nimport { RequestPoolManager } from '../requestPool/requestPoolManager';\nclass CentralizedWorkerManager {\n    constructor() {\n        this.workerRegistry = {};\n        this.workerPoolManager = new RequestPoolManager('webworker');\n    }\n    registerWorker(workerName, workerFn, options = {}) {\n        const { maxWorkerInstances = 1, overwrite = false, autoTerminateOnIdle = {\n            enabled: false,\n            idleTimeThreshold: 3000,\n        }, } = options;\n        if (this.workerRegistry[workerName] && !overwrite) {\n            console.warn(`Worker type '${workerName}' is already registered...`);\n            return;\n        }\n        if (overwrite && this.workerRegistry[workerName]?.idleCheckIntervalId) {\n            clearInterval(this.workerRegistry[workerName].idleCheckIntervalId);\n        }\n        const workerProperties = {\n            workerFn: null,\n            instances: [],\n            loadCounters: [],\n            lastActiveTime: [],\n            nativeWorkers: [],\n            autoTerminateOnIdle: autoTerminateOnIdle.enabled,\n            idleCheckIntervalId: null,\n            idleTimeThreshold: autoTerminateOnIdle.idleTimeThreshold,\n        };\n        workerProperties.loadCounters = Array(maxWorkerInstances).fill(0);\n        workerProperties.lastActiveTime = Array(maxWorkerInstances).fill(null);\n        for (let i = 0; i < maxWorkerInstances; i++) {\n            const worker = workerFn();\n            workerProperties.instances.push(Comlink.wrap(worker));\n            workerProperties.nativeWorkers.push(worker);\n            workerProperties.workerFn = workerFn;\n        }\n        this.workerRegistry[workerName] = workerProperties;\n    }\n    getNextWorkerAPI(workerName) {\n        const workerProperties = this.workerRegistry[workerName];\n        if (!workerProperties) {\n            console.error(`Worker type '${workerName}' is not registered.`);\n            return null;\n        }\n        const workerInstances = workerProperties.instances.filter((instance) => instance !== null);\n        let minLoadIndex = 0;\n        let minLoadValue = workerProperties.loadCounters[0] || 0;\n        for (let i = 1; i < workerInstances.length; i++) {\n            const currentLoadValue = workerProperties.loadCounters[i] || 0;\n            if (currentLoadValue < minLoadValue) {\n                minLoadIndex = i;\n                minLoadValue = currentLoadValue;\n            }\n        }\n        if (workerProperties.instances[minLoadIndex] === null) {\n            const worker = workerProperties.workerFn();\n            workerProperties.instances[minLoadIndex] = Comlink.wrap(worker);\n            workerProperties.nativeWorkers[minLoadIndex] = worker;\n        }\n        workerProperties.loadCounters[minLoadIndex] += 1;\n        return {\n            api: workerProperties.instances[minLoadIndex],\n            index: minLoadIndex,\n        };\n    }\n    executeTask(workerName, methodName, args = {}, { requestType = RequestType.Compute, priority = 0, options = {}, callbacks = [], } = {}) {\n        return new Promise((resolve, reject) => {\n            const requestFn = async () => {\n                const { api, index } = this.getNextWorkerAPI(workerName);\n                if (!api) {\n                    const error = new Error(`No available worker instance for '${workerName}'`);\n                    console.error(error);\n                    reject(error);\n                    return;\n                }\n                try {\n                    let finalCallbacks = [];\n                    if (callbacks.length) {\n                        finalCallbacks = callbacks.map((cb) => {\n                            return Comlink.proxy(cb);\n                        });\n                    }\n                    const workerProperties = this.workerRegistry[workerName];\n                    workerProperties.processing = true;\n                    const results = await api[methodName](args, ...finalCallbacks);\n                    workerProperties.processing = false;\n                    workerProperties.lastActiveTime[index] = Date.now();\n                    if (workerProperties.autoTerminateOnIdle &&\n                        !workerProperties.idleCheckIntervalId &&\n                        workerProperties.idleTimeThreshold) {\n                        workerProperties.idleCheckIntervalId = setInterval(() => {\n                            this.terminateIdleWorkers(workerName, workerProperties.idleTimeThreshold);\n                        }, workerProperties.idleTimeThreshold);\n                    }\n                    resolve(results);\n                }\n                catch (err) {\n                    console.error(`Error executing method '${methodName}' on worker '${workerName}':`, err);\n                    reject(err);\n                }\n                finally {\n                    this.workerRegistry[workerName].loadCounters[index]--;\n                }\n            };\n            this.workerPoolManager.addRequest(requestFn, requestType, options, priority);\n        });\n    }\n    terminateIdleWorkers(workerName, idleTimeThreshold) {\n        const workerProperties = this.workerRegistry[workerName];\n        if (workerProperties.processing) {\n            return;\n        }\n        const now = Date.now();\n        workerProperties.instances.forEach((_, index) => {\n            const lastActiveTime = workerProperties.lastActiveTime[index];\n            const isWorkerActive = lastActiveTime !== null && workerProperties.loadCounters[index] > 0;\n            const idleTime = now - lastActiveTime;\n            if (!isWorkerActive && idleTime > idleTimeThreshold) {\n                this.terminateWorkerInstance(workerName, index);\n            }\n        });\n    }\n    terminate(workerName) {\n        const workerProperties = this.workerRegistry[workerName];\n        if (!workerProperties) {\n            console.error(`Worker type '${workerName}' is not registered.`);\n            return;\n        }\n        workerProperties.instances.forEach((_, index) => {\n            this.terminateWorkerInstance(workerName, index);\n        });\n    }\n    terminateWorkerInstance(workerName, index) {\n        const workerProperties = this.workerRegistry[workerName];\n        const workerInstance = workerProperties.instances[index];\n        if (workerInstance !== null) {\n            workerInstance[Comlink.releaseProxy]();\n            workerProperties.nativeWorkers[index].terminate();\n            workerProperties.instances[index] = null;\n            workerProperties.lastActiveTime[index] = null;\n        }\n    }\n}\nexport default CentralizedWorkerManager;\n","import { getRenderingEngines } from './RenderingEngine/getRenderingEngine';\nlet csRenderInitialized = false;\nimport deepMerge from './utilities/deepMerge';\nimport CentralizedWebWorkerManager from './webWorkerManager/webWorkerManager';\nconst defaultConfig = {\n    gpuTier: { tier: 2 },\n    isMobile: false,\n    rendering: {\n        useCPURendering: false,\n        preferSizeOverAccuracy: false,\n        strictZSpacingForVolumeViewport: true,\n    },\n    peerImport: (moduleId) => null,\n};\nlet config = {\n    ...defaultConfig,\n    rendering: { ...defaultConfig.rendering },\n};\nlet webWorkerManager = null;\nfunction _getGLContext() {\n    const canvas = document.createElement('canvas');\n    const gl = canvas.getContext('webgl2') ||\n        canvas.getContext('webgl') ||\n        canvas.getContext('experimental-webgl');\n    return gl;\n}\nfunction _hasActiveWebGLContext() {\n    const gl = _getGLContext();\n    return (gl instanceof WebGLRenderingContext || gl instanceof WebGL2RenderingContext);\n}\nfunction _hasNorm16TextureSupport() {\n    const gl = _getGLContext();\n    if (gl) {\n        const ext = gl.getExtension('EXT_texture_norm16');\n        if (ext) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isIOS() {\n    if (/iPad|iPhone|iPod/.test(navigator.platform)) {\n        return true;\n    }\n    else {\n        return (navigator.maxTouchPoints &&\n            navigator.maxTouchPoints > 2 &&\n            navigator.platform.includes('MacIntel'));\n    }\n}\nfunction init(configuration = config) {\n    if (csRenderInitialized) {\n        return csRenderInitialized;\n    }\n    config = deepMerge(defaultConfig, configuration);\n    if (isIOS()) {\n        if (configuration.rendering?.preferSizeOverAccuracy) {\n            config.rendering.preferSizeOverAccuracy = true;\n        }\n        else {\n            console.log('norm16 texture not supported, you can turn on the preferSizeOverAccuracy flag to use native data type, but be aware of the inaccuracy of the rendering in high bits');\n        }\n    }\n    const hasWebGLContext = _hasActiveWebGLContext();\n    if (!hasWebGLContext) {\n        console.log('CornerstoneRender: GPU not detected, using CPU rendering');\n        config.rendering.useCPURendering = true;\n    }\n    else {\n        console.log('CornerstoneRender: using GPU rendering');\n    }\n    csRenderInitialized = true;\n    if (!webWorkerManager) {\n        webWorkerManager = new CentralizedWebWorkerManager();\n    }\n    return csRenderInitialized;\n}\nfunction setUseCPURendering(status, updateViewports = true) {\n    config.rendering.useCPURendering = status;\n    csRenderInitialized = true;\n    if (updateViewports) {\n        _updateRenderingPipelinesForAllViewports();\n    }\n}\nfunction setPreferSizeOverAccuracy(status) {\n    config.rendering.preferSizeOverAccuracy = status;\n    csRenderInitialized = true;\n    _updateRenderingPipelinesForAllViewports();\n}\nfunction canRenderFloatTextures() {\n    if (!isIOS()) {\n        return true;\n    }\n    return false;\n}\nfunction resetUseCPURendering() {\n    config.rendering.useCPURendering = !_hasActiveWebGLContext();\n    _updateRenderingPipelinesForAllViewports();\n}\nfunction getShouldUseCPURendering() {\n    return config.rendering.useCPURendering;\n}\nfunction isCornerstoneInitialized() {\n    return csRenderInitialized;\n}\nfunction resetInitialization() {\n    csRenderInitialized = false;\n}\nfunction getConfiguration() {\n    return config;\n}\nfunction setConfiguration(c) {\n    config = c;\n    _updateRenderingPipelinesForAllViewports();\n}\nfunction _updateRenderingPipelinesForAllViewports() {\n    getRenderingEngines().forEach((engine) => {\n        engine.getViewports().forEach((viewport) => {\n            viewport.updateRenderingPipeline();\n        });\n    });\n}\nfunction getWebWorkerManager() {\n    if (!webWorkerManager) {\n        webWorkerManager = new CentralizedWebWorkerManager();\n    }\n    return webWorkerManager;\n}\nfunction peerImport(moduleId) {\n    return config.peerImport(moduleId);\n}\nexport { init, getShouldUseCPURendering, isCornerstoneInitialized, setUseCPURendering, setPreferSizeOverAccuracy, resetUseCPURendering, getConfiguration, setConfiguration, getWebWorkerManager, canRenderFloatTextures, peerImport, resetInitialization, };\n","import '@kitware/vtk.js/Rendering/Profiles/Geometry';\nimport cache from '../cache/cache';\nimport { GeometryType } from '../enums';\nimport { createContourSet } from './utils/contourSet/createContourSet';\nimport { createSurface } from './utils/surface/createSurface';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport triggerEvent from '../utilities/triggerEvent';\nconst geometryLoaders = {};\nlet unknownGeometryLoader;\nfunction loadGeometryFromGeometryLoader(geometryId, options) {\n    const colonIndex = geometryId.indexOf(':');\n    const scheme = geometryId.substring(0, colonIndex);\n    let loader = geometryLoaders[scheme];\n    if (loader === undefined || loader === null) {\n        if (unknownGeometryLoader == null ||\n            typeof unknownGeometryLoader !== 'function') {\n            throw new Error(`No geometry loader for scheme ${scheme} has been registered`);\n        }\n        loader = unknownGeometryLoader;\n    }\n    const geometryLoadObject = loader(geometryId, options);\n    geometryLoadObject.promise.then(function (geometry) {\n        triggerEvent(eventTarget, Events.GEOMETRY_LOADED, { geometry });\n    }, function (error) {\n        const errorObject = {\n            geometryId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.GEOMETRY_LOADED_FAILED, errorObject);\n    });\n    return geometryLoadObject;\n}\nexport function loadGeometry(geometryId, options) {\n    if (geometryId === undefined) {\n        throw new Error('loadGeometry: parameter geometryId must not be undefined');\n    }\n    let geometryLoadObject = cache.getGeometryLoadObject(geometryId);\n    if (geometryLoadObject !== undefined) {\n        return geometryLoadObject.promise;\n    }\n    geometryLoadObject = loadGeometryFromGeometryLoader(geometryId, options);\n    return geometryLoadObject.promise;\n}\nexport async function loadAndCacheGeometry(geometryId, options) {\n    if (geometryId === undefined) {\n        throw new Error('createAndCacheGeometry: parameter geometryId must not be undefined');\n    }\n    let geometryLoadObject = cache.getGeometryLoadObject(geometryId);\n    if (geometryLoadObject !== undefined) {\n        return geometryLoadObject.promise;\n    }\n    geometryLoadObject = loadGeometryFromGeometryLoader(geometryId, options);\n    await cache.putGeometryLoadObject(geometryId, geometryLoadObject);\n    return geometryLoadObject.promise;\n}\nexport function createAndCacheGeometry(geometryId, options) {\n    if (geometryId === undefined) {\n        throw new Error('createAndCacheGeometry: parameter geometryId must not be undefined');\n    }\n    let geometry = cache.getGeometry(geometryId);\n    if (geometry) {\n        return geometry;\n    }\n    if (options.type === GeometryType.CONTOUR) {\n        geometry = createContourSet(geometryId, options.geometryData);\n    }\n    else if (options.type === GeometryType.SURFACE) {\n        geometry = createSurface(geometryId, options.geometryData);\n    }\n    else {\n        throw new Error('Unknown geometry type');\n    }\n    cache.putGeometrySync(geometryId, geometry);\n    return geometry;\n}\nexport function registerGeometryLoader(scheme, geometryLoader) {\n    geometryLoaders[scheme] = geometryLoader;\n}\nexport function registerUnknownGeometryLoader(geometryLoader) {\n    const oldGeometryLoader = unknownGeometryLoader;\n    unknownGeometryLoader = geometryLoader;\n    return oldGeometryLoader;\n}\n","import cache from '../cache/cache';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport genericMetadataProvider from '../utilities/genericMetadataProvider';\nimport { getBufferConfiguration } from '../utilities/getBufferConfiguration';\nimport triggerEvent from '../utilities/triggerEvent';\nimport uuidv4 from '../utilities/uuidv4';\nimport VoxelManager from '../utilities/VoxelManager';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport * as metaData from '../metaData';\nconst imageLoaders = {};\nlet unknownImageLoader;\nfunction loadImageFromImageLoader(imageId, options) {\n    const cachedImageLoadObject = cache.getImageLoadObject(imageId);\n    if (cachedImageLoadObject) {\n        handleImageLoadPromise(cachedImageLoadObject.promise, imageId);\n        return cachedImageLoadObject;\n    }\n    const scheme = imageId.split(':')[0];\n    const loader = imageLoaders[scheme] || unknownImageLoader;\n    if (!loader) {\n        throw new Error(`loadImageFromImageLoader: No image loader found for scheme '${scheme}'`);\n    }\n    const imageLoadObject = loader(imageId, options);\n    handleImageLoadPromise(imageLoadObject.promise, imageId);\n    return imageLoadObject;\n}\nfunction handleImageLoadPromise(imagePromise, imageId) {\n    Promise.resolve(imagePromise)\n        .then((image) => {\n        ensureVoxelManager(image);\n        triggerEvent(eventTarget, Events.IMAGE_LOADED, { image });\n    })\n        .catch((error) => {\n        const errorDetails = {\n            imageId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.IMAGE_LOAD_FAILED, errorDetails);\n    });\n}\nfunction ensureVoxelManager(image) {\n    if (!image.voxelManager) {\n        const { width, height, numberOfComponents } = image;\n        const voxelManager = VoxelManager.createImageVoxelManager({\n            scalarData: image.getPixelData(),\n            width,\n            height,\n            numberOfComponents,\n        });\n        image.voxelManager = voxelManager;\n        image.getPixelData = () => voxelManager.getScalarData();\n        delete image.imageFrame.pixelData;\n    }\n}\nexport function loadImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadImage: parameter imageId must not be undefined');\n    }\n    return loadImageFromImageLoader(imageId, options).promise;\n}\nexport function loadAndCacheImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadAndCacheImage: parameter imageId must not be undefined');\n    }\n    const imageLoadObject = loadImageFromImageLoader(imageId, options);\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageLoadObject(imageId, imageLoadObject);\n    }\n    return imageLoadObject.promise;\n}\nexport function loadAndCacheImages(imageIds, options = { priority: 0, requestType: 'prefetch' }) {\n    if (!imageIds || imageIds.length === 0) {\n        throw new Error('loadAndCacheImages: parameter imageIds must be list of image Ids');\n    }\n    const allPromises = imageIds.map((imageId) => {\n        return loadAndCacheImage(imageId, options);\n    });\n    return allPromises;\n}\nexport function createAndCacheDerivedImage(referencedImageId, options = {}) {\n    if (referencedImageId === undefined) {\n        throw new Error('createAndCacheDerivedImage: parameter imageId must not be undefined');\n    }\n    if (options.imageId === undefined) {\n        options.imageId = `derived:${uuidv4()}`;\n    }\n    const { imageId, skipCreateBuffer, onCacheAdd } = options;\n    const imagePlaneModule = metaData.get('imagePlaneModule', referencedImageId);\n    const length = imagePlaneModule.rows * imagePlaneModule.columns;\n    const { TypedArrayConstructor } = getBufferConfiguration(options.targetBuffer?.type, length);\n    const imageScalarData = new TypedArrayConstructor(skipCreateBuffer ? 1 : length);\n    const derivedImageId = imageId;\n    const referencedImagePlaneMetadata = metaData.get('imagePlaneModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePlaneModule',\n        metadata: referencedImagePlaneMetadata,\n    });\n    const referencedImageGeneralSeriesMetadata = metaData.get('generalSeriesModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalSeriesModule',\n        metadata: referencedImageGeneralSeriesMetadata,\n    });\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalImageModule',\n        metadata: {\n            instanceNumber: options.instanceNumber,\n        },\n    });\n    const imagePixelModule = metaData.get('imagePixelModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePixelModule',\n        metadata: {\n            ...imagePixelModule,\n            bitsAllocated: 8,\n            bitsStored: 8,\n            highBit: 7,\n            samplesPerPixel: 1,\n            pixelRepresentation: 0,\n        },\n    });\n    const localImage = createAndCacheLocalImage(imageId, {\n        scalarData: imageScalarData,\n        onCacheAdd,\n        skipCreateBuffer,\n        targetBuffer: {\n            type: imageScalarData.constructor.name,\n        },\n        dimensions: [imagePlaneModule.columns, imagePlaneModule.rows],\n        spacing: [\n            imagePlaneModule.columnPixelSpacing,\n            imagePlaneModule.rowPixelSpacing,\n        ],\n        origin: imagePlaneModule.imagePositionPatient,\n        direction: imagePlaneModule.imageOrientationPatient,\n        frameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n    });\n    localImage.referencedImageId = referencedImageId;\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageSync(imageId, localImage);\n    }\n    return localImage;\n}\nexport function createAndCacheDerivedImages(referencedImageIds, options = {}) {\n    if (referencedImageIds.length === 0) {\n        throw new Error('createAndCacheDerivedImages: parameter imageIds must be list of image Ids');\n    }\n    const derivedImageIds = [];\n    const images = referencedImageIds.map((referencedImageId, index) => {\n        const newOptions = {\n            imageId: options?.getDerivedImageId?.(referencedImageId) ||\n                `derived:${uuidv4()}`,\n            ...options,\n        };\n        derivedImageIds.push(newOptions.imageId);\n        return createAndCacheDerivedImage(referencedImageId, {\n            ...newOptions,\n            instanceNumber: index + 1,\n        });\n    });\n    return images;\n}\nexport function createAndCacheLocalImage(imageId, options) {\n    const { scalarData, origin, direction, targetBuffer, skipCreateBuffer, onCacheAdd, frameOfReferenceUID, } = options;\n    const dimensions = options.dimensions;\n    const spacing = options.spacing;\n    if (!dimensions || !spacing) {\n        throw new Error('createAndCacheLocalImage: dimensions and spacing are required');\n    }\n    const width = dimensions[0];\n    const height = dimensions[1];\n    const columnPixelSpacing = spacing[0];\n    const rowPixelSpacing = spacing[1];\n    const imagePlaneModule = {\n        frameOfReferenceUID,\n        rows: height,\n        columns: width,\n        imageOrientationPatient: direction ?? [1, 0, 0, 0, 1, 0],\n        rowCosines: direction ? direction.slice(0, 3) : [1, 0, 0],\n        columnCosines: direction ? direction.slice(3, 6) : [0, 1, 0],\n        imagePositionPatient: origin ?? [0, 0, 0],\n        pixelSpacing: [rowPixelSpacing, columnPixelSpacing],\n        rowPixelSpacing: rowPixelSpacing,\n        columnPixelSpacing: columnPixelSpacing,\n    };\n    const length = width * height;\n    const numberOfComponents = scalarData.length / length;\n    let scalarDataToUse;\n    if (scalarData) {\n        if (!(scalarData instanceof Uint8Array ||\n            scalarData instanceof Float32Array ||\n            scalarData instanceof Uint16Array ||\n            scalarData instanceof Int16Array)) {\n            throw new Error('createAndCacheLocalImage: scalarData must be of type Uint8Array, Uint16Array, Int16Array or Float32Array');\n        }\n        scalarDataToUse = scalarData;\n    }\n    else if (!skipCreateBuffer) {\n        const { numBytes, TypedArrayConstructor } = getBufferConfiguration(targetBuffer?.type, length);\n        const imageScalarData = new TypedArrayConstructor(length);\n        scalarDataToUse = imageScalarData;\n    }\n    let bitsAllocated, bitsStored, highBit;\n    if (scalarDataToUse instanceof Uint8Array) {\n        bitsAllocated = 8;\n        bitsStored = 8;\n        highBit = 7;\n    }\n    else if (scalarDataToUse instanceof Uint16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Int16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Float32Array) {\n        bitsAllocated = 32;\n        bitsStored = 32;\n        highBit = 31;\n    }\n    else {\n        throw new Error('Unsupported scalarData type');\n    }\n    const imagePixelModule = {\n        samplesPerPixel: 1,\n        photometricInterpretation: scalarDataToUse.length > dimensions[0] * dimensions[1]\n            ? 'RGB'\n            : 'MONOCHROME2',\n        rows: height,\n        columns: width,\n        bitsAllocated,\n        bitsStored,\n        highBit,\n    };\n    const metadata = {\n        imagePlaneModule,\n        imagePixelModule,\n    };\n    ['imagePlaneModule', 'imagePixelModule'].forEach((type) => {\n        genericMetadataProvider.add(imageId, {\n            type,\n            metadata: metadata[type] || {},\n        });\n    });\n    const voxelManager = VoxelManager.createImageVoxelManager({\n        height,\n        width,\n        numberOfComponents,\n        scalarData: scalarDataToUse,\n    });\n    let minPixelValue = scalarDataToUse[0];\n    let maxPixelValue = scalarDataToUse[0];\n    for (let i = 1; i < scalarDataToUse.length; i++) {\n        if (scalarDataToUse[i] < minPixelValue) {\n            minPixelValue = scalarDataToUse[i];\n        }\n        if (scalarDataToUse[i] > maxPixelValue) {\n            maxPixelValue = scalarDataToUse[i];\n        }\n    }\n    const image = {\n        imageId: imageId,\n        intercept: 0,\n        windowCenter: 0,\n        windowWidth: 0,\n        color: imagePixelModule.photometricInterpretation === 'RGB',\n        numberOfComponents: imagePixelModule.samplesPerPixel,\n        dataType: targetBuffer?.type,\n        slope: 1,\n        minPixelValue,\n        maxPixelValue,\n        rows: imagePixelModule.rows,\n        columns: imagePixelModule.columns,\n        getCanvas: undefined,\n        height: imagePixelModule.rows,\n        width: imagePixelModule.columns,\n        rgba: undefined,\n        columnPixelSpacing: imagePlaneModule.columnPixelSpacing,\n        rowPixelSpacing: imagePlaneModule.rowPixelSpacing,\n        FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        invert: false,\n        getPixelData: () => voxelManager.getScalarData(),\n        voxelManager,\n        sizeInBytes: scalarData.byteLength,\n    };\n    onCacheAdd?.(image);\n    cache.putImageSync(image.imageId, image);\n    return image;\n}\nexport function cancelLoadImage(imageId) {\n    const filterFunction = ({ additionalDetails }) => {\n        if (additionalDetails.imageId) {\n            return additionalDetails.imageId !== imageId;\n        }\n        return true;\n    };\n    imageLoadPoolManager.filterRequests(filterFunction);\n    const imageLoadObject = cache.getImageLoadObject(imageId);\n    if (imageLoadObject) {\n        imageLoadObject.cancelFn();\n    }\n}\nexport function cancelLoadImages(imageIds) {\n    imageIds.forEach((imageId) => {\n        cancelLoadImage(imageId);\n    });\n}\nexport function cancelLoadAll() {\n    const requestPool = imageLoadPoolManager.getRequestPool();\n    Object.keys(requestPool).forEach((type) => {\n        const requests = requestPool[type];\n        Object.keys(requests).forEach((priority) => {\n            const requestDetails = requests[priority].pop();\n            const additionalDetails = requestDetails.additionalDetails;\n            const { imageId, volumeId } = additionalDetails;\n            let loadObject;\n            if (imageId) {\n                loadObject = cache.getImageLoadObject(imageId);\n            }\n            else if (volumeId) {\n                loadObject = cache.getVolumeLoadObject(volumeId);\n            }\n            if (loadObject) {\n                loadObject.cancel();\n            }\n        });\n        imageLoadPoolManager.clearRequestStack(type);\n    });\n}\nexport function registerImageLoader(scheme, imageLoader) {\n    imageLoaders[scheme] = imageLoader;\n}\nexport function registerUnknownImageLoader(imageLoader) {\n    const oldImageLoader = unknownImageLoader;\n    unknownImageLoader = imageLoader;\n    return oldImageLoader;\n}\nexport function unregisterAllImageLoaders() {\n    Object.keys(imageLoaders).forEach((imageLoader) => delete imageLoaders[imageLoader]);\n    unknownImageLoader = undefined;\n}\nexport function createAndCacheDerivedLabelmapImages(referencedImageIds, options = {}) {\n    return createAndCacheDerivedImages(referencedImageIds, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\nexport function createAndCacheDerivedLabelmapImage(referencedImageId, options = {}) {\n    return createAndCacheDerivedImage(referencedImageId, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\n","import { GeometryType } from '../../../enums';\nimport { validateContourSet } from './validateContourSet';\nimport { ContourSet } from '../../../cache/classes/ContourSet';\nexport function createContourSet(geometryId, contourSetData) {\n    validateContourSet(contourSetData);\n    const contourSet = new ContourSet({\n        id: contourSetData.id,\n        data: contourSetData.data,\n        color: contourSetData.color,\n        frameOfReferenceUID: contourSetData.frameOfReferenceUID,\n        segmentIndex: contourSetData.segmentIndex ?? 1,\n    });\n    const geometry = {\n        id: geometryId,\n        type: GeometryType.CONTOUR,\n        data: contourSet,\n        sizeInBytes: contourSet.sizeInBytes,\n    };\n    return geometry;\n}\n","export function validateContourSet(contourSetData) {\n    if (!contourSetData || contourSetData.data.length === 0) {\n        throw new Error('Invalid contour set data, see publicContourSetData type for more info');\n    }\n    if (!contourSetData.id) {\n        throw new Error('Invalid contour set data, each contour set must have an id');\n    }\n    if (!contourSetData.data || !Array.isArray(contourSetData.data)) {\n        throw new Error('Invalid contour set data, each contour set must have an array of contours');\n    }\n    contourSetData.data.forEach((contourData) => {\n        if (!contourData.points || !Array.isArray(contourData.points)) {\n            throw new Error('Invalid contour set data, each contour must have an array of points');\n        }\n        contourData.points.forEach((point) => {\n            if (!point || !Array.isArray(point) || point.length !== 3) {\n                throw new Error('Invalid contour set data, each point must be an array of length 3');\n            }\n        });\n    });\n}\n","import { GeometryType } from '../../../enums';\nimport { validateSurface } from './validateSurface';\nimport { Surface } from '../../../cache/classes/Surface';\nexport function createSurface(geometryId, surfaceData) {\n    validateSurface(surfaceData);\n    const surface = new Surface({\n        id: surfaceData.id,\n        points: surfaceData.points,\n        polys: surfaceData.polys,\n        color: surfaceData.color,\n        frameOfReferenceUID: surfaceData.frameOfReferenceUID,\n        segmentIndex: surfaceData.segmentIndex ?? 1,\n    });\n    const geometry = {\n        id: geometryId,\n        type: GeometryType.SURFACE,\n        data: surface,\n        sizeInBytes: surface.sizeInBytes,\n    };\n    return geometry;\n}\n","export function validateSurface(surfaceData) {\n    if (!surfaceData.id) {\n        throw new Error('Surface must have an id');\n    }\n    if (surfaceData.points?.length === 0) {\n        throw new Error('Surface must have non-empty points array');\n    }\n    if (surfaceData.polys?.length === 0) {\n        throw new Error('Surface must have non-empty polys array');\n    }\n    if (!surfaceData.frameOfReferenceUID) {\n        throw new Error('Surface must have a frameOfReferenceUID');\n    }\n}\n","import '@kitware/vtk.js/Rendering/Profiles/Volume';\nimport { ImageVolume } from '../cache/classes/ImageVolume';\nimport cache from '../cache/cache';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport triggerEvent from '../utilities/triggerEvent';\nimport uuidv4 from '../utilities/uuidv4';\nimport VoxelManager from '../utilities/VoxelManager';\nimport { createAndCacheLocalImage, createAndCacheDerivedImages, } from './imageLoader';\nimport { generateVolumePropsFromImageIds } from '../utilities/generateVolumePropsFromImageIds';\nimport { cornerstoneStreamingImageVolumeLoader } from './cornerstoneStreamingImageVolumeLoader';\nconst volumeLoaders = {};\nlet unknownVolumeLoader = cornerstoneStreamingImageVolumeLoader;\nfunction loadVolumeFromVolumeLoader(volumeId, options) {\n    const colonIndex = volumeId.indexOf(':');\n    const scheme = volumeId.substring(0, colonIndex);\n    let loader = volumeLoaders[scheme];\n    if (loader === undefined || loader === null) {\n        if (unknownVolumeLoader == null ||\n            typeof unknownVolumeLoader !== 'function') {\n            throw new Error(`No volume loader for scheme ${scheme} has been registered`);\n        }\n        loader = unknownVolumeLoader;\n    }\n    const volumeLoadObject = loader(volumeId, options);\n    volumeLoadObject.promise.then(function (volume) {\n        triggerEvent(eventTarget, Events.VOLUME_LOADED, { volume });\n    }, function (error) {\n        const errorObject = {\n            volumeId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.VOLUME_LOADED_FAILED, errorObject);\n    });\n    return volumeLoadObject;\n}\nexport function loadVolume(volumeId, options = { imageIds: [] }) {\n    if (volumeId === undefined) {\n        throw new Error('loadVolume: parameter volumeId must not be undefined');\n    }\n    let volumeLoadObject = cache.getVolumeLoadObject(volumeId);\n    if (volumeLoadObject !== undefined) {\n        return volumeLoadObject.promise;\n    }\n    volumeLoadObject = loadVolumeFromVolumeLoader(volumeId, options);\n    return volumeLoadObject.promise.then((volume) => {\n        return volume;\n    });\n}\nexport async function createAndCacheVolume(volumeId, options) {\n    if (volumeId === undefined) {\n        throw new Error('createAndCacheVolume: parameter volumeId must not be undefined');\n    }\n    let volumeLoadObject = cache.getVolumeLoadObject(volumeId);\n    if (volumeLoadObject !== undefined) {\n        return volumeLoadObject.promise;\n    }\n    volumeLoadObject = loadVolumeFromVolumeLoader(volumeId, options);\n    cache.putVolumeLoadObject(volumeId, volumeLoadObject);\n    return volumeLoadObject.promise;\n}\nexport function createAndCacheDerivedVolume(referencedVolumeId, options) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (!referencedVolume) {\n        throw new Error(`Cannot created derived volume: Referenced volume with id ${referencedVolumeId} does not exist.`);\n    }\n    let { volumeId } = options;\n    if (volumeId === undefined) {\n        volumeId = uuidv4();\n    }\n    const { metadata, dimensions, spacing, origin, direction } = referencedVolume;\n    const referencedImageIds = referencedVolume.isDynamicVolume()\n        ? referencedVolume.getCurrentTimePointImageIds()\n        : referencedVolume.imageIds ?? [];\n    const derivedImages = createAndCacheDerivedImages(referencedImageIds, {\n        targetBuffer: options.targetBuffer,\n    });\n    const dataType = derivedImages[0].dataType;\n    const derivedVolumeImageIds = derivedImages.map((image) => image.imageId);\n    const derivedVolume = new ImageVolume({\n        volumeId,\n        dataType,\n        metadata: structuredClone(metadata),\n        dimensions: [dimensions[0], dimensions[1], dimensions[2]],\n        spacing,\n        origin,\n        direction,\n        referencedVolumeId,\n        imageIds: derivedVolumeImageIds,\n        referencedImageIds: referencedVolume.imageIds ?? [],\n    });\n    cache.putVolumeSync(volumeId, derivedVolume);\n    return derivedVolume;\n}\nexport async function createAndCacheVolumeFromImages(volumeId, imageIds) {\n    if (imageIds === undefined) {\n        throw new Error('createAndCacheVolumeFromImages: parameter imageIds must not be undefined');\n    }\n    if (volumeId === undefined) {\n        throw new Error('createAndCacheVolumeFromImages: parameter volumeId must not be undefined');\n    }\n    const cachedVolume = cache.getVolume(volumeId);\n    if (cachedVolume) {\n        return cachedVolume;\n    }\n    const imageIdsToLoad = imageIds.filter((imageId) => !cache.getImage(imageId));\n    if (imageIdsToLoad.length === 0) {\n        return createAndCacheVolumeFromImagesSync(volumeId, imageIds);\n    }\n    const volume = (await createAndCacheVolume(volumeId, {\n        imageIds,\n    }));\n    return volume;\n}\nexport function createAndCacheVolumeFromImagesSync(volumeId, imageIds) {\n    if (imageIds === undefined) {\n        throw new Error('createAndCacheVolumeFromImagesSync: parameter imageIds must not be undefined');\n    }\n    if (volumeId === undefined) {\n        throw new Error('createAndCacheVolumeFromImagesSync: parameter volumeId must not be undefined');\n    }\n    const cachedVolume = cache.getVolume(volumeId);\n    if (cachedVolume) {\n        return cachedVolume;\n    }\n    const volumeProps = generateVolumePropsFromImageIds(imageIds, volumeId);\n    const derivedVolume = new ImageVolume({\n        volumeId,\n        dataType: volumeProps.dataType,\n        metadata: structuredClone(volumeProps.metadata),\n        dimensions: volumeProps.dimensions,\n        spacing: volumeProps.spacing,\n        origin: volumeProps.origin,\n        direction: volumeProps.direction,\n        referencedVolumeId: volumeProps.referencedVolumeId,\n        imageIds: volumeProps.imageIds,\n        referencedImageIds: volumeProps.referencedImageIds,\n    });\n    cache.putVolumeSync(volumeId, derivedVolume);\n    return derivedVolume;\n}\nexport function createLocalVolume(volumeId, options = {}) {\n    const { metadata, dimensions, spacing, origin, direction, scalarData, targetBuffer, preventCache = false, } = options;\n    const cachedVolume = cache.getVolume(volumeId);\n    if (cachedVolume) {\n        return cachedVolume;\n    }\n    const sliceLength = dimensions[0] * dimensions[1];\n    const dataType = scalarData\n        ? scalarData.constructor.name\n        : targetBuffer?.type ?? 'Float32Array';\n    const totalNumberOfVoxels = sliceLength * dimensions[2];\n    let byteLength;\n    switch (dataType) {\n        case 'Uint8Array':\n        case 'Int8Array':\n            byteLength = totalNumberOfVoxels;\n            break;\n        case 'Uint16Array':\n        case 'Int16Array':\n            byteLength = totalNumberOfVoxels * 2;\n            break;\n        case 'Float32Array':\n            byteLength = totalNumberOfVoxels * 4;\n            break;\n    }\n    const isCacheable = cache.isCacheable(byteLength);\n    if (!isCacheable) {\n        throw new Error(`Cannot created derived volume: Volume with id ${volumeId} is not cacheable.`);\n    }\n    const imageIds = [];\n    const derivedImages = [];\n    for (let i = 0; i < dimensions[2]; i++) {\n        const imageId = `${volumeId}_slice_${i}`;\n        imageIds.push(imageId);\n        const sliceData = scalarData.subarray(i * sliceLength, (i + 1) * sliceLength);\n        const derivedImage = createAndCacheLocalImage(imageId, {\n            scalarData: sliceData,\n            dimensions: [dimensions[0], dimensions[1]],\n            spacing: [spacing[0], spacing[1]],\n            origin,\n            direction,\n            targetBuffer: { type: dataType },\n        });\n        derivedImages.push(derivedImage);\n    }\n    const imageVolume = new ImageVolume({\n        volumeId,\n        metadata: structuredClone(metadata),\n        dimensions: [dimensions[0], dimensions[1], dimensions[2]],\n        spacing,\n        origin,\n        direction,\n        imageIds,\n        dataType,\n    });\n    const voxelManager = VoxelManager.createImageVolumeVoxelManager({\n        imageIds,\n        dimensions,\n        numberOfComponents: 1,\n    });\n    imageVolume.voxelManager = voxelManager;\n    if (!preventCache) {\n        cache.putVolumeSync(volumeId, imageVolume);\n    }\n    return imageVolume;\n}\nexport function registerVolumeLoader(scheme, volumeLoader) {\n    volumeLoaders[scheme] = volumeLoader;\n}\nexport function getVolumeLoaderSchemes() {\n    return Object.keys(volumeLoaders);\n}\nexport function registerUnknownVolumeLoader(volumeLoader) {\n    const oldVolumeLoader = unknownVolumeLoader;\n    unknownVolumeLoader = volumeLoader;\n    return oldVolumeLoader;\n}\nexport function getUnknownVolumeLoaderSchema() {\n    return unknownVolumeLoader.name;\n}\nexport function createAndCacheDerivedLabelmapVolume(referencedVolumeId, options = {}) {\n    return createAndCacheDerivedVolume(referencedVolumeId, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\nexport function createLocalLabelmapVolume(options, volumeId, preventCache = false) {\n    if (!options.scalarData) {\n        options.scalarData = new Uint8Array(options.dimensions[0] * options.dimensions[1] * options.dimensions[2]);\n    }\n    return createLocalVolume(volumeId, { ...options, preventCache });\n}\n","export class PromiseIterator extends Promise {\n}\nexport default class ProgressiveIterator {\n    constructor(name) {\n        this.name = name || 'unknown';\n    }\n    static as(promise) {\n        if (promise.iterator) {\n            return promise.iterator;\n        }\n        const iterator = new ProgressiveIterator('as iterator');\n        promise.then((v) => {\n            try {\n                iterator.add(v, true);\n            }\n            catch (e) {\n                iterator.reject(e);\n            }\n        }, (reason) => {\n            iterator.reject(reason);\n        });\n        return iterator;\n    }\n    add(x, done = false) {\n        this.nextValue = x;\n        this.done ||= done;\n        if (this.waiting) {\n            this.waiting.resolve(x);\n            this.waiting = undefined;\n        }\n    }\n    resolve() {\n        this.done = true;\n        if (this.waiting) {\n            this.waiting.resolve(this.nextValue);\n            this.waiting = undefined;\n        }\n    }\n    reject(reason) {\n        this.rejectReason = reason;\n        this.waiting?.reject(reason);\n    }\n    getRecent() {\n        if (this.rejectReason) {\n            throw this.rejectReason;\n        }\n        return this.nextValue;\n    }\n    async *[Symbol.asyncIterator]() {\n        while (!this.done) {\n            if (this.rejectReason) {\n                throw this.rejectReason;\n            }\n            if (this.nextValue !== undefined) {\n                yield this.nextValue;\n                if (this.done) {\n                    break;\n                }\n            }\n            if (!this.waiting) {\n                this.waiting = {};\n                this.waiting.promise = new Promise((resolve, reject) => {\n                    this.waiting.resolve = resolve;\n                    this.waiting.reject = reject;\n                });\n            }\n            await this.waiting.promise;\n        }\n        yield this.nextValue;\n    }\n    async forEach(callback, errorCallback) {\n        let index = 0;\n        try {\n            for await (const value of this) {\n                const { done } = this;\n                try {\n                    await callback(value, done, index);\n                    index++;\n                }\n                catch (e) {\n                    if (!done) {\n                        console.warn('Caught exception in intermediate value', e);\n                        continue;\n                    }\n                    if (errorCallback) {\n                        errorCallback(e, done);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n        catch (e) {\n            if (errorCallback) {\n                errorCallback(e, true);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    generate(processFunction, errorCallback) {\n        return processFunction(this, this.reject.bind(this)).then(() => {\n            if (!this.done) {\n                this.resolve();\n            }\n        }, (reason) => {\n            this.reject(reason);\n            if (errorCallback) {\n                errorCallback(reason);\n            }\n            else {\n                console.warn(\"Couldn't process because\", reason);\n            }\n        });\n    }\n    async nextPromise() {\n        for await (const i of this) {\n            if (i) {\n                return i;\n            }\n        }\n        return this.nextValue;\n    }\n    async donePromise() {\n        for await (const i of this) {\n        }\n        return this.nextValue;\n    }\n    getNextPromise() {\n        const promise = this.nextPromise();\n        promise.iterator = this;\n        return promise;\n    }\n    getDonePromise() {\n        const promise = this.donePromise();\n        promise.iterator = this;\n        return promise;\n    }\n}\n","export default class RLEVoxelMap {\n    constructor(width, height, depth = 1) {\n        this.rows = new Map();\n        this.height = 1;\n        this.width = 1;\n        this.depth = 1;\n        this.jMultiple = 1;\n        this.kMultiple = 1;\n        this.numberOfComponents = 1;\n        this.defaultValue = 0;\n        this.pixelDataConstructor = Uint8Array;\n        this.get = (index) => {\n            const i = index % this.jMultiple;\n            const j = (index - i) / this.jMultiple;\n            const rle = this.getRLE(i, j);\n            return rle?.value || this.defaultValue;\n        };\n        this.getRun = (j, k) => {\n            const runIndex = j + k * this.height;\n            return this.rows.get(runIndex);\n        };\n        this.set = (index, value) => {\n            if (value === undefined) {\n                throw new Error(`Can't set undefined at ${index % this.width}`);\n            }\n            const i = index % this.width;\n            const j = (index - i) / this.width;\n            const row = this.rows.get(j);\n            if (!row) {\n                this.rows.set(j, [{ start: i, end: i + 1, value }]);\n                return;\n            }\n            const rleIndex = this.findIndex(row, i);\n            const rle1 = row[rleIndex];\n            const rle0 = row[rleIndex - 1];\n            if (!rle1) {\n                if (!rle0 || rle0.value !== value || rle0.end !== i) {\n                    row[rleIndex] = { start: i, end: i + 1, value };\n                    return;\n                }\n                rle0.end++;\n                return;\n            }\n            const { start, end, value: oldValue } = rle1;\n            if (value === oldValue && i >= start) {\n                return;\n            }\n            const rleInsert = { start: i, end: i + 1, value };\n            const isAfter = i > start;\n            const insertIndex = isAfter ? rleIndex + 1 : rleIndex;\n            const rlePrev = isAfter ? rle1 : rle0;\n            let rleNext = isAfter ? row[rleIndex + 1] : rle1;\n            if (rlePrev?.value === value && rlePrev.end === i) {\n                rlePrev.end++;\n                if (rleNext?.value === value && rleNext.start === i + 1) {\n                    rlePrev.end = rleNext.end;\n                    row.splice(rleIndex, 1);\n                }\n                else if (rleNext?.start === i) {\n                    rleNext.start++;\n                    if (rleNext.start === rleNext.end) {\n                        row.splice(rleIndex, 1);\n                        rleNext = row[rleIndex];\n                        if (rleNext?.start === i + 1 && rleNext.value === value) {\n                            rlePrev.end = rleNext.end;\n                            row.splice(rleIndex, 1);\n                        }\n                    }\n                }\n                return;\n            }\n            if (rleNext?.value === value && rleNext.start === i + 1) {\n                rleNext.start--;\n                if (rlePrev?.end > i) {\n                    rlePrev.end = i;\n                    if (rlePrev.end === rlePrev.start) {\n                        row.splice(rleIndex, 1);\n                    }\n                }\n                return;\n            }\n            if (rleNext?.start === i && rleNext.end === i + 1) {\n                rleNext.value = value;\n                const nextnext = row[rleIndex + 1];\n                if (nextnext?.start == i + 1 && nextnext?.value === value) {\n                    row.splice(rleIndex + 1, 1);\n                    rleNext.end = nextnext.end;\n                }\n                return;\n            }\n            if (i === rleNext?.start) {\n                rleNext.start++;\n            }\n            if (isAfter && end > i + 1) {\n                row.splice(insertIndex, 0, rleInsert, {\n                    start: i + 1,\n                    end: rlePrev.end,\n                    value: rlePrev.value,\n                });\n            }\n            else {\n                row.splice(insertIndex, 0, rleInsert);\n            }\n            if (rlePrev?.end > i) {\n                rlePrev.end = i;\n            }\n        };\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.jMultiple = width;\n        this.kMultiple = this.jMultiple * height;\n    }\n    getRLE(i, j, k = 0) {\n        const row = this.rows.get(j + k * this.height);\n        if (!row) {\n            return;\n        }\n        const index = this.findIndex(row, i);\n        const rle = row[index];\n        return i >= rle?.start ? rle : undefined;\n    }\n    findIndex(row, i) {\n        for (let index = 0; index < row.length; index++) {\n            const { end: iEnd } = row[index];\n            if (i < iEnd) {\n                return index;\n            }\n        }\n        return row.length;\n    }\n    clear() {\n        this.rows.clear();\n    }\n    keys() {\n        return [...this.rows.keys()];\n    }\n    getPixelData(k = 0, pixelData) {\n        if (!pixelData) {\n            pixelData = new this.pixelDataConstructor(this.width * this.height * this.numberOfComponents);\n        }\n        else {\n            pixelData.fill(0);\n        }\n        const { width, height, numberOfComponents } = this;\n        for (let j = 0; j < height; j++) {\n            const row = this.getRun(j, k);\n            if (!row) {\n                continue;\n            }\n            if (numberOfComponents === 1) {\n                for (const rle of row) {\n                    const rowOffset = j * width;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i++) {\n                        pixelData[rowOffset + i] = value;\n                    }\n                }\n            }\n            else {\n                for (const rle of row) {\n                    const rowOffset = j * width * numberOfComponents;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i += numberOfComponents) {\n                        for (let comp = 0; comp < numberOfComponents; comp++) {\n                            pixelData[rowOffset + i + comp] = value[comp];\n                        }\n                    }\n                }\n            }\n        }\n        return pixelData;\n    }\n}\n","export function isImageActor(actorEntry) {\n    return (actorIsA(actorEntry, 'vtkVolume') || actorIsA(actorEntry, 'vtkImageSlice'));\n}\nexport function actorIsA(actorEntry, actorType) {\n    const actorToCheck = 'isA' in actorEntry ? actorEntry : actorEntry.actor;\n    return !!actorToCheck.isA(actorType);\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nexport default function applyPreset(actor, preset) {\n    const colorTransferArray = preset.colorTransfer\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const { shiftRange } = getShiftRange(colorTransferArray);\n    const min = shiftRange[0];\n    const width = shiftRange[1] - shiftRange[0];\n    const cfun = vtkColorTransferFunction.newInstance();\n    const normColorTransferValuePoints = [];\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        let value = colorTransferArray[i];\n        const r = colorTransferArray[i + 1];\n        const g = colorTransferArray[i + 2];\n        const b = colorTransferArray[i + 3];\n        value = (value - min) / width;\n        normColorTransferValuePoints.push([value, r, g, b]);\n    }\n    applyPointsToRGBFunction(normColorTransferValuePoints, shiftRange, cfun);\n    actor.getProperty().setRGBTransferFunction(0, cfun);\n    const scalarOpacityArray = preset.scalarOpacity\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const ofun = vtkPiecewiseFunction.newInstance();\n    const normPoints = [];\n    for (let i = 0; i < scalarOpacityArray.length; i += 2) {\n        let value = scalarOpacityArray[i];\n        const opacity = scalarOpacityArray[i + 1];\n        value = (value - min) / width;\n        normPoints.push([value, opacity]);\n    }\n    applyPointsToPiecewiseFunction(normPoints, shiftRange, ofun);\n    const property = actor.getProperty();\n    property.setScalarOpacity(0, ofun);\n    const [gradientMinValue, gradientMinOpacity, gradientMaxValue, gradientMaxOpacity,] = preset.gradientOpacity.split(' ').splice(1).map(parseFloat);\n    property.setUseGradientOpacity(0, true);\n    property.setGradientOpacityMinimumValue(0, gradientMinValue);\n    property.setGradientOpacityMinimumOpacity(0, gradientMinOpacity);\n    property.setGradientOpacityMaximumValue(0, gradientMaxValue);\n    property.setGradientOpacityMaximumOpacity(0, gradientMaxOpacity);\n    if (preset.interpolation === '1') {\n        property.setInterpolationTypeToFastLinear();\n    }\n    property.setShade(preset.shade === '1');\n    const ambient = parseFloat(preset.ambient);\n    const diffuse = parseFloat(preset.diffuse);\n    const specular = parseFloat(preset.specular);\n    const specularPower = parseFloat(preset.specularPower);\n    property.setAmbient(ambient);\n    property.setDiffuse(diffuse);\n    property.setSpecular(specular);\n    property.setSpecularPower(specularPower);\n}\nfunction getShiftRange(colorTransferArray) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        min = Math.min(min, colorTransferArray[i]);\n        max = Math.max(max, colorTransferArray[i]);\n    }\n    const center = (max - min) / 2;\n    return {\n        shiftRange: [-center, center],\n        min,\n        max,\n    };\n}\nfunction applyPointsToRGBFunction(points, range, cfun) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, r, g, b]) => [\n        x * width + range[0],\n        r,\n        g,\n        b,\n    ]);\n    cfun.removeAllPoints();\n    rescaled.forEach(([x, r, g, b]) => cfun.addRGBPoint(x, r, g, b));\n    return rescaled;\n}\nfunction applyPointsToPiecewiseFunction(points, range, pwf) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, y]) => [x * width + range[0], y]);\n    pwf.removeAllPoints();\n    rescaled.forEach(([x, y]) => pwf.addPoint(x, y));\n    return rescaled;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nconst autoLoad = (volumeId) => {\n    const renderingEngineAndViewportIds = getRenderingEngineAndViewportsContainingVolume(volumeId);\n    if (!renderingEngineAndViewportIds?.length) {\n        return;\n    }\n    renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\n        if (!renderingEngine.hasBeenDestroyed) {\n            renderingEngine.renderViewports(viewportIds);\n        }\n    });\n};\nfunction getRenderingEngineAndViewportsContainingVolume(volumeId) {\n    const renderingEnginesArray = getRenderingEngines();\n    const renderingEngineAndViewportIds = [];\n    renderingEnginesArray.forEach((renderingEngine) => {\n        const viewports = getViewportsWithVolumeId(volumeId);\n        if (viewports.length) {\n            renderingEngineAndViewportIds.push({\n                renderingEngine,\n                viewportIds: viewports.map((viewport) => viewport.id),\n            });\n        }\n    });\n    return renderingEngineAndViewportIds;\n}\nexport default autoLoad;\n","function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nexport { clamp as default, clamp };\n","import vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport isEqual from './isEqual';\nimport { actorIsA } from './actorCheck';\nconst _colormaps = new Map();\nfunction registerColormap(colormap) {\n    _colormaps.set(colormap.Name, colormap);\n}\nfunction getColormap(name) {\n    return _colormaps.get(name);\n}\nfunction getColormapNames() {\n    return Array.from(_colormaps.keys());\n}\nfunction findMatchingColormap(rgbPoints, actor) {\n    const colormapsVTK = vtkColorMaps.rgbPresetNames.map((presetName) => vtkColorMaps.getPresetByName(presetName));\n    const colormapsCS3D = getColormapNames().map((colormapName) => getColormap(colormapName));\n    const colormaps = colormapsVTK.concat(colormapsCS3D);\n    const matchedColormap = colormaps.find((colormap) => {\n        const { RGBPoints: presetRGBPoints } = colormap;\n        if (presetRGBPoints.length !== rgbPoints.length) {\n            return false;\n        }\n        for (let i = 0; i < presetRGBPoints.length; i += 4) {\n            if (!isEqual(presetRGBPoints.slice(i + 1, i + 4), rgbPoints.slice(i + 1, i + 4))) {\n                return false;\n            }\n        }\n        return true;\n    });\n    if (!matchedColormap) {\n        return null;\n    }\n    const opacity = [];\n    if (actorIsA(actor, 'vtkVolume')) {\n        const opacityPoints = actor\n            .getProperty()\n            .getScalarOpacity(0)\n            .getDataPointer();\n        if (!opacityPoints) {\n            return {\n                name: matchedColormap.Name,\n            };\n        }\n        for (let i = 0; i < opacityPoints.length; i += 2) {\n            opacity.push({\n                value: opacityPoints[i],\n                opacity: opacityPoints[i + 1],\n            });\n        }\n    }\n    return {\n        name: matchedColormap.Name,\n        opacity,\n    };\n}\nexport { getColormap, getColormapNames, registerColormap, findMatchingColormap, };\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nexport default function createLinearRGBTransferFunction(voiRange) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    let lower = 0;\n    let upper = 1024;\n    if (voiRange.lower !== undefined && voiRange.upper !== undefined) {\n        lower = voiRange.lower;\n        upper = voiRange.upper;\n    }\n    cfun.addRGBPoint(lower, 0.0, 0.0, 0.0);\n    cfun.addRGBPoint(upper, 1.0, 1.0, 1.0);\n    return cfun;\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport * as windowLevelUtil from './windowLevel';\nexport default function createSigmoidRGBTransferFunction(voiRange, approximationNodes = 1024) {\n    const { windowWidth, windowCenter } = windowLevelUtil.toWindowLevel(voiRange.lower, voiRange.upper);\n    const sigmoid = (x, wc, ww) => {\n        return 1 / (1 + Math.exp((-4 * (x - wc)) / ww));\n    };\n    const logit = (y, wc, ww) => {\n        return wc - (ww / 4) * Math.log((1 - y) / y);\n    };\n    const range = Array.from({ length: approximationNodes }, (_, i) => (i + 1) / (approximationNodes + 2));\n    const table = range.flatMap((y) => {\n        const x = logit(y, windowCenter, windowWidth);\n        return [x, y, y, y, 0.5, 0.0];\n    });\n    const cfun = vtkColorTransferFunction.newInstance();\n    cfun.buildFunctionFromArray(vtkDataArray.newInstance({\n        values: table,\n        numberOfComponents: 6,\n    }));\n    return cfun;\n}\n","export default function decimate(list, interleave, offset = 0) {\n    const interleaveIndices = [];\n    for (let i = offset; i < list.length; i += interleave) {\n        interleaveIndices.push(i);\n    }\n    return interleaveIndices;\n}\n","export function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n    if (typeof obj === 'function') {\n        return obj;\n    }\n    if (typeof structuredClone === 'function') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(deepClone);\n    }\n    else {\n        const clonedObj = {};\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                clonedObj[key] = deepClone(obj[key]);\n            }\n        }\n        return clonedObj;\n    }\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { EPSILON } from '../constants';\nexport default function getClosestImageId(imageVolume, worldPos, viewPlaneNormal) {\n    const { direction, spacing, imageIds } = imageVolume;\n    if (!imageIds.length) {\n        return;\n    }\n    const kVector = direction.slice(6, 9);\n    const dotProducts = vec3.dot(kVector, viewPlaneNormal);\n    if (Math.abs(dotProducts) < 1 - EPSILON) {\n        return;\n    }\n    const spacingInNormalDirection = getSpacingInNormalDirection({ direction, spacing }, viewPlaneNormal);\n    const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    let imageIdForTool;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const dir = vec3.create();\n        vec3.sub(dir, worldPos, imagePositionPatient);\n        const dot = vec3.dot(dir, viewPlaneNormal);\n        if (Math.abs(dot) < halfSpacingInNormalDirection) {\n            imageIdForTool = imageId;\n        }\n    }\n    return imageIdForTool;\n}\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getImageSliceDataForVolumeViewport(viewport) {\n    const camera = viewport.getCamera();\n    const { spacingInNormalDirection, imageVolume } = getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n    if (!imageVolume) {\n        return;\n    }\n    const { viewPlaneNormal, focalPoint } = camera;\n    const actorEntry = viewport\n        .getActors()\n        .find((a) => a.referencedId === imageVolume.volumeId ||\n        a.uid === imageVolume.volumeId);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', imageVolume.volumeId);\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    const { min, max, current } = sliceRange;\n    const numberOfSlices = Math.round((max - min) / spacingInNormalDirection) + 1;\n    let imageIndex = ((current - min) / (max - min)) * numberOfSlices;\n    imageIndex = Math.floor(imageIndex);\n    if (imageIndex > numberOfSlices - 1) {\n        imageIndex = numberOfSlices - 1;\n    }\n    else if (imageIndex < 0) {\n        imageIndex = 0;\n    }\n    return {\n        numberOfSlices,\n        imageIndex,\n    };\n}\nexport default getImageSliceDataForVolumeViewport;\n","export default function getMinMax(storedPixelData) {\n    let min = storedPixelData[0];\n    let max = storedPixelData[0];\n    let storedPixel;\n    const numPixels = storedPixelData.length;\n    for (let index = 1; index < numPixels; index++) {\n        storedPixel = storedPixelData[index];\n        min = Math.min(min, storedPixel);\n        max = Math.max(max, storedPixel);\n    }\n    return {\n        min,\n        max,\n    };\n}\n","import * as metaData from '../metaData';\nexport default function getScalingParameters(imageId) {\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n    const { modality } = generalSeriesModule;\n    const scalingParameters = {\n        rescaleSlope: modalityLutModule.rescaleSlope || 1,\n        rescaleIntercept: modalityLutModule.rescaleIntercept ?? 0,\n        modality,\n    };\n    const suvFactor = metaData.get('scalingModule', imageId) || {};\n    return {\n        ...scalingParameters,\n        ...(modality === 'PT' && {\n            suvbw: suvFactor.suvbw,\n            suvbsa: suvFactor.suvbsa,\n            suvlbm: suvFactor.suvlbm,\n        }),\n    };\n}\n","import vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport { EPSILON } from '../constants';\nconst SMALL_EPSILON = EPSILON * EPSILON;\nconst isOne = (v) => Math.abs(Math.abs(v) - 1) < SMALL_EPSILON;\nconst isUnit = (v, off) => isOne(v[off]) || isOne(v[off + 1]) || isOne(v[off + 2]);\nconst isOrthonormal = (v) => isUnit(v, 0) && isUnit(v, 3) && isUnit(v, 6);\nexport default function getSliceRange(volumeActor, viewPlaneNormal, focalPoint) {\n    const imageData = volumeActor.getMapper().getInputData();\n    let corners;\n    const direction = imageData.getDirection();\n    if (isOrthonormal(direction)) {\n        corners = getVolumeActorCorners(volumeActor);\n    }\n    else {\n        const [dx, dy, dz] = imageData.getDimensions();\n        const cornersIdx = [\n            [0, 0, 0],\n            [dx - 1, 0, 0],\n            [0, dy - 1, 0],\n            [dx - 1, dy - 1, 0],\n            [0, 0, dz - 1],\n            [dx - 1, 0, dz - 1],\n            [0, dy - 1, dz - 1],\n            [dx - 1, dy - 1, dz - 1],\n        ];\n        corners = cornersIdx.map((it) => imageData.indexToWorld(it));\n    }\n    const transform = vtkMatrixBuilder\n        .buildFromDegree()\n        .identity()\n        .rotateFromDirections(viewPlaneNormal, [1, 0, 0]);\n    corners.forEach((pt) => transform.apply(pt));\n    const transformedFocalPoint = [...focalPoint];\n    transform.apply(transformedFocalPoint);\n    const currentSlice = transformedFocalPoint[0];\n    let minX = Infinity;\n    let maxX = -Infinity;\n    for (let i = 0; i < 8; i++) {\n        const x = corners[i][0];\n        if (x > maxX) {\n            maxX = x;\n        }\n        if (x < minX) {\n            minX = x;\n        }\n    }\n    return {\n        min: minX,\n        max: maxX,\n        current: currentSlice,\n        actor: volumeActor,\n        viewPlaneNormal,\n        focalPoint,\n    };\n}\n","import { vec3 } from 'gl-matrix';\nexport default function getSpacingInNormalDirection(imageVolume, viewPlaneNormal) {\n    const { direction, spacing } = imageVolume;\n    const iVector = direction.slice(0, 3);\n    const jVector = direction.slice(3, 6);\n    const kVector = direction.slice(6, 9);\n    const dotProducts = [\n        vec3.dot(iVector, viewPlaneNormal),\n        vec3.dot(jVector, viewPlaneNormal),\n        vec3.dot(kVector, viewPlaneNormal),\n    ];\n    const projectedSpacing = vec3.create();\n    vec3.set(projectedSpacing, dotProducts[0] * spacing[0], dotProducts[1] * spacing[1], dotProducts[2] * spacing[2]);\n    const spacingInNormalDirection = vec3.length(projectedSpacing);\n    return spacingInNormalDirection;\n}\n","import cache from '../cache/cache';\nimport { EPSILON } from '../constants';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { getVolumeLoaderSchemes } from '../loaders/volumeLoader';\nimport { getVolumeId } from './getVolumeId';\nconst EPSILON_PART = 1 + EPSILON;\nconst startsWith = (str, starts) => starts === str.substring(0, Math.min(str.length, starts.length));\nconst isPrimaryVolume = (volume) => !!getVolumeLoaderSchemes().find((scheme) => startsWith(volume.volumeId, scheme));\nexport default function getTargetVolumeAndSpacingInNormalDir(viewport, camera, targetId, useSlabThickness = false) {\n    const { viewPlaneNormal } = camera;\n    const volumeActors = viewport.getActors();\n    if (!volumeActors.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const imageVolumes = volumeActors\n        .map((va) => {\n        const actorUID = va.referencedId ?? va.uid;\n        return cache.getVolume(actorUID);\n    })\n        .filter((iv) => !!iv);\n    if (targetId) {\n        const targetVolumeId = getVolumeId(targetId);\n        const imageVolumeIndex = imageVolumes.findIndex((iv) => targetVolumeId.includes(iv.volumeId));\n        const imageVolume = imageVolumes[imageVolumeIndex];\n        const { uid: actorUID } = volumeActors[imageVolumeIndex];\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness);\n        return { imageVolume, spacingInNormalDirection, actorUID };\n    }\n    if (!imageVolumes.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const smallest = {\n        spacingInNormalDirection: Infinity,\n        imageVolume: null,\n        actorUID: null,\n    };\n    const hasPrimaryVolume = imageVolumes.find(isPrimaryVolume);\n    for (let i = 0; i < imageVolumes.length; i++) {\n        const imageVolume = imageVolumes[i];\n        if (hasPrimaryVolume && !isPrimaryVolume(imageVolume)) {\n            continue;\n        }\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport);\n        if (spacingInNormalDirection * EPSILON_PART <\n            smallest.spacingInNormalDirection) {\n            smallest.spacingInNormalDirection = spacingInNormalDirection;\n            smallest.imageVolume = imageVolume;\n            smallest.actorUID = volumeActors[i].uid;\n        }\n    }\n    return smallest;\n}\nfunction getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness = false) {\n    const { slabThickness } = viewport.getProperties();\n    let spacingInNormalDirection = slabThickness;\n    if (!slabThickness || !useSlabThickness) {\n        spacingInNormalDirection = getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n    }\n    return spacingInNormalDirection;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nfunction getViewportsWithVolumeId(volumeId) {\n    const renderingEngines = getRenderingEngines();\n    const targetViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getVolumeViewports();\n        const filteredViewports = viewports.filter((vp) => vp.hasVolumeId(volumeId));\n        targetViewports.push(...filteredViewports);\n    });\n    return targetViewports;\n}\nexport default getViewportsWithVolumeId;\n","export default function getVoiFromSigmoidRGBTransferFunction(cfun) {\n    let cfunRange = [];\n    const [lower, upper] = cfun.getRange();\n    cfun.getTable(lower, upper, 1024, cfunRange);\n    cfunRange = cfunRange.filter((v, k) => k % 3 === 0);\n    const cfunDomain = [...Array(1024).keys()].map((v, k) => {\n        return lower + ((upper - lower) / (1024 - 1)) * k;\n    });\n    const y1 = cfunRange[256];\n    const logy1 = Math.log((1 - y1) / y1);\n    const x1 = cfunDomain[256];\n    const y2 = cfunRange[256 * 3];\n    const logy2 = Math.log((1 - y2) / y2);\n    const x2 = cfunDomain[256 * 3];\n    const ww = Math.round((4 * (x2 - x1)) / (logy1 - logy2));\n    const wc = Math.round(x1 + (ww * logy1) / 4);\n    return [Math.round(wc - ww / 2), Math.round(wc + ww / 2)];\n}\n","export default function getVolumeActorCorners(volumeActor) {\n    const imageData = volumeActor.getMapper().getInputData();\n    const bounds = imageData.extentToBounds(imageData.getExtent());\n    return [\n        [bounds[0], bounds[2], bounds[4]],\n        [bounds[0], bounds[2], bounds[5]],\n        [bounds[0], bounds[3], bounds[4]],\n        [bounds[0], bounds[3], bounds[5]],\n        [bounds[1], bounds[2], bounds[4]],\n        [bounds[1], bounds[2], bounds[5]],\n        [bounds[1], bounds[3], bounds[4]],\n        [bounds[1], bounds[3], bounds[5]],\n    ];\n}\n","export const getVolumeId = (targetId) => {\n    const prefix = 'volumeId:';\n    const str = targetId.includes(prefix)\n        ? targetId.substring(prefix.length)\n        : targetId;\n    const index = str.indexOf('sliceIndex=');\n    return index === -1 ? str : str.substring(0, index - 1);\n};\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness = false) {\n    const camera = viewport.getCamera();\n    const { focalPoint, viewPlaneNormal } = camera;\n    const { spacingInNormalDirection, actorUID } = getTargetVolumeAndSpacingInNormalDir(viewport, camera, volumeId, useSlabThickness);\n    if (!actorUID) {\n        throw new Error(`Could not find image volume with id ${volumeId} in the viewport`);\n    }\n    const actorEntry = viewport.getActor(actorUID);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', actorUID);\n        return null;\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    return {\n        sliceRange,\n        spacingInNormalDirection,\n        camera,\n    };\n}\nexport default getVolumeSliceRangeInfo;\n","import getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nfunction getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness = false) {\n    const { sliceRange, spacingInNormalDirection, camera } = getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness);\n    const { min, max, current } = sliceRange;\n    const numScrollSteps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * numScrollSteps;\n    const currentStepIndex = Math.round(floatingStepNumber);\n    return {\n        numScrollSteps,\n        currentStepIndex,\n        sliceRangeInfo: {\n            sliceRange,\n            spacingInNormalDirection,\n            camera,\n        },\n    };\n}\nexport default getVolumeViewportScrollInfo;\n","export const hasFloatScalingParameters = (scalingParameters) => {\n    const hasFloatRescale = Object.values(scalingParameters).some((value) => typeof value === 'number' && !Number.isInteger(value));\n    return hasFloatRescale;\n};\n","export default function hasNaNValues(input) {\n    if (Array.isArray(input)) {\n        return input.some((value) => Number.isNaN(value));\n    }\n    return Number.isNaN(input);\n}\n","export default function imageIdToURI(imageId) {\n    const colonIndex = imageId.indexOf(':');\n    return imageId.substring(colonIndex + 1);\n}\n","import { addProvider } from '../metaData';\nconst retrieveConfigurationState = new Map();\nconst IMAGE_RETRIEVE_CONFIGURATION = 'imageRetrieveConfiguration';\nconst imageRetrieveMetadataProvider = {\n    IMAGE_RETRIEVE_CONFIGURATION,\n    clear: () => {\n        retrieveConfigurationState.clear();\n    },\n    add: (key, payload) => {\n        retrieveConfigurationState.set(key, payload);\n    },\n    get: (type, ...queries) => {\n        if (type === IMAGE_RETRIEVE_CONFIGURATION) {\n            return queries\n                .map((query) => retrieveConfigurationState.get(query))\n                .find((it) => it !== undefined);\n        }\n    },\n};\naddProvider(imageRetrieveMetadataProvider.get.bind(imageRetrieveMetadataProvider));\nexport default imageRetrieveMetadataProvider;\n","var EventListenerPhases;\n(function (EventListenerPhases) {\n    EventListenerPhases[EventListenerPhases[\"None\"] = 0] = \"None\";\n    EventListenerPhases[EventListenerPhases[\"Capture\"] = 1] = \"Capture\";\n    EventListenerPhases[EventListenerPhases[\"Bubble\"] = 2] = \"Bubble\";\n})(EventListenerPhases || (EventListenerPhases = {}));\nclass TargetEventListeners {\n    constructor(target) {\n        this._eventListeners = new Map();\n        this._children = new Map();\n        this._target = target;\n    }\n    get isEmpty() {\n        return this._eventListeners.size === 0 && this._children.size === 0;\n    }\n    addEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            let childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                childElementEventListener = new TargetEventListeners(this._target);\n                this._children.set(namespaceToken, childElementEventListener);\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.addEventListener(type, callback, options);\n        }\n        else {\n            this._addEventListener(type, callback, options);\n        }\n    }\n    removeEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            const childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                return;\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.removeEventListener(type, callback, options);\n            if (childElementEventListener.isEmpty) {\n                this._children.delete(namespaceToken);\n            }\n        }\n        else {\n            this._removeEventListener(type, callback, options);\n        }\n    }\n    reset() {\n        Array.from(this._children.entries()).forEach(([namespace, child]) => {\n            child.reset();\n            if (child.isEmpty) {\n                this._children.delete(namespace);\n            }\n            else {\n                throw new Error('Child is not empty and cannot be removed');\n            }\n        });\n        this._unregisterAllEvents();\n    }\n    _addEventListener(type, callback, options) {\n        let listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            listenersMap = new Map();\n            this._eventListeners.set(type, listenersMap);\n        }\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const registeredPhases = listenersMap.get(callback) ?? EventListenerPhases.None;\n        if (registeredPhases & listenerPhase) {\n            console.warn('A listener is already registered for this phase');\n            return;\n        }\n        listenersMap.set(callback, registeredPhases | listenerPhase);\n        this._target.addEventListener(type, callback, options);\n    }\n    _removeEventListener(type, callback, options) {\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            return;\n        }\n        const callbacks = callback ? [callback] : Array.from(listenersMap.keys());\n        callbacks.forEach((callbackItem) => {\n            const registeredPhases = listenersMap.get(callbackItem) ?? EventListenerPhases.None;\n            const phaseRegistered = !!(registeredPhases & listenerPhase);\n            if (!phaseRegistered) {\n                return;\n            }\n            this._target.removeEventListener(type, callbackItem, options);\n            const newListenerPhase = registeredPhases ^ listenerPhase;\n            if (newListenerPhase === EventListenerPhases.None) {\n                listenersMap.delete(callbackItem);\n            }\n            else {\n                listenersMap.set(callbackItem, newListenerPhase);\n            }\n        });\n        if (!listenersMap.size) {\n            this._eventListeners.delete(type);\n        }\n    }\n    _unregisterAllListeners(type, listenersMap) {\n        Array.from(listenersMap.entries()).forEach(([listener, eventPhases]) => {\n            const startPhase = EventListenerPhases.Capture;\n            for (let currentPhase = startPhase; eventPhases; currentPhase <<= 1) {\n                if (!(eventPhases & currentPhase)) {\n                    continue;\n                }\n                const useCapture = currentPhase === EventListenerPhases.Capture ? true : false;\n                this.removeEventListener(type, listener, { capture: useCapture });\n                eventPhases ^= currentPhase;\n            }\n        });\n    }\n    _unregisterAllEvents() {\n        Array.from(this._eventListeners.entries()).forEach(([type, listenersMap]) => {\n            this._unregisterAllListeners(type, listenersMap);\n        });\n    }\n}\nexport { TargetEventListeners as default, TargetEventListeners };\n","import TargetEventListeners from './TargetEventListeners';\nclass MultiTargetEventListenerManager {\n    constructor() {\n        this._targetsEventListeners = new Map();\n    }\n    addEventListener(target, type, callback, options) {\n        let eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            eventListeners = new TargetEventListeners(target);\n            this._targetsEventListeners.set(target, eventListeners);\n        }\n        eventListeners.addEventListener(type, callback, options);\n    }\n    removeEventListener(target, type, callback, options) {\n        const eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            return;\n        }\n        eventListeners.removeEventListener(type, callback, options);\n        if (eventListeners.isEmpty) {\n            this._targetsEventListeners.delete(target);\n        }\n    }\n    reset() {\n        Array.from(this._targetsEventListeners.entries()).forEach(([target, targetEventListeners]) => {\n            targetEventListeners.reset();\n            this._targetsEventListeners.delete(target);\n        });\n    }\n}\nexport { MultiTargetEventListenerManager as default, MultiTargetEventListenerManager, };\n","export default function scaleRGBTransferFunction(rgbTransferFunction, scalingFactor) {\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = nodeValue1[1] * scalingFactor;\n        nodeValue1[2] = nodeValue1[2] * scalingFactor;\n        nodeValue1[3] = nodeValue1[3] * scalingFactor;\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","const LAST_RUNTIME_ID = Symbol('LastRuntimeId');\nconst GLOBAL_CONTEXT = {};\nconst DEFAULT_MAX = 0xffffffff;\nconst DEFAULT_SEPARATOR = '-';\nexport default function getRuntimeId(context, separator, max) {\n    return getNextRuntimeId(context !== null && typeof context === 'object' ? context : GLOBAL_CONTEXT, LAST_RUNTIME_ID, (typeof max === 'number' && max > 0 ? max : DEFAULT_MAX) >>> 0).join(typeof separator === 'string' ? separator : DEFAULT_SEPARATOR);\n}\nfunction getNextRuntimeId(context, symbol, max) {\n    let idComponents = context[symbol];\n    if (!(idComponents instanceof Array)) {\n        idComponents = [0];\n        Object.defineProperty(context, symbol, { value: idComponents });\n    }\n    for (let carry = true, i = 0; carry && i < idComponents.length; ++i) {\n        let n = idComponents[i] | 0;\n        if (n < max) {\n            carry = false;\n            n = n + 1;\n        }\n        else {\n            n = 0;\n            if (i + 1 === idComponents.length) {\n                idComponents.push(0);\n            }\n        }\n        idComponents[i] = n;\n    }\n    return idComponents;\n}\n","import imageIdToURI from './imageIdToURI';\nconst state = {};\nconst metadataProvider = {\n    add: (imageId, payload) => {\n        const imageURI = imageIdToURI(imageId);\n        state[imageURI] = payload;\n    },\n    get: (type, imageId) => {\n        if (type === 'calibratedPixelSpacing') {\n            const imageURI = imageIdToURI(imageId);\n            return state[imageURI];\n        }\n    },\n};\nexport default metadataProvider;\n","export default function isOpposite(v1, v2, tolerance = 1e-5) {\n    return (Math.abs(v1[0] + v2[0]) < tolerance &&\n        Math.abs(v1[1] + v2[1]) < tolerance &&\n        Math.abs(v1[2] + v2[2]) < tolerance);\n}\n","export default function indexWithinDimensions(index, dimensions) {\n    if (index[0] < 0 ||\n        index[0] >= dimensions[0] ||\n        index[1] < 0 ||\n        index[1] >= dimensions[1] ||\n        index[2] < 0 ||\n        index[2] >= dimensions[2]) {\n        return false;\n    }\n    return true;\n}\n","import { getRenderingEngines, getRenderingEngine, } from '../RenderingEngine/getRenderingEngine';\nfunction getVolumeViewportsContainingSameVolumes(targetViewport, renderingEngineId) {\n    let renderingEngines;\n    if (renderingEngineId) {\n        renderingEngines = [getRenderingEngine(renderingEngineId)];\n    }\n    else {\n        renderingEngines = getRenderingEngines();\n    }\n    const sameVolumesViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const targetActors = targetViewport.getActors();\n        const viewports = renderingEngine.getVolumeViewports();\n        for (const vp of viewports) {\n            const vpActors = vp.getActors();\n            if (vpActors.length !== targetActors.length) {\n                continue;\n            }\n            const sameVolumes = targetActors.every(({ uid }) => vpActors.find((vpActor) => uid === vpActor.uid));\n            if (sameVolumes) {\n                sameVolumesViewports.push(vp);\n            }\n        }\n    });\n    return sameVolumesViewports;\n}\nexport default getVolumeViewportsContainingSameVolumes;\n","const isPTPrescaledWithSUV = (image) => {\n    return image.preScale.scaled && image.preScale.scalingParameters.suvbw;\n};\nexport default isPTPrescaledWithSUV;\n","import getOrCreateCanvas, { EPSILON, } from '../RenderingEngine/helpers/getOrCreateCanvas';\nimport { ViewportType, Events } from '../enums';\nimport { getRenderingEngine } from '../RenderingEngine/getRenderingEngine';\nimport RenderingEngine from '../RenderingEngine';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nexport default function renderToCanvasGPU(canvas, imageOrVolume, modality = undefined, renderingEngineId = '_thumbnails', viewportOptions = {\n    displayArea: { imageArea: [1, 1] },\n}) {\n    if (!canvas || !(canvas instanceof HTMLCanvasElement)) {\n        throw new Error('canvas element is required');\n    }\n    const isVolume = !imageOrVolume.imageId;\n    const image = !isVolume && imageOrVolume;\n    const volume = isVolume && imageOrVolume;\n    const imageIdToPrint = image.imageId || volume.volumeId;\n    const viewportId = `renderGPUViewport-${imageIdToPrint}`;\n    const element = document.createElement('div');\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    if (!viewportOptions.displayArea) {\n        viewportOptions.displayArea = { imageArea: [1, 1] };\n    }\n    const originalWidth = canvas.width;\n    const originalHeight = canvas.height;\n    element.style.width = `${originalWidth / devicePixelRatio + EPSILON}px`;\n    element.style.height = `${originalHeight / devicePixelRatio + EPSILON}px`;\n    element.style.visibility = 'hidden';\n    element.style.position = 'absolute';\n    document.body.appendChild(element);\n    const uniqueId = viewportId.split(':').join('-');\n    element.setAttribute('viewport-id-for-remove', uniqueId);\n    const temporaryCanvas = getOrCreateCanvas(element);\n    const renderingEngine = getRenderingEngine(renderingEngineId) ||\n        new RenderingEngine(renderingEngineId);\n    let viewport = renderingEngine.getViewport(viewportId);\n    if (!viewport) {\n        const viewportInput = {\n            viewportId,\n            type: isVolume ? ViewportType.ORTHOGRAPHIC : ViewportType.STACK,\n            element,\n            defaultOptions: {\n                ...viewportOptions,\n                suppressEvents: true,\n            },\n        };\n        renderingEngine.enableElement(viewportInput);\n        viewport = renderingEngine.getViewport(viewportId);\n    }\n    return new Promise((resolve) => {\n        let elementRendered = false;\n        let { viewReference } = viewportOptions;\n        const onImageRendered = (eventDetail) => {\n            if (elementRendered) {\n                return;\n            }\n            if (viewReference) {\n                const useViewRef = viewReference;\n                viewReference = null;\n                viewport.setViewReference(useViewRef);\n                viewport.render();\n                return;\n            }\n            const context = canvas.getContext('2d');\n            context.drawImage(temporaryCanvas, 0, 0, temporaryCanvas.width, temporaryCanvas.height, 0, 0, canvas.width, canvas.height);\n            const origin = viewport.canvasToWorld([0, 0]);\n            const topRight = viewport.canvasToWorld([\n                temporaryCanvas.width / devicePixelRatio,\n                0,\n            ]);\n            const bottomLeft = viewport.canvasToWorld([\n                0,\n                temporaryCanvas.height / devicePixelRatio,\n            ]);\n            const thicknessMm = 1;\n            elementRendered = true;\n            element.removeEventListener(Events.IMAGE_RENDERED, onImageRendered);\n            setTimeout(() => {\n                renderingEngine.disableElement(viewportId);\n                const elements = document.querySelectorAll(`[viewport-id-for-remove=\"${uniqueId}\"]`);\n                elements.forEach((element) => {\n                    element.remove();\n                });\n            }, 0);\n            resolve({\n                origin,\n                bottomLeft,\n                topRight,\n                thicknessMm,\n            });\n        };\n        element.addEventListener(Events.IMAGE_RENDERED, onImageRendered);\n        if (isVolume) {\n            viewport.setVolumes([volume], false, true);\n        }\n        else {\n            viewport.renderImageObject(imageOrVolume);\n        }\n        viewport.resetCamera();\n        if (modality === 'PT' && !isPTPrescaledWithSUV(image)) {\n            viewport.setProperties({\n                voiRange: {\n                    lower: image.minPixelValue,\n                    upper: image.maxPixelValue,\n                },\n            });\n        }\n        viewport.render();\n    });\n}\n","import getDefaultViewport from '../RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport';\nimport calculateTransform from '../RenderingEngine/helpers/cpuFallback/rendering/calculateTransform';\nimport drawImageSync from '../RenderingEngine/helpers/cpuFallback/drawImageSync';\nexport default function renderToCanvasCPU(canvas, imageOrVolume, modality, _renderingEngineId, _viewportOptions) {\n    const volume = imageOrVolume;\n    if (volume.volumeId) {\n        throw new Error('Unsupported volume rendering for CPU');\n    }\n    const image = imageOrVolume;\n    const viewport = getDefaultViewport(canvas, image, modality);\n    const enabledElement = {\n        canvas,\n        viewport,\n        image,\n        renderingTools: {},\n    };\n    enabledElement.transform = calculateTransform(enabledElement);\n    const invalidated = true;\n    return new Promise((resolve, reject) => {\n        drawImageSync(enabledElement, invalidated);\n        resolve(null);\n    });\n}\n","import { loadAndCacheImage } from '../loaders/imageLoader';\nimport * as metaData from '../metaData';\nimport { RequestType } from '../enums';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport { getConfiguration } from '../init';\nimport cache from '../cache/cache';\nexport default function loadImageToCanvas(options) {\n    const { canvas, imageId, viewReference, requestType = RequestType.Thumbnail, priority = -5, renderingEngineId = '_thumbnails', useCPURendering = false, thumbnail = false, imageAspect = false, viewportOptions: baseViewportOptions, } = options;\n    const volumeId = viewReference?.volumeId;\n    const isVolume = volumeId && !imageId;\n    const viewportOptions = viewReference && baseViewportOptions\n        ? { ...baseViewportOptions, viewReference }\n        : baseViewportOptions;\n    const renderFn = useCPURendering ? renderToCanvasCPU : renderToCanvasGPU;\n    return new Promise((resolve, reject) => {\n        function successCallback(imageOrVolume, imageId) {\n            const { modality } = metaData.get('generalSeriesModule', imageId) || {};\n            const image = !isVolume && imageOrVolume;\n            const volume = isVolume && imageOrVolume;\n            if (image) {\n                image.isPreScaled = image.isPreScaled || image.preScale?.scaled;\n            }\n            if (thumbnail) {\n                canvas.height = 256;\n                canvas.width = 256;\n            }\n            if (imageAspect && image) {\n                canvas.width = image && (canvas.height * image.width) / image.height;\n            }\n            canvas.style.width = `${canvas.width / devicePixelRatio}px`;\n            canvas.style.height = `${canvas.height / devicePixelRatio}px`;\n            if (volume && useCPURendering) {\n                reject(new Error('CPU rendering of volume not supported'));\n            }\n            renderFn(canvas, imageOrVolume, modality, renderingEngineId, viewportOptions).then(resolve);\n        }\n        function errorCallback(error, imageId) {\n            console.error(error, imageId);\n            reject(error);\n        }\n        function sendRequest(imageId, imageIdIndex, options) {\n            return loadAndCacheImage(imageId, options).then((image) => {\n                successCallback.call(this, image, imageId);\n            }, (error) => {\n                errorCallback.call(this, error, imageId);\n            });\n        }\n        const options = {\n            useRGBA: !!useCPURendering,\n            requestType,\n        };\n        if (volumeId) {\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                reject(new Error(`Volume id ${volumeId} not found in cache`));\n            }\n            const useImageId = volume.imageIds[0];\n            successCallback(volume, useImageId);\n        }\n        else {\n            imageLoadPoolManager.addRequest(sendRequest.bind(null, imageId, null, options), requestType, { imageId }, priority);\n        }\n    });\n}\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nfunction worldToImageCoords(imageId, worldCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const newOrigin = vec3.create();\n    vec3.scaleAndAdd(newOrigin, origin, columnCosines, -columnPixelSpacing / 2);\n    vec3.scaleAndAdd(newOrigin, newOrigin, rowCosines, -rowPixelSpacing / 2);\n    const sub = vec3.create();\n    vec3.sub(sub, worldCoords, newOrigin);\n    const rowDistance = vec3.dot(sub, rowCosines);\n    const columnDistance = vec3.dot(sub, columnCosines);\n    const imageCoords = [\n        rowDistance / rowPixelSpacing,\n        columnDistance / columnPixelSpacing,\n    ];\n    return imageCoords;\n}\nexport default worldToImageCoords;\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nexport default function imageToWorldCoords(imageId, imageCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const imageCoordsInWorld = vec3.create();\n    vec3.scaleAndAdd(imageCoordsInWorld, origin, rowCosines, rowPixelSpacing * (imageCoords[0] - 0.5));\n    vec3.scaleAndAdd(imageCoordsInWorld, imageCoordsInWorld, columnCosines, columnPixelSpacing * (imageCoords[1] - 0.5));\n    return Array.from(imageCoordsInWorld);\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nexport default function getViewportsWithImageURI(imageURI) {\n    const renderingEngines = getRenderingEngines();\n    const viewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewportsForRenderingEngine = renderingEngine.getViewports();\n        viewportsForRenderingEngine.forEach((viewport) => {\n            if (viewport.hasImageURI(imageURI)) {\n                viewports.push(viewport);\n            }\n        });\n    });\n    return viewports;\n}\n","import { vec3 } from 'gl-matrix';\nimport * as planar from './planar';\nimport * as metaData from '../metaData';\nexport default function getClosestStackImageIndexForPoint(point, viewport) {\n    const minimalDistance = calculateMinimalDistanceForStackViewport(point, viewport);\n    return minimalDistance ? minimalDistance.index : null;\n}\nexport function calculateMinimalDistanceForStackViewport(point, viewport) {\n    const imageIds = viewport.getImageIds();\n    const currentImageIdIndex = viewport.getCurrentImageIdIndex();\n    if (imageIds.length === 0) {\n        return null;\n    }\n    const getDistance = (imageId) => {\n        const planeMetadata = getPlaneMetadata(imageId);\n        if (!planeMetadata) {\n            return null;\n        }\n        const plane = planar.planeEquation(planeMetadata.planeNormal, planeMetadata.imagePositionPatient);\n        const distance = planar.planeDistanceToPoint(plane, point);\n        return distance;\n    };\n    const closestStack = {\n        distance: getDistance(imageIds[currentImageIdIndex]) ?? Infinity,\n        index: currentImageIdIndex,\n    };\n    const higherImageIds = imageIds.slice(currentImageIdIndex + 1);\n    for (let i = 0; i < higherImageIds.length; i++) {\n        const id = higherImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null) {\n            continue;\n        }\n        if (distance <= closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i + currentImageIdIndex + 1;\n        }\n        else {\n            break;\n        }\n    }\n    const lowerImageIds = imageIds.slice(0, currentImageIdIndex);\n    for (let i = lowerImageIds.length - 1; i >= 0; i--) {\n        const id = lowerImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null || distance === closestStack.distance) {\n            continue;\n        }\n        if (distance < closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i;\n        }\n        else {\n            break;\n        }\n    }\n    return closestStack.distance === Infinity ? null : closestStack;\n}\nfunction getPlaneMetadata(imageId) {\n    const targetImagePlane = metaData.get('imagePlaneModule', imageId);\n    if (!targetImagePlane ||\n        !(targetImagePlane.rowCosines instanceof Array &&\n            targetImagePlane.rowCosines.length === 3) ||\n        !(targetImagePlane.columnCosines instanceof Array &&\n            targetImagePlane.columnCosines.length === 3) ||\n        !(targetImagePlane.imagePositionPatient instanceof Array &&\n            targetImagePlane.imagePositionPatient.length === 3)) {\n        return null;\n    }\n    const { rowCosines, columnCosines, imagePositionPatient, } = targetImagePlane;\n    const rowVec = vec3.set(vec3.create(), ...rowCosines);\n    const colVec = vec3.set(vec3.create(), ...columnCosines);\n    const planeNormal = vec3.cross(vec3.create(), rowVec, colVec);\n    return { rowCosines, columnCosines, imagePositionPatient, planeNormal };\n}\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { transformCanvasToIJK } from './transformCanvasToIJK';\nfunction getCurrentVolumeViewportSlice(viewport) {\n    const { width: canvasWidth, height: canvasHeight } = viewport.getCanvas();\n    const { sliceToIndexMatrix, indexToSliceMatrix } = viewport.getSliceViewInfo();\n    const ijkOriginPoint = transformCanvasToIJK(viewport, [0, 0]);\n    const ijkRowPoint = transformCanvasToIJK(viewport, [canvasWidth - 1, 0]);\n    const ijkColPoint = transformCanvasToIJK(viewport, [0, canvasHeight - 1]);\n    const ijkRowVec = vec3.sub(vec3.create(), ijkRowPoint, ijkOriginPoint);\n    const ijkColVec = vec3.sub(vec3.create(), ijkColPoint, ijkOriginPoint);\n    const ijkSliceVec = vec3.cross(vec3.create(), ijkRowVec, ijkColVec);\n    vec3.normalize(ijkRowVec, ijkRowVec);\n    vec3.normalize(ijkColVec, ijkColVec);\n    vec3.normalize(ijkSliceVec, ijkSliceVec);\n    const maxIJKRowVec = Math.max(Math.abs(ijkRowVec[0]), Math.abs(ijkRowVec[1]), Math.abs(ijkRowVec[2]));\n    const maxIJKColVec = Math.max(Math.abs(ijkColVec[0]), Math.abs(ijkColVec[1]), Math.abs(ijkColVec[2]));\n    if (!glMatrix.equals(1, maxIJKRowVec) || !glMatrix.equals(1, maxIJKColVec)) {\n        throw new Error('Livewire is not available for rotate/oblique viewports');\n    }\n    const { voxelManager } = viewport.getImageData();\n    const sliceViewInfo = viewport.getSliceViewInfo();\n    const scalarData = voxelManager.getSliceData(sliceViewInfo);\n    return {\n        width: sliceViewInfo.width,\n        height: sliceViewInfo.height,\n        scalarData,\n        sliceToIndexMatrix,\n        indexToSliceMatrix,\n    };\n}\nexport { getCurrentVolumeViewportSlice as default, getCurrentVolumeViewportSlice, };\n","import { mat4 } from 'gl-matrix';\nimport { addProvider } from '../metaData';\nconst state = {};\nconst spatialRegistrationMetadataProvider = {\n    add: (query, payload) => {\n        const [viewportId1, viewportId2] = query;\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (!state[entryId]) {\n            state[entryId] = {};\n        }\n        state[entryId] = payload;\n    },\n    get: (type, viewportId1, viewportId2) => {\n        if (type !== 'spatialRegistrationModule') {\n            return;\n        }\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (state[entryId]) {\n            return state[entryId];\n        }\n        const entryIdReverse = `${viewportId2}_${viewportId1}`;\n        if (state[entryIdReverse]) {\n            return mat4.invert(mat4.create(), state[entryIdReverse]);\n        }\n    },\n};\naddProvider(spatialRegistrationMetadataProvider.get.bind(spatialRegistrationMetadataProvider));\nexport default spatialRegistrationMetadataProvider;\n","import { vec3, mat4 } from 'gl-matrix';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport { get } from '../metaData';\nconst ALLOWED_DELTA = 0.05;\nfunction calculateViewportsSpatialRegistration(viewport1, viewport2) {\n    const imageId1 = viewport1.getSliceIndex();\n    const imageId2 = viewport2.getSliceIndex();\n    const imagePlaneModule1 = get('imagePlaneModule', imageId1.toString());\n    const imagePlaneModule2 = get('imagePlaneModule', imageId2.toString());\n    if (!imagePlaneModule1 || !imagePlaneModule2) {\n        console.log('Viewport spatial registration requires image plane module');\n        return;\n    }\n    const { imageOrientationPatient: iop2 } = imagePlaneModule2;\n    const isSameImagePlane = imagePlaneModule1.imageOrientationPatient.every((v, i) => Math.abs(v - iop2[i]) < ALLOWED_DELTA);\n    if (!isSameImagePlane) {\n        console.log('Viewport spatial registration only supported for same orientation (hence translation only) for now', imagePlaneModule1?.imageOrientationPatient, imagePlaneModule2?.imageOrientationPatient);\n        return;\n    }\n    const imagePositionPatient1 = imagePlaneModule1.imagePositionPatient;\n    const imagePositionPatient2 = imagePlaneModule2.imagePositionPatient;\n    const translation = vec3.subtract(vec3.create(), imagePositionPatient1, imagePositionPatient2);\n    const mat = mat4.fromTranslation(mat4.create(), translation);\n    spatialRegistrationMetadataProvider.add([viewport1.id, viewport2.id], mat);\n}\nexport default calculateViewportsSpatialRegistration;\n","export default function getViewportImageCornersInWorld(viewport) {\n    const { imageData, dimensions } = viewport.getImageData();\n    const { canvas } = viewport;\n    const ratio = window.devicePixelRatio;\n    const topLeftCanvas = [0, 0];\n    const topRightCanvas = [canvas.width / ratio, 0];\n    const bottomRightCanvas = [\n        canvas.width / ratio,\n        canvas.height / ratio,\n    ];\n    const bottomLeftCanvas = [0, canvas.height / ratio];\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const topRightWorld = viewport.canvasToWorld(topRightCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const bottomLeftWorld = viewport.canvasToWorld(bottomLeftCanvas);\n    const topLeftImage = imageData.worldToIndex(topLeftWorld);\n    const topRightImage = imageData.worldToIndex(topRightWorld);\n    const bottomRightImage = imageData.worldToIndex(bottomRightWorld);\n    const bottomLeftImage = imageData.worldToIndex(bottomLeftWorld);\n    return _getStackViewportImageCorners({\n        dimensions,\n        imageData,\n        topLeftImage,\n        topRightImage,\n        bottomRightImage,\n        bottomLeftImage,\n        topLeftWorld,\n        topRightWorld,\n        bottomRightWorld,\n        bottomLeftWorld,\n    });\n}\nfunction _getStackViewportImageCorners({ dimensions, imageData, topLeftImage, topRightImage, bottomRightImage, bottomLeftImage, topLeftWorld, topRightWorld, bottomRightWorld, bottomLeftWorld, }) {\n    const topLeftImageWorld = _isInBounds(topLeftImage, dimensions)\n        ? topLeftWorld\n        : imageData.indexToWorld([0, 0, 0]);\n    const topRightImageWorld = _isInBounds(topRightImage, dimensions)\n        ? topRightWorld\n        : imageData.indexToWorld([dimensions[0] - 1, 0, 0]);\n    const bottomRightImageWorld = _isInBounds(bottomRightImage, dimensions)\n        ? bottomRightWorld\n        : imageData.indexToWorld([\n            dimensions[0] - 1,\n            dimensions[1] - 1,\n            0,\n        ]);\n    const bottomLeftImageWorld = _isInBounds(bottomLeftImage, dimensions)\n        ? bottomLeftWorld\n        : imageData.indexToWorld([0, dimensions[1] - 1, 0]);\n    return [\n        topLeftImageWorld,\n        topRightImageWorld,\n        bottomLeftImageWorld,\n        bottomRightImageWorld,\n    ];\n}\nfunction _isInBounds(imageCoord, dimensions) {\n    return (imageCoord[0] > 0 ||\n        imageCoord[0] < dimensions[0] - 1 ||\n        imageCoord[1] > 0 ||\n        imageCoord[1] < dimensions[1] - 1 ||\n        imageCoord[2] > 0 ||\n        imageCoord[2] < dimensions[2] - 1);\n}\n","export default class PointsManager {\n    constructor(configuration = {}) {\n        this._dimensions = 3;\n        this._length = 0;\n        this._byteSize = 4;\n        this.growSize = 128;\n        const { initialSize = 1024, dimensions = 3, growSize = 128, } = configuration;\n        const itemLength = initialSize * dimensions;\n        this.growSize = growSize;\n        this.array = new ArrayBuffer(itemLength * this._byteSize);\n        this.data = new Float32Array(this.array);\n        this._dimensions = dimensions;\n    }\n    forEach(func) {\n        for (let i = 0; i < this._length; i++) {\n            func(this.getPoint(i), i);\n        }\n    }\n    get length() {\n        return this._length;\n    }\n    get dimensions() {\n        return this._dimensions;\n    }\n    get dimensionLength() {\n        return this._length * this._dimensions;\n    }\n    getPoint(index) {\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        return this.data.subarray(offset, offset + this._dimensions);\n    }\n    getPointArray(index) {\n        const array = [];\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        for (let i = 0; i < this._dimensions; i++) {\n            array.push(this.data[i + offset]);\n        }\n        return array;\n    }\n    grow(additionalSize = 1, growSize = this.growSize) {\n        if (this.dimensionLength + additionalSize * this._dimensions <=\n            this.data.length) {\n            return;\n        }\n        const newSize = this.data.length + growSize;\n        const newArray = new ArrayBuffer(newSize * this._dimensions * this._byteSize);\n        const newData = new Float32Array(newArray);\n        newData.set(this.data);\n        this.data = newData;\n        this.array = newArray;\n    }\n    reverse() {\n        const midLength = Math.floor(this._length / 2);\n        for (let i = 0; i < midLength; i++) {\n            const indexStart = i * this._dimensions;\n            const indexEnd = (this._length - 1 - i) * this._dimensions;\n            for (let dimension = 0; dimension < this._dimensions; dimension++) {\n                const valueStart = this.data[indexStart + dimension];\n                this.data[indexStart + dimension] = this.data[indexEnd + dimension];\n                this.data[indexEnd + dimension] = valueStart;\n            }\n        }\n    }\n    push(point) {\n        this.grow(1);\n        const offset = this.length * this._dimensions;\n        for (let i = 0; i < this._dimensions; i++) {\n            this.data[i + offset] = point[i];\n        }\n        this._length++;\n    }\n    map(f) {\n        const mapData = [];\n        for (let i = 0; i < this._length; i++) {\n            mapData.push(f(this.getPoint(i), i));\n        }\n        return mapData;\n    }\n    get points() {\n        return this.map((p) => p);\n    }\n    toXYZ() {\n        const xyz = { x: [], y: [] };\n        if (this._dimensions >= 3) {\n            xyz.z = [];\n        }\n        const { x, y, z } = xyz;\n        this.forEach((p) => {\n            x.push(p[0]);\n            y.push(p[1]);\n            if (z) {\n                z.push(p[2]);\n            }\n        });\n        return xyz;\n    }\n    static fromXYZ({ x, y, z }) {\n        const array = PointsManager.create3(x.length);\n        let offset = 0;\n        for (let i = 0; i < x.length; i++) {\n            array.data[offset++] = x[i];\n            array.data[offset++] = y[i];\n            array.data[offset++] = z ? z[i] : 0;\n        }\n        array._length = x.length;\n        return array;\n    }\n    subselect(count = 10, offset = 0) {\n        const selected = new PointsManager({\n            initialSize: count,\n            dimensions: this._dimensions,\n        });\n        for (let i = 0; i < count; i++) {\n            const index = (offset + Math.floor((this.length * i) / count)) % this.length;\n            selected.push(this.getPoint(index));\n        }\n        return selected;\n    }\n    static create3(initialSize = 128) {\n        return new PointsManager({ initialSize, dimensions: 3 });\n    }\n    static create2(initialSize = 128) {\n        return new PointsManager({ initialSize, dimensions: 2 });\n    }\n}\n","import StackViewport from '../RenderingEngine/StackViewport';\nimport getEnabledElement from '../getEnabledElement';\nfunction getImageLegacy(element) {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (!(viewport instanceof StackViewport)) {\n        throw new Error(`An image can only be fetched for a stack viewport and not for a viewport of type: ${viewport.type}`);\n    }\n    return viewport.getCornerstoneImage();\n}\nexport default getImageLegacy;\n","import * as metaData from '../metaData';\nimport isEqual from './isEqual';\nfunction isValidVolume(imageIds) {\n    const imageId0 = imageIds[0];\n    const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, } = metaData.get('imagePlaneModule', imageId0);\n    const baseMetadata = {\n        modality,\n        imageOrientationPatient,\n        pixelSpacing,\n        frameOfReferenceUID,\n        columns,\n        rows,\n        seriesInstanceUID,\n    };\n    const validVolume = imageIds.every((imageId) => {\n        const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId);\n        const { imageOrientationPatient, pixelSpacing, columns, rows } = metaData.get('imagePlaneModule', imageId);\n        return (seriesInstanceUID === baseMetadata.seriesInstanceUID &&\n            modality === baseMetadata.modality &&\n            columns === baseMetadata.columns &&\n            rows === baseMetadata.rows &&\n            isEqual(imageOrientationPatient, baseMetadata.imageOrientationPatient) &&\n            isEqual(pixelSpacing, baseMetadata.pixelSpacing));\n    });\n    return validVolume;\n}\nexport { isValidVolume };\n","export const videoUIDs = new Set([\n    '1.2.840.10008.1.2.4.100',\n    '1.2.840.10008.1.2.4.100.1',\n    '1.2.840.10008.1.2.4.101',\n    '1.2.840.10008.1.2.4.101.1',\n    '1.2.840.10008.1.2.4.102',\n    '1.2.840.10008.1.2.4.102.1',\n    '1.2.840.10008.1.2.4.103',\n    '1.2.840.10008.1.2.4.103.1',\n    '1.2.840.10008.1.2.4.104',\n    '1.2.840.10008.1.2.4.104.1',\n    '1.2.840.10008.1.2.4.105',\n    '1.2.840.10008.1.2.4.105.1',\n    '1.2.840.10008.1.2.4.106',\n    '1.2.840.10008.1.2.4.106.1',\n    '1.2.840.10008.1.2.4.107',\n    '1.2.840.10008.1.2.4.108',\n]);\nexport default function isVideoTransferSyntax(uidOrUids) {\n    if (!uidOrUids) {\n        return false;\n    }\n    const uids = Array.isArray(uidOrUids) ? uidOrUids : [uidOrUids];\n    return uids.find((uid) => videoUIDs.has(uid));\n}\n","import { setVolumesForViewports } from '../RenderingEngine/helpers';\nimport { createAndCacheVolume, getUnknownVolumeLoaderSchema, } from '../loaders/volumeLoader';\nimport { Events, ViewportType } from '../enums';\nimport uuidv4 from './uuidv4';\nasync function convertStackToVolumeViewport({ viewport, options = {}, }) {\n    const renderingEngine = viewport.getRenderingEngine();\n    let volumeId = options.volumeId || `${uuidv4()}`;\n    if (volumeId.split(':').length === 0) {\n        const schema = getUnknownVolumeLoaderSchema();\n        volumeId = `${schema}:${volumeId}`;\n    }\n    const { id, element } = viewport;\n    const viewportId = options.viewportId || id;\n    const imageIds = viewport.getImageIds();\n    const prevViewPresentation = viewport.getViewPresentation();\n    const prevViewReference = viewport.getViewReference();\n    renderingEngine.enableElement({\n        viewportId,\n        type: ViewportType.ORTHOGRAPHIC,\n        element,\n        defaultOptions: {\n            background: options.background,\n            orientation: options.orientation,\n        },\n    });\n    const volume = (await createAndCacheVolume(volumeId, {\n        imageIds,\n    }));\n    volume.load();\n    const volumeViewport = renderingEngine.getViewport(viewportId);\n    await setVolumesForViewports(renderingEngine, [\n        {\n            volumeId,\n        },\n    ], [viewportId]);\n    const volumeViewportNewVolumeHandler = () => {\n        volumeViewport.render();\n        element.removeEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    const addVolumeViewportNewVolumeListener = () => {\n        element.addEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    addVolumeViewportNewVolumeListener();\n    volumeViewport.setViewPresentation(prevViewPresentation);\n    volumeViewport.setViewReference(prevViewReference);\n    volumeViewport.render();\n    return volumeViewport;\n}\nexport { convertStackToVolumeViewport };\n","import cache from '../cache/cache';\nimport { ImageVolume } from '../cache/classes/ImageVolume';\nimport { ViewportType } from '../enums';\nasync function convertVolumeToStackViewport({ viewport, options, }) {\n    const volumeViewport = viewport;\n    const { id, element } = volumeViewport;\n    const renderingEngine = viewport.getRenderingEngine();\n    const { background } = options;\n    const viewportId = options.viewportId || id;\n    const volume = cache.getVolume(volumeViewport.getVolumeId());\n    if (!(volume instanceof ImageVolume)) {\n        throw new Error('Currently, you cannot decache a volume that is not an ImageVolume. So, unfortunately, volumes such as nifti  (which are basic Volume, without imageIds) cannot be decached.');\n    }\n    const viewportInput = {\n        viewportId,\n        type: ViewportType.STACK,\n        element,\n        defaultOptions: {\n            background,\n        },\n    };\n    const prevView = volumeViewport.getViewReference();\n    renderingEngine.enableElement(viewportInput);\n    const stackViewport = renderingEngine.getViewport(viewportId);\n    await stackViewport.setStack(volume.imageIds);\n    stackViewport.setViewReference(prevView);\n    stackViewport.render();\n    return stackViewport;\n}\nexport { convertVolumeToStackViewport };\n","import { EPSILON } from '../constants';\nfunction roundNumber(value, precision = 2) {\n    if (Array.isArray(value)) {\n        return value.map((v) => roundNumber(v, precision)).join(', ');\n    }\n    if (value === undefined || value === null || value === '') {\n        return 'NaN';\n    }\n    value = Number(value);\n    const absValue = Math.abs(value);\n    if (absValue < 0.0001) {\n        return `${value}`;\n    }\n    const fixedPrecision = absValue >= 100\n        ? precision - 2\n        : absValue >= 10\n            ? precision - 1\n            : absValue >= 1\n                ? precision\n                : absValue >= 0.1\n                    ? precision + 1\n                    : absValue >= 0.01\n                        ? precision + 2\n                        : absValue >= 0.001\n                            ? precision + 3\n                            : precision + 4;\n    return value.toFixed(fixedPrecision);\n}\nfunction roundToPrecision(value) {\n    return Math.round(value / EPSILON) * EPSILON;\n}\nexport { roundToPrecision };\nexport default roundNumber;\n","export default function convertToGrayscale(scalarData, width, height) {\n    const isRGBA = scalarData.length === width * height * 4;\n    const isRGB = scalarData.length === width * height * 3;\n    if (isRGBA || isRGB) {\n        const newScalarData = new Float32Array(width * height);\n        let offset = 0;\n        let destOffset = 0;\n        const increment = isRGBA ? 4 : 3;\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const r = scalarData[offset];\n                const g = scalarData[offset + 1];\n                const b = scalarData[offset + 2];\n                newScalarData[destOffset] = (r + g + b) / 3;\n                offset += increment;\n                destOffset++;\n            }\n        }\n        return newScalarData;\n    }\n    else {\n        return scalarData;\n    }\n}\n","import { VolumeViewport } from '../RenderingEngine';\nimport cache from '../cache/cache';\nfunction getViewportImageIds(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        const volume = cache.getVolume(viewport.getVolumeId());\n        return volume.imageIds;\n    }\n    else if (viewport.getImageIds) {\n        return viewport.getImageIds();\n    }\n}\nexport default getViewportImageIds;\n","export function getRandomSampleFromArray(array, size) {\n    const clonedArray = [...array];\n    if (size >= clonedArray.length) {\n        shuffleArray(clonedArray);\n        return clonedArray;\n    }\n    shuffleArray(clonedArray);\n    return clonedArray.slice(0, size);\n}\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n","function componentToHex(c) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n}\nfunction rgbToHex(r, g, b) {\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\nfunction hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        }\n        : null;\n}\nexport { hexToRgb, rgbToHex };\n","export function deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (obj1 == null || obj2 == null) {\n        return false;\n    }\n    try {\n        return JSON.stringify(obj1) === JSON.stringify(obj2);\n    }\n    catch (error) {\n        console.debug('Error in JSON.stringify during deep comparison:', error);\n        return obj1 === obj2;\n    }\n}\n","import * as metaData from '../metaData';\nconst groupBy = (array, key) => {\n    return array.reduce((rv, x) => {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\nfunction getIPPGroups(imageIds) {\n    const ippMetadata = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId) || {};\n        return { imageId, imagePositionPatient };\n    });\n    if (!ippMetadata.every((item) => item.imagePositionPatient)) {\n        return null;\n    }\n    const positionGroups = groupBy(ippMetadata, 'imagePositionPatient');\n    const positions = Object.keys(positionGroups);\n    const frame_count = positionGroups[positions[0]].length;\n    if (frame_count === 1) {\n        return null;\n    }\n    const frame_count_equal = positions.every((k) => positionGroups[k].length === frame_count);\n    if (!frame_count_equal) {\n        return null;\n    }\n    return positionGroups;\n}\nfunction test4DTag(IPPGroups, value_getter) {\n    const frame_groups = {};\n    let first_frame_value_set = [];\n    const positions = Object.keys(IPPGroups);\n    for (let i = 0; i < positions.length; i++) {\n        const frame_value_set = new Set();\n        const frames = IPPGroups[positions[i]];\n        for (let j = 0; j < frames.length; j++) {\n            const frame_value = value_getter(frames[j].imageId) || 0;\n            frame_groups[frame_value] = frame_groups[frame_value] || [];\n            frame_groups[frame_value].push({ imageId: frames[j].imageId });\n            frame_value_set.add(frame_value);\n            if (frame_value_set.size - 1 < j) {\n                return undefined;\n            }\n        }\n        if (i == 0) {\n            first_frame_value_set = Array.from(frame_value_set);\n        }\n        else if (!setEquals(first_frame_value_set, frame_value_set)) {\n            return undefined;\n        }\n    }\n    return frame_groups;\n}\nfunction getTagValue(imageId, tag) {\n    const value = metaData.get(tag, imageId);\n    try {\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getPhilipsPrivateBValue(imageId) {\n    const value = metaData.get('20011003', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            const value_bytes = atob(InlineBinary);\n            const ary_buf = new ArrayBuffer(value_bytes.length);\n            const dv = new DataView(ary_buf);\n            for (let i = 0; i < value_bytes.length; i++) {\n                dv.setUint8(i, value_bytes.charCodeAt(i));\n            }\n            return new Float32Array(ary_buf)[0];\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getSiemensPrivateBValue(imageId) {\n    let value = metaData.get('0019100c', imageId) || metaData.get('0019100C', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary);\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getGEPrivateBValue(imageId) {\n    let value = metaData.get('00431039', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary).split('//');\n        }\n        return parseFloat(value[0]) % 100000;\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction setEquals(set_a, set_b) {\n    if (set_a.length != set_b.size) {\n        return false;\n    }\n    for (let i = 0; i < set_a.length; i++) {\n        if (!set_b.has(set_a[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getPetFrameReferenceTime(imageId) {\n    const moduleInfo = metaData.get('petImageModule', imageId);\n    return moduleInfo ? moduleInfo['frameReferenceTime'] : 0;\n}\nfunction splitImageIdsBy4DTags(imageIds) {\n    const positionGroups = getIPPGroups(imageIds);\n    if (!positionGroups) {\n        return { imageIdGroups: [imageIds], splittingTag: null };\n    }\n    const tags = [\n        'TemporalPositionIdentifier',\n        'DiffusionBValue',\n        'TriggerTime',\n        'EchoTime',\n        'EchoNumber',\n        'PhilipsPrivateBValue',\n        'SiemensPrivateBValue',\n        'GEPrivateBValue',\n        'PetFrameReferenceTime',\n    ];\n    const fncList2 = [\n        (imageId) => getTagValue(imageId, tags[0]),\n        (imageId) => getTagValue(imageId, tags[1]),\n        (imageId) => getTagValue(imageId, tags[2]),\n        (imageId) => getTagValue(imageId, tags[3]),\n        (imageId) => getTagValue(imageId, tags[4]),\n        getPhilipsPrivateBValue,\n        getSiemensPrivateBValue,\n        getGEPrivateBValue,\n        getPetFrameReferenceTime,\n    ];\n    for (let i = 0; i < fncList2.length; i++) {\n        const frame_groups = test4DTag(positionGroups, fncList2[i]);\n        if (frame_groups) {\n            const sortedKeys = Object.keys(frame_groups)\n                .map(Number.parseFloat)\n                .sort((a, b) => a - b);\n            const imageIdGroups = sortedKeys.map((key) => frame_groups[key].map((item) => item.imageId));\n            return { imageIdGroups, splittingTag: tags[i] };\n        }\n    }\n    return { imageIdGroups: [imageIds], splittingTag: null };\n}\nexport default splitImageIdsBy4DTags;\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nfunction getDynamicVolumeInfo(imageIds) {\n    const { imageIdGroups: timePoints, splittingTag } = splitImageIdsBy4DTags(imageIds);\n    const isDynamicVolume = timePoints.length > 1;\n    return { isDynamicVolume, timePoints, splittingTag };\n}\nexport default getDynamicVolumeInfo;\n","export default function scaleArray(array, scalingParameters) {\n    const arrayLength = array.length;\n    const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\n    if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\n        }\n    }\n    else {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = array[i] * rescaleSlope + rescaleIntercept;\n        }\n    }\n    return array;\n}\n","export function clip(val, low, high) {\n    return Math.min(Math.max(low, val), high);\n}\nexport function clipToBox(point, box) {\n    point.x = clip(point.x, 0, box.width);\n    point.y = clip(point.y, 0, box.height);\n}\nexport default clip;\n","import { Events } from '../enums';\nimport { StackViewport, VolumeViewport } from '../RenderingEngine';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getEnabledElement from '../getEnabledElement';\nimport triggerEvent from './triggerEvent';\nimport eventTarget from '../eventTarget';\nexport default function scroll(viewport, options) {\n    const enabledElement = getEnabledElement(viewport.element);\n    if (!enabledElement) {\n        throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n    }\n    if (viewport instanceof StackViewport &&\n        viewport.getImageIds().length === 0) {\n        throw new Error('Scroll::Stack Viewport has no images');\n    }\n    const { volumeId, delta, scrollSlabs } = options;\n    if (viewport instanceof VolumeViewport) {\n        scrollVolume(viewport, volumeId, delta, scrollSlabs);\n    }\n    else {\n        const imageIdIndex = viewport.getCurrentImageIdIndex();\n        if (imageIdIndex + delta >\n            viewport.getImageIds().length - 1 ||\n            imageIdIndex + delta < 0) {\n            const eventData = {\n                imageIdIndex,\n                direction: delta,\n            };\n            triggerEvent(eventTarget, Events.STACK_SCROLL_OUT_OF_BOUNDS, eventData);\n        }\n        viewport.scroll(delta, options.debounceLoading, options.loop);\n    }\n}\nexport function scrollVolume(viewport, volumeId, delta, scrollSlabs = false) {\n    const useSlabThickness = scrollSlabs;\n    const { numScrollSteps, currentStepIndex, sliceRangeInfo } = getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness);\n    if (!sliceRangeInfo) {\n        return;\n    }\n    const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n    const { focalPoint, viewPlaneNormal, position } = camera;\n    const { newFocalPoint, newPosition } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);\n    viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n    });\n    viewport.render();\n    const desiredStepIndex = currentStepIndex + delta;\n    const VolumeScrollEventDetail = {\n        volumeId,\n        viewport,\n        delta,\n        desiredStepIndex,\n        currentStepIndex,\n        numScrollSteps,\n        currentImageId: viewport.getCurrentImageId(),\n    };\n    if ((desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n        viewport.getCurrentImageId()) {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS, VolumeScrollEventDetail);\n    }\n    else {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL, VolumeScrollEventDetail);\n    }\n}\n","import clip from './clip';\nimport scroll from './scroll';\nimport getEnabledElement from '../getEnabledElement';\nimport StackViewport from '../RenderingEngine/StackViewport';\nasync function jumpToSlice(element, options = {}) {\n    const { imageIndex, debounceLoading, volumeId } = options;\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('Element has been disabled');\n    }\n    const { viewport } = enabledElement;\n    const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(viewport, debounceLoading);\n    const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n    const delta = imageIndexToJump - currentImageIndex;\n    scroll(viewport, { delta, debounceLoading, volumeId });\n}\nfunction _getImageSliceData(viewport, debounceLoading) {\n    if (viewport instanceof StackViewport) {\n        return {\n            numberOfSlices: viewport.getImageIds().length,\n            imageIndex: debounceLoading\n                ? viewport.getTargetImageIdIndex()\n                : viewport.getCurrentImageIdIndex(),\n        };\n    }\n    return {\n        numberOfSlices: viewport.getNumberOfSlices(),\n        imageIndex: viewport.getSliceIndex(),\n    };\n}\nfunction _getImageIndexToJump(numberOfSlices, imageIndex) {\n    const lastSliceIndex = numberOfSlices - 1;\n    return clip(imageIndex, 0, lastSliceIndex);\n}\nexport { jumpToSlice };\n","import * as eventListener from './eventListener';\nimport csUtils from './invertRgbTransferFunction';\nimport createSigmoidRGBTransferFunction from './createSigmoidRGBTransferFunction';\nimport getVoiFromSigmoidRGBTransferFunction from './getVoiFromSigmoidRGBTransferFunction';\nimport createLinearRGBTransferFunction from './createLinearRGBTransferFunction';\nimport scaleRgbTransferFunction from './scaleRgbTransferFunction';\nimport triggerEvent from './triggerEvent';\nimport uuidv4 from './uuidv4';\nimport getMinMax from './getMinMax';\nimport getRuntimeId from './getRuntimeId';\nimport imageIdToURI from './imageIdToURI';\nimport calibratedPixelSpacingMetadataProvider from './calibratedPixelSpacingMetadataProvider';\nimport clamp from './clamp';\nimport { isEqual, isEqualAbs, isEqualNegative } from './isEqual';\nimport isOpposite from './isOpposite';\nimport getClosestImageId from './getClosestImageId';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport indexWithinDimensions from './indexWithinDimensions';\nimport getVolumeViewportsContainingSameVolumes from './getVolumeViewportsContainingSameVolumes';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nimport transformWorldToIndex from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport loadImageToCanvas from './loadImageToCanvas';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport worldToImageCoords from './worldToImageCoords';\nimport imageToWorldCoords from './imageToWorldCoords';\nimport getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport getSliceRange from './getSliceRange';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getImageSliceDataForVolumeViewport from './getImageSliceDataForVolumeViewport';\nimport { isImageActor, actorIsA } from './actorCheck';\nimport getViewportsWithImageURI from './getViewportsWithImageURI';\nimport getClosestStackImageIndexForPoint from './getClosestStackImageIndexForPoint';\nimport getCurrentVolumeViewportSlice from './getCurrentVolumeViewportSlice';\nimport calculateViewportsSpatialRegistration from './calculateViewportsSpatialRegistration';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport getViewportImageCornersInWorld from './getViewportImageCornersInWorld';\nimport hasNaNValues from './hasNaNValues';\nimport applyPreset from './applyPreset';\nimport PointsManager from './PointsManager';\nimport deepMerge from './deepMerge';\nimport getScalingParameters from './getScalingParameters';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nimport getImageLegacy from './getImageLegacy';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport genericMetadataProvider from './genericMetadataProvider';\nimport { isValidVolume } from './isValidVolume';\nimport { updateVTKImageDataWithCornerstoneImage } from './updateVTKImageDataWithCornerstoneImage';\nimport ProgressiveIterator from './ProgressiveIterator';\nimport decimate from './decimate';\nimport imageRetrieveMetadataProvider from './imageRetrieveMetadataProvider';\nimport isVideoTransferSyntax from './isVideoTransferSyntax';\nimport { getBufferConfiguration } from './getBufferConfiguration';\nimport { generateVolumePropsFromImageIds } from './generateVolumePropsFromImageIds';\nimport { convertStackToVolumeViewport } from './convertStackToVolumeViewport';\nimport { convertVolumeToStackViewport } from './convertVolumeToStackViewport';\nimport VoxelManager from './VoxelManager';\nimport RLEVoxelMap from './RLEVoxelMap';\nimport roundNumber, { roundToPrecision } from './roundNumber';\nimport convertToGrayscale from './convertToGrayscale';\nimport getViewportImageIds from './getViewportImageIds';\nimport { getRandomSampleFromArray } from './getRandomSampleFromArray';\nimport { getVolumeId } from './getVolumeId';\nimport { hasFloatScalingParameters } from './hasFloatScalingParameters';\nimport { pointInShapeCallback } from './pointInShapeCallback';\nimport * as planar from './planar';\nimport * as windowLevel from './windowLevel';\nimport * as colormap from './colormap';\nimport * as transferFunctionUtils from './transferFunctionUtils';\nimport * as color from './color';\nimport { deepEqual } from './deepEqual';\nimport { _getViewportModality } from './getViewportModality';\nimport cache from '../cache/cache';\nimport getDynamicVolumeInfo from './getDynamicVolumeInfo';\nimport autoLoad from './autoLoad';\nimport scaleArray from './scaleArray';\nimport splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nimport { deepClone } from './deepClone';\nimport { jumpToSlice } from './jumpToSlice';\nimport scroll from './scroll';\nimport clip from './clip';\nconst getViewportModality = (viewport, volumeId) => _getViewportModality(viewport, volumeId, cache.getVolume);\nexport { eventListener, csUtils as invertRgbTransferFunction, createSigmoidRGBTransferFunction, getVoiFromSigmoidRGBTransferFunction, createLinearRGBTransferFunction, scaleRgbTransferFunction, triggerEvent, imageIdToURI, calibratedPixelSpacingMetadataProvider, clamp, uuidv4, planar, getMinMax, getRuntimeId, isEqual, isEqualAbs, isEqualNegative, isOpposite, getViewportModality, windowLevel, convertToGrayscale, getClosestImageId, getSpacingInNormalDirection, getTargetVolumeAndSpacingInNormalDir, getVolumeActorCorners, indexWithinDimensions, getVolumeViewportsContainingSameVolumes, getViewportsWithVolumeId, transformWorldToIndex, transformIndexToWorld, loadImageToCanvas, renderToCanvasCPU, renderToCanvasGPU, worldToImageCoords, imageToWorldCoords, getVolumeSliceRangeInfo, getVolumeViewportScrollInfo, getSliceRange, snapFocalPointToSlice, getImageSliceDataForVolumeViewport, isImageActor, isPTPrescaledWithSUV, actorIsA, getViewportsWithImageURI, getClosestStackImageIndexForPoint, getCurrentVolumeViewportSlice, calculateViewportsSpatialRegistration, spatialRegistrationMetadataProvider, getViewportImageCornersInWorld, hasNaNValues, applyPreset, deepMerge, PointsManager, getScalingParameters, colormap, getImageLegacy, ProgressiveIterator, decimate, imageRetrieveMetadataProvider, transferFunctionUtils, updateVTKImageDataWithCornerstoneImage, sortImageIdsAndGetSpacing, makeVolumeMetadata, isValidVolume, genericMetadataProvider, isVideoTransferSyntax, generateVolumePropsFromImageIds, getBufferConfiguration, VoxelManager, RLEVoxelMap, convertStackToVolumeViewport, convertVolumeToStackViewport, roundNumber, roundToPrecision, getViewportImageIds, getRandomSampleFromArray, getVolumeId, color, hasFloatScalingParameters, getDynamicVolumeInfo, autoLoad, scaleArray, deepClone, splitImageIdsBy4DTags, pointInShapeCallback, deepEqual, jumpToSlice, scroll, clip, };\n","function _getViewportModality(viewport, volumeId, getVolume) {\n    if (!getVolume) {\n        throw new Error('getVolume is required, use the utilities export instead ');\n    }\n    if (viewport.modality) {\n        return viewport.modality;\n    }\n    if (viewport.setVolumes) {\n        volumeId = volumeId ?? viewport.getVolumeId();\n        if (!volumeId || !getVolume) {\n            return;\n        }\n        const volume = getVolume(volumeId);\n        return volume.metadata.Modality;\n    }\n    throw new Error('Invalid viewport type');\n}\nexport { _getViewportModality };\n","export default function invertRgbTransferFunction(rgbTransferFunction) {\n    if (!rgbTransferFunction) {\n        return;\n    }\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = 1 - nodeValue1[1];\n        nodeValue1[2] = 1 - nodeValue1[2];\n        nodeValue1[3] = 1 - nodeValue1[3];\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","function areNumbersEqualWithTolerance(num1, num2, tolerance) {\n    return Math.abs(num1 - num2) <= tolerance;\n}\nfunction areArraysEqual(arr1, arr2, tolerance = 1e-5) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!areNumbersEqualWithTolerance(arr1[i], arr2[i], tolerance)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isNumberType(value) {\n    return typeof value === 'number';\n}\nfunction isNumberArrayLike(value) {\n    return (value &&\n        typeof value === 'object' &&\n        'length' in value &&\n        typeof value.length === 'number' &&\n        value.length > 0 &&\n        typeof value[0] === 'number');\n}\nexport default function isEqual(v1, v2, tolerance = 1e-5) {\n    if (typeof v1 !== typeof v2 || v1 === null || v2 === null) {\n        return false;\n    }\n    if (isNumberType(v1) && isNumberType(v2)) {\n        return areNumbersEqualWithTolerance(v1, v2, tolerance);\n    }\n    if (isNumberArrayLike(v1) && isNumberArrayLike(v2)) {\n        return areArraysEqual(v1, v2, tolerance);\n    }\n    return false;\n}\nconst negative = (v) => typeof v === 'number' ? -v : v?.map ? v.map(negative) : !v;\nconst abs = (v) => typeof v === 'number' ? Math.abs(v) : v?.map ? v.map(abs) : v;\nconst isEqualNegative = (v1, v2, tolerance = undefined) => isEqual(v1, negative(v2), tolerance);\nconst isEqualAbs = (v1, v2, tolerance = undefined) => isEqual(abs(v1), abs(v2), tolerance);\nexport { isEqualNegative, isEqual, isEqualAbs };\n","import { get } from '../metaData';\nexport default function makeVolumeMetadata(imageIds) {\n    const imageId0 = imageIds[0];\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = get('imagePixelModule', imageId0);\n    const voiLut = [];\n    const voiLutModule = get('voiLutModule', imageId0);\n    let voiLUTFunction;\n    if (voiLutModule) {\n        const { windowWidth, windowCenter } = voiLutModule;\n        voiLUTFunction = voiLutModule?.voiLUTFunction;\n        if (Array.isArray(windowWidth)) {\n            for (let i = 0; i < windowWidth.length; i++) {\n                voiLut.push({\n                    windowWidth: windowWidth[i],\n                    windowCenter: windowCenter[i],\n                });\n            }\n        }\n        else {\n            voiLut.push({\n                windowWidth: windowWidth,\n                windowCenter: windowCenter,\n            });\n        }\n    }\n    else {\n        voiLut.push({\n            windowWidth: undefined,\n            windowCenter: undefined,\n        });\n    }\n    const { modality, seriesInstanceUID } = get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, } = get('imagePlaneModule', imageId0);\n    return {\n        BitsAllocated: bitsAllocated,\n        BitsStored: bitsStored,\n        SamplesPerPixel: samplesPerPixel,\n        HighBit: highBit,\n        PhotometricInterpretation: photometricInterpretation,\n        PixelRepresentation: pixelRepresentation,\n        Modality: modality,\n        ImageOrientationPatient: imageOrientationPatient,\n        PixelSpacing: pixelSpacing,\n        FrameOfReferenceUID: frameOfReferenceUID,\n        Columns: columns,\n        Rows: rows,\n        voiLut,\n        VOILUTFunction: voiLUTFunction,\n        SeriesInstanceUID: seriesInstanceUID,\n    };\n}\n","import { mat3 } from 'gl-matrix';\nfunction linePlaneIntersection(p0, p1, plane) {\n    const [x0, y0, z0] = p0;\n    const [x1, y1, z1] = p1;\n    const [A, B, C, D] = plane;\n    const a = x1 - x0;\n    const b = y1 - y0;\n    const c = z1 - z0;\n    const t = (-1 * (A * x0 + B * y0 + C * z0 - D)) / (A * a + B * b + C * c);\n    const X = a * t + x0;\n    const Y = b * t + y0;\n    const Z = c * t + z0;\n    return [X, Y, Z];\n}\nfunction planeEquation(normal, point, normalized = false) {\n    const [A, B, C] = normal;\n    const D = A * point[0] + B * point[1] + C * point[2];\n    if (normalized) {\n        const length = Math.sqrt(A * A + B * B + C * C);\n        return [A / length, B / length, C / length, D / length];\n    }\n    return [A, B, C, D];\n}\nfunction threePlaneIntersection(firstPlane, secondPlane, thirdPlane) {\n    const [A1, B1, C1, D1] = firstPlane;\n    const [A2, B2, C2, D2] = secondPlane;\n    const [A3, B3, C3, D3] = thirdPlane;\n    const m0 = mat3.fromValues(A1, A2, A3, B1, B2, B3, C1, C2, C3);\n    const m1 = mat3.fromValues(D1, D2, D3, B1, B2, B3, C1, C2, C3);\n    const m2 = mat3.fromValues(A1, A2, A3, D1, D2, D3, C1, C2, C3);\n    const m3 = mat3.fromValues(A1, A2, A3, B1, B2, B3, D1, D2, D3);\n    const x = mat3.determinant(m1) / mat3.determinant(m0);\n    const y = mat3.determinant(m2) / mat3.determinant(m0);\n    const z = mat3.determinant(m3) / mat3.determinant(m0);\n    return [x, y, z];\n}\nfunction planeDistanceToPoint(plane, point, signed = false) {\n    const [A, B, C, D] = plane;\n    const [x, y, z] = point;\n    const numerator = A * x + B * y + C * z - D;\n    const distance = Math.abs(numerator) / Math.sqrt(A * A + B * B + C * C);\n    const sign = signed ? Math.sign(numerator) : 1;\n    return sign * distance;\n}\nexport { linePlaneIntersection, planeEquation, threePlaneIntersection, planeDistanceToPoint, };\n","import { vec3 } from 'gl-matrix';\nexport function pointInShapeCallback(imageData, options) {\n    const { pointInShapeFn, callback, boundsIJK, returnPoints = false, } = options;\n    let iMin, iMax, jMin, jMax, kMin, kMax;\n    let scalarData;\n    const { numComps } = imageData;\n    if (imageData.getScalarData) {\n        scalarData = imageData.getScalarData();\n    }\n    else {\n        scalarData = imageData\n            .getPointData()\n            .getScalars()\n            .getData();\n    }\n    if (!scalarData) {\n        console.warn('No scalar data found for imageData', imageData);\n        return;\n    }\n    const dimensions = imageData.getDimensions();\n    if (!boundsIJK) {\n        iMin = 0;\n        iMax = dimensions[0];\n        jMin = 0;\n        jMax = dimensions[1];\n        kMin = 0;\n        kMax = dimensions[2];\n    }\n    else {\n        [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = boundsIJK;\n    }\n    const start = vec3.fromValues(iMin, jMin, kMin);\n    const direction = imageData.getDirection();\n    const rowCosines = direction.slice(0, 3);\n    const columnCosines = direction.slice(3, 6);\n    const scanAxisNormal = direction.slice(6, 9);\n    const spacing = imageData.getSpacing();\n    const [rowSpacing, columnSpacing, scanAxisSpacing] = spacing;\n    const worldPosStart = imageData.indexToWorld(start);\n    const rowStep = vec3.fromValues(rowCosines[0] * rowSpacing, rowCosines[1] * rowSpacing, rowCosines[2] * rowSpacing);\n    const columnStep = vec3.fromValues(columnCosines[0] * columnSpacing, columnCosines[1] * columnSpacing, columnCosines[2] * columnSpacing);\n    const scanAxisStep = vec3.fromValues(scanAxisNormal[0] * scanAxisSpacing, scanAxisNormal[1] * scanAxisSpacing, scanAxisNormal[2] * scanAxisSpacing);\n    const xMultiple = numComps ||\n        scalarData.length / dimensions[2] / dimensions[1] / dimensions[0];\n    const yMultiple = dimensions[0] * xMultiple;\n    const zMultiple = dimensions[1] * yMultiple;\n    const pointsInShape = [];\n    const currentPos = vec3.clone(worldPosStart);\n    for (let k = kMin; k <= kMax; k++) {\n        const startPosJ = vec3.clone(currentPos);\n        for (let j = jMin; j <= jMax; j++) {\n            const startPosI = vec3.clone(currentPos);\n            for (let i = iMin; i <= iMax; i++) {\n                const pointIJK = [i, j, k];\n                if (pointInShapeFn(currentPos, pointIJK)) {\n                    const index = k * zMultiple + j * yMultiple + i * xMultiple;\n                    let value;\n                    if (xMultiple > 2) {\n                        value = [\n                            scalarData[index],\n                            scalarData[index + 1],\n                            scalarData[index + 2],\n                        ];\n                    }\n                    else {\n                        value = scalarData[index];\n                    }\n                    pointsInShape.push({\n                        value,\n                        index,\n                        pointIJK,\n                        pointLPS: currentPos.slice(),\n                    });\n                    if (callback) {\n                        callback({\n                            value,\n                            index,\n                            pointIJK,\n                            pointLPS: currentPos,\n                        });\n                    }\n                }\n                vec3.add(currentPos, currentPos, rowStep);\n            }\n            vec3.copy(currentPos, startPosI);\n            vec3.add(currentPos, currentPos, columnStep);\n        }\n        vec3.copy(currentPos, startPosJ);\n        vec3.add(currentPos, currentPos, scanAxisStep);\n    }\n    return returnPoints ? pointsInShape : undefined;\n}\n","import { vec3 } from 'gl-matrix';\nexport default function snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, deltaFrames) {\n    const { min, max, current } = sliceRange;\n    const posDiffFromFocalPoint = vec3.create();\n    vec3.sub(posDiffFromFocalPoint, position, focalPoint);\n    const steps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * steps;\n    let frameIndex = Math.round(floatingStepNumber);\n    let newFocalPoint = [\n        focalPoint[0] -\n            viewPlaneNormal[0] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[1] -\n            viewPlaneNormal[1] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[2] -\n            viewPlaneNormal[2] * floatingStepNumber * spacingInNormalDirection,\n    ];\n    frameIndex += deltaFrames;\n    if (frameIndex > steps) {\n        frameIndex = steps;\n    }\n    else if (frameIndex < 0) {\n        frameIndex = 0;\n    }\n    const newSlicePosFromMin = frameIndex * spacingInNormalDirection;\n    newFocalPoint = [\n        newFocalPoint[0] + viewPlaneNormal[0] * newSlicePosFromMin,\n        newFocalPoint[1] + viewPlaneNormal[1] * newSlicePosFromMin,\n        newFocalPoint[2] + viewPlaneNormal[2] * newSlicePosFromMin,\n    ];\n    const newPosition = [\n        newFocalPoint[0] + posDiffFromFocalPoint[0],\n        newFocalPoint[1] + posDiffFromFocalPoint[1],\n        newFocalPoint[2] + posDiffFromFocalPoint[2],\n    ];\n    return { newFocalPoint, newPosition };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { getConfiguration } from '../init';\nexport default function sortImageIdsAndGetSpacing(imageIds, scanAxisNormal) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    if (!scanAxisNormal) {\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        scanAxisNormal = vec3.create();\n        vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    }\n    const refIppVec = vec3.create();\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    vec3.set(refIppVec, referenceImagePositionPatient[0], referenceImagePositionPatient[1], referenceImagePositionPatient[2]);\n    let sortedImageIds;\n    let zSpacing;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        vec3.sub(positionVector, referenceImagePositionPatient, imagePositionPatient);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        sortedImageIds = distanceImagePairs.map((a) => a.imageId);\n        const numImages = distanceImagePairs.length;\n        zSpacing =\n            Math.abs(distanceImagePairs[numImages - 1].distance -\n                distanceImagePairs[0].distance) /\n                (numImages - 1);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        sortedImageIds = imageIds;\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        if (firstImageDistance - middleImageDistance < 0) {\n            sortedImageIds.reverse();\n        }\n        const metadataForMiddleImage = metaData.get('imagePlaneModule', prefetchedImageIds[1]);\n        if (!metadataForMiddleImage) {\n            throw new Error('Incomplete metadata required for volume construction.');\n        }\n        const positionVector = vec3.create();\n        vec3.sub(positionVector, referenceImagePositionPatient, metadataForMiddleImage.imagePositionPatient);\n        const distanceBetweenFirstAndMiddleImages = vec3.dot(positionVector, scanAxisNormal);\n        zSpacing =\n            Math.abs(distanceBetweenFirstAndMiddleImages) /\n                Math.floor(imageIds.length / 2);\n    }\n    const { imagePositionPatient: origin, sliceThickness, spacingBetweenSlices, } = metaData.get('imagePlaneModule', sortedImageIds[0]);\n    const { strictZSpacingForVolumeViewport } = getConfiguration().rendering;\n    if (zSpacing === 0 && !strictZSpacingForVolumeViewport) {\n        if (sliceThickness && spacingBetweenSlices) {\n            console.log('Could not calculate zSpacing. Using spacingBetweenSlices');\n            zSpacing = spacingBetweenSlices;\n        }\n        else if (sliceThickness) {\n            console.log('Could not calculate zSpacing and no spacingBetweenSlices. Using sliceThickness');\n            zSpacing = sliceThickness;\n        }\n        else {\n            console.log('Could not calculate zSpacing. The VolumeViewport visualization is compromised. Setting zSpacing to 1 to render');\n            zSpacing = 1;\n        }\n    }\n    const result = {\n        zSpacing,\n        origin,\n        sortedImageIds,\n    };\n    return result;\n}\n","function getTransferFunctionNodes(transferFunction) {\n    const size = transferFunction.getSize();\n    const values = [];\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        transferFunction.getNodeValue(index, nodeValue1);\n        values.push(nodeValue1);\n    }\n    return values;\n}\nfunction setTransferFunctionNodes(transferFunction, nodes) {\n    if (!nodes?.length) {\n        return;\n    }\n    transferFunction.removeAllPoints();\n    nodes.forEach((node) => {\n        transferFunction.addRGBPoint(...node);\n    });\n}\nexport { getTransferFunctionNodes, setTransferFunctionNodes };\n","import transformWorldToIndex from './transformWorldToIndex';\nexport function transformCanvasToIJK(viewport, canvasPoint) {\n    const { imageData: vtkImageData } = viewport.getImageData();\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return transformWorldToIndex(vtkImageData, worldPoint);\n}\n","export default function transformIndexToWorld(imageData, voxelPos) {\n    return imageData.indexToWorld(voxelPos);\n}\n","export default function transformWorldToIndex(imageData, worldPos) {\n    const continuousIndex = imageData.worldToIndex(worldPos);\n    const index = continuousIndex.map(Math.round);\n    return index;\n}\n","function updateVTKImageDataWithCornerstoneImage(sourceImageData, image) {\n    const pixelData = image.voxelManager.getScalarData();\n    if (!sourceImageData.getPointData) {\n        return;\n    }\n    const scalarData = sourceImageData\n        .getPointData()\n        .getScalars()\n        .getData();\n    if (image.color && image.rgba) {\n        const newPixelData = new Uint8Array(image.columns * image.rows * 3);\n        for (let i = 0; i < image.columns * image.rows; i++) {\n            newPixelData[i * 3] = pixelData[i * 4];\n            newPixelData[i * 3 + 1] = pixelData[i * 4 + 1];\n            newPixelData[i * 3 + 2] = pixelData[i * 4 + 2];\n        }\n        image.rgba = false;\n        image.getPixelData = () => newPixelData;\n        scalarData.set(newPixelData);\n    }\n    else {\n        scalarData.set(pixelData);\n    }\n    sourceImageData.modified();\n}\nexport { updateVTKImageDataWithCornerstoneImage };\n","function toWindowLevel(low, high) {\n    const windowWidth = Math.abs(high - low) + 1;\n    const windowCenter = (low + high + 1) / 2;\n    return { windowWidth, windowCenter };\n}\nfunction toLowHighRange(windowWidth, windowCenter) {\n    const lower = windowCenter - 0.5 - (windowWidth - 1) / 2;\n    const upper = windowCenter - 0.5 + (windowWidth - 1) / 2;\n    return { lower, upper };\n}\nexport { toWindowLevel, toLowHighRange };\n","const CORNERSTONE_COLOR_LUT = [\n    [0, 0, 0, 0],\n    [221, 84, 84, 255],\n    [77, 228, 121, 255],\n    [166, 70, 235, 255],\n    [189, 180, 116, 255],\n    [109, 182, 196, 255],\n    [204, 101, 157, 255],\n    [123, 211, 94, 255],\n    [93, 87, 218, 255],\n    [225, 128, 80, 255],\n    [73, 232, 172, 255],\n    [181, 119, 186, 255],\n    [176, 193, 112, 255],\n    [105, 153, 200, 255],\n    [208, 97, 120, 255],\n    [90, 215, 101, 255],\n    [135, 83, 222, 255],\n    [229, 178, 76, 255],\n    [122, 183, 181, 255],\n    [190, 115, 171, 255],\n    [149, 197, 108, 255],\n    [100, 118, 205, 255],\n    [212, 108, 93, 255],\n    [86, 219, 141, 255],\n    [183, 79, 226, 255],\n    [233, 233, 72, 255],\n    [118, 167, 187, 255],\n    [194, 111, 146, 255],\n    [116, 201, 104, 255],\n    [115, 96, 209, 255],\n    [216, 147, 89, 255],\n    [82, 223, 188, 255],\n    [230, 75, 224, 255],\n    [163, 184, 121, 255],\n    [114, 143, 191, 255],\n    [198, 107, 114, 255],\n    [99, 206, 122, 255],\n    [153, 92, 213, 255],\n    [220, 192, 85, 255],\n    [78, 215, 227, 255],\n    [234, 71, 173, 255],\n    [141, 188, 117, 255],\n    [110, 113, 195, 255],\n    [202, 128, 103, 255],\n    [95, 210, 157, 255],\n    [195, 88, 217, 255],\n    [206, 224, 81, 255],\n    [74, 166, 231, 255],\n    [185, 120, 139, 255],\n    [113, 192, 113, 255],\n    [133, 106, 199, 255],\n    [207, 162, 98, 255],\n    [91, 214, 198, 255],\n    [221, 84, 198, 255],\n    [159, 228, 77, 255],\n    [70, 111, 235, 255],\n    [189, 119, 116, 255],\n    [109, 196, 138, 255],\n    [165, 101, 204, 255],\n    [211, 201, 94, 255],\n    [87, 191, 218, 255],\n    [225, 80, 153, 255],\n    [106, 232, 73, 255],\n    [124, 119, 186, 255],\n    [193, 142, 112, 255],\n    [105, 200, 168, 255],\n    [203, 97, 208, 255],\n    [184, 215, 90, 255],\n    [83, 147, 222, 255],\n    [229, 76, 101, 255],\n    [122, 183, 130, 255],\n    [146, 115, 190, 255],\n    [197, 171, 108, 255],\n    [100, 205, 205, 255],\n    [212, 93, 177, 255],\n    [141, 219, 86, 255],\n    [79, 97, 226, 255],\n    [233, 99, 72, 255],\n    [118, 187, 150, 255],\n    [173, 111, 194, 255],\n    [197, 201, 104, 255],\n    [96, 171, 209, 255],\n    [216, 89, 137, 255],\n    [94, 223, 82, 255],\n    [107, 75, 230, 255],\n    [184, 153, 121, 255],\n    [114, 191, 175, 255],\n    [198, 107, 191, 255],\n    [166, 206, 99, 255],\n    [92, 132, 213, 255],\n    [220, 85, 91, 255],\n    [78, 227, 115, 255],\n    [159, 71, 234, 255],\n    [188, 176, 117, 255],\n    [110, 185, 195, 255],\n    [202, 103, 161, 255],\n    [129, 210, 95, 255],\n    [88, 88, 217, 255],\n    [224, 123, 81, 255],\n    [74, 231, 166, 255],\n    [177, 120, 185, 255],\n    [179, 192, 113, 255],\n    [106, 156, 199, 255],\n    [207, 98, 125, 255],\n    [91, 214, 96, 255],\n    [130, 84, 221, 255],\n    [228, 171, 77, 255],\n    [70, 235, 221, 255],\n    [189, 116, 174, 255],\n    [153, 196, 109, 255],\n    [101, 123, 204, 255],\n    [211, 104, 94, 255],\n    [87, 218, 136, 255],\n    [177, 80, 225, 255],\n    [232, 225, 73, 255],\n    [119, 169, 186, 255],\n    [193, 112, 149, 255],\n    [121, 200, 105, 255],\n    [111, 97, 208, 255],\n    [215, 142, 90, 255],\n    [83, 222, 181, 255],\n    [229, 76, 229, 255],\n    [165, 183, 122, 255],\n    [115, 146, 190, 255],\n    [197, 108, 119, 255],\n    [100, 205, 118, 255],\n    [148, 93, 212, 255],\n    [219, 186, 86, 255],\n    [79, 220, 226, 255],\n    [233, 72, 179, 255],\n    [144, 187, 118, 255],\n    [111, 118, 194, 255],\n    [201, 124, 104, 255],\n    [96, 209, 153, 255],\n    [189, 89, 216, 255],\n    [211, 223, 82, 255],\n    [75, 172, 230, 255],\n    [184, 121, 142, 255],\n    [117, 191, 114, 255],\n    [130, 107, 198, 255],\n    [206, 157, 99, 255],\n    [92, 213, 193, 255],\n    [220, 85, 203, 255],\n    [165, 227, 78, 255],\n    [71, 118, 234, 255],\n    [188, 117, 117, 255],\n    [110, 195, 135, 255],\n    [161, 103, 202, 255],\n    [210, 195, 95, 255],\n    [88, 195, 217, 255],\n    [224, 81, 158, 255],\n    [113, 231, 74, 255],\n    [123, 120, 185, 255],\n    [192, 139, 113, 255],\n    [106, 199, 164, 255],\n    [198, 98, 207, 255],\n    [188, 214, 91, 255],\n    [84, 153, 221, 255],\n    [228, 77, 108, 255],\n    [70, 235, 84, 255],\n    [143, 116, 189, 255],\n    [196, 167, 109, 255],\n    [101, 204, 199, 255],\n    [211, 94, 182, 255],\n    [147, 218, 87, 255],\n    [80, 104, 225, 255],\n    [232, 93, 73, 255],\n    [119, 186, 147, 255],\n    [170, 112, 193, 255],\n    [200, 200, 105, 255],\n    [97, 175, 208, 255],\n    [215, 90, 142, 255],\n    [100, 222, 83, 255],\n    [101, 76, 229, 255],\n    [183, 150, 122, 255],\n    [115, 190, 171, 255],\n    [197, 108, 194, 255],\n    [170, 205, 100, 255],\n    [93, 138, 212, 255],\n    [219, 86, 97, 255],\n    [79, 226, 110, 255],\n    [153, 72, 233, 255],\n    [187, 173, 118, 255],\n    [111, 187, 194, 255],\n    [201, 104, 165, 255],\n    [134, 209, 96, 255],\n    [89, 95, 216, 255],\n    [223, 117, 82, 255],\n    [75, 230, 159, 255],\n    [174, 121, 184, 255],\n    [182, 191, 114, 255],\n    [107, 160, 198, 255],\n    [206, 99, 130, 255],\n    [92, 213, 92, 255],\n    [124, 85, 220, 255],\n    [227, 165, 78, 255],\n    [71, 234, 214, 255],\n    [188, 117, 176, 255],\n    [156, 195, 110, 255],\n    [103, 128, 202, 255],\n    [210, 100, 95, 255],\n    [88, 217, 131, 255],\n    [170, 81, 224, 255],\n    [231, 218, 74, 255],\n    [120, 172, 185, 255],\n    [192, 113, 153, 255],\n    [125, 199, 106, 255],\n    [107, 98, 207, 255],\n    [214, 137, 91, 255],\n    [84, 221, 175, 255],\n    [222, 77, 228, 255],\n    [194, 235, 70, 255],\n    [116, 149, 189, 255],\n    [196, 109, 123, 255],\n    [101, 204, 114, 255],\n    [143, 94, 211, 255],\n    [218, 180, 87, 255],\n    [80, 225, 225, 255],\n    [232, 73, 186, 255],\n    [147, 186, 119, 255],\n    [112, 122, 193, 255],\n    [200, 121, 105, 255],\n    [97, 208, 148, 255],\n    [184, 90, 215, 255],\n    [216, 222, 83, 255],\n    [76, 178, 229, 255],\n    [183, 122, 145, 255],\n    [121, 190, 115, 255],\n    [126, 108, 197, 255],\n    [205, 153, 100, 255],\n    [93, 212, 187, 255],\n    [219, 86, 208, 255],\n    [171, 226, 79, 255],\n    [72, 126, 233, 255],\n    [187, 118, 121, 255],\n    [111, 194, 132, 255],\n    [157, 104, 201, 255],\n    [209, 190, 96, 255],\n    [89, 200, 216, 255],\n    [223, 82, 164, 255],\n    [120, 230, 75, 255],\n    [121, 121, 184, 255],\n    [191, 136, 114, 255],\n    [107, 198, 160, 255],\n    [192, 99, 206, 255],\n    [193, 213, 92, 255],\n    [85, 158, 220, 255],\n    [227, 78, 115, 255],\n    [71, 234, 78, 255],\n    [141, 117, 188, 255],\n    [195, 163, 110, 255],\n    [103, 202, 194, 255],\n    [210, 95, 186, 255],\n    [153, 217, 88, 255],\n    [81, 111, 224, 255],\n];\nexport default CORNERSTONE_COLOR_LUT;\n","const DEFINED_CURSORS = Symbol('DefinedCursors');\nconst STANDARD_CURSORS = new Set([\n    'alias',\n    'all-scroll',\n    'auto',\n    'cell',\n    'col-resize',\n    'context-menu',\n    'copy',\n    'crosshair',\n    'default',\n    'e-resize',\n    'ew-resize',\n    'grab',\n    'grabbing',\n    'help',\n    'move',\n    'ne-resize',\n    'nesw-resize',\n    'no-drop',\n    'none',\n    'not-allowed',\n    'n-resize',\n    'ns-resize',\n    'nw-resize',\n    'nwse-resize',\n    'pointer',\n    'progress',\n    'row-resize',\n    'se-resize',\n    's-resize',\n    'sw-resize',\n    'text',\n    'vertical-text',\n    'wait',\n    'w-resize',\n    'zoom-in',\n    'zoom-out',\n]);\nexport default class MouseCursor {\n    constructor(name, fallback) {\n        this.name = name + '';\n        this.fallback = fallback;\n    }\n    getName() {\n        return this.name + '';\n    }\n    addFallbackStyleProperty(style) {\n        const { fallback } = this;\n        if (fallback instanceof MouseCursor) {\n            return `${style}, ${fallback.getStyleProperty()}`;\n        }\n        return style + '';\n    }\n    getStyleProperty() {\n        return this.addFallbackStyleProperty(this.name) + '';\n    }\n    static getDefinedCursor(name) {\n        const definedCursors = getDefinedCursors(MouseCursor, DEFINED_CURSORS);\n        let mouseCursor = definedCursors.get(name);\n        if (mouseCursor instanceof MouseCursor) {\n            return mouseCursor;\n        }\n        if (STANDARD_CURSORS.has(name)) {\n            mouseCursor = new MouseCursor(name);\n            definedCursors.set(name, mouseCursor);\n            return mouseCursor;\n        }\n    }\n    static setDefinedCursor(name, cursor) {\n        if (cursor instanceof MouseCursor) {\n            const definedCursors = getDefinedCursors(MouseCursor, DEFINED_CURSORS);\n            definedCursors.set(name, cursor);\n            return true;\n        }\n        return false;\n    }\n}\nfunction getDefinedCursors(context, symbol) {\n    let definedCursors = context[symbol];\n    if (!(definedCursors instanceof Map)) {\n        definedCursors = new Map();\n        Object.defineProperty(context, symbol, { value: definedCursors });\n    }\n    return definedCursors;\n}\nconst standardCursorNames = STANDARD_CURSORS.values();\nexport { standardCursorNames };\n","import MouseCursor from './MouseCursor';\nconst ELEMENT_CURSORS_MAP = Symbol('ElementCursorsMap');\nfunction initElementCursor(element, cursor) {\n    _getElementCursors(element)[0] = cursor;\n    _setElementCursor(element, cursor);\n}\nfunction _setElementCursor(element, cursor) {\n    const cursors = _getElementCursors(element);\n    cursors[1] = cursors[0];\n    cursors[0] = cursor;\n    element.style.cursor = (cursor instanceof MouseCursor\n        ? cursor\n        : MouseCursor.getDefinedCursor('auto')).getStyleProperty();\n}\nfunction resetElementCursor(element) {\n    _setElementCursor(element, _getElementCursors(element)[1]);\n}\nfunction hideElementCursor(element) {\n    _setElementCursor(element, MouseCursor.getDefinedCursor('none'));\n}\nfunction _getElementCursors(element) {\n    let map = _getElementCursors[ELEMENT_CURSORS_MAP];\n    if (!(map instanceof WeakMap)) {\n        map = new WeakMap();\n        Object.defineProperty(_getElementCursors, ELEMENT_CURSORS_MAP, {\n            value: map,\n        });\n    }\n    let cursors = map.get(element);\n    if (!cursors) {\n        cursors = [null, null];\n        map.set(element, cursors);\n    }\n    return cursors;\n}\nexport { initElementCursor, resetElementCursor, hideElementCursor, _setElementCursor as setElementCursor, };\n","import { utilities } from '@cornerstonejs/core';\nimport MouseCursor from './MouseCursor';\nconst DEFAULT_NAME = 'image-cursor';\nexport default class ImageMouseCursor extends MouseCursor {\n    constructor(url, x, y, name, fallback) {\n        super(name || ImageMouseCursor.getUniqueInstanceName(DEFAULT_NAME), fallback);\n        this.url = url;\n        this.x = Number(x) || 0;\n        this.y = Number(y) || 0;\n    }\n    getStyleProperty() {\n        const { url, x, y } = this;\n        let style = `url('${url}')`;\n        if (x >= 0 && y >= 0 && (x > 0 || y > 0)) {\n            style += ` ${x} ${y}`;\n        }\n        return this.addFallbackStyleProperty(style);\n    }\n    static getUniqueInstanceName(prefix) {\n        return `${prefix}-${utilities.getRuntimeId(ImageMouseCursor)}`;\n    }\n}\n","const BASE = {\n    iconContent: '',\n    iconSize: 16,\n    viewBox: {\n        x: 16,\n        y: 16,\n    },\n    mousePoint: {\n        x: 8,\n        y: 8,\n    },\n    mousePointerGroupString: `\n    <path stroke=\"{{color}}\" d=\"M8 16L8 0\"></path>\n    <path stroke=\"{{color}}\" d=\"M16 8L0 8\"></path>\n  `,\n};\nconst SEGMENTATION_CURSOR_BOUNDARIES = {\n    x: 127,\n    y: 60,\n};\nconst MINUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n`;\nconst PLUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n<rect fill=\"{{color}}\" x=\"95.84\" y=\"9.38\" width=\"15.85\" height=\"47.14\"/>\n`;\nconst SCISSOR_ICON = `<path fill=\"{{color}}\" d=\"M82.89,10a12.09,12.09,0,0,0-16.8-2.5l-27.5,20.4-8.5-6.3a2.93,2.93,0,0,1-1.1-3,14.66,14.66,0,0,0,.1-6.6,14.08,14.08,0,1,0-6.5,15.2,2.87,2.87,0,0,1,3.2.2l8.2,6.1-8.2,6.1a2.87,2.87,0,0,1-3.2.2,14.16,14.16,0,1,0,6.7,14.4,14,14,0,0,0-.3-5.8,2.93,2.93,0,0,1,1.1-3l8.5-6.3,27.5,20.4A11.91,11.91,0,0,0,82.89,57l-31.7-23.5ZM15.29,21a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,21Zm0,36.8a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,57.77Zm28.3-21.5a2.8,2.8,0,1,1,2.8-2.8A2.8,2.8,0,0,1,43.59,36.27Z\" transform=\"translate(-1.17 -0.96)\"/>`;\nconst RECTANGLE_ICON = `<path fill=\"{{color}}\" d=\"M8.86,2.25V66.08H72.69V2.25H8.86ZM65.28,58.67h-49v-49h49v49Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CIRCLE_ICON = `<path fill=\"{{color}}\" d=\"M40.77,2.25A31.92,31.92,0,1,0,72.69,34.16,31.92,31.92,0,0,0,40.77,2.25Zm0,57.63A25.71,25.71,0,1,1,66.48,34.16,25.71,25.71,0,0,1,40.77,59.87Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CursorSVG = {\n    Angle: extend(BASE, {\n        name: 'Angle',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50\n    50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23\n    10l50 50q10 10 10 23z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    ArrowAnnotate: extend(BASE, {\n        name: 'ArrowAnnotate',\n        iconContent: `<g id=\"arrowAnnotate-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"arrowAnnotate-arrow\" d=\"M23,7 l-15,15 M7,17 l0,6 6,0\" stroke-width=\"2\" />\n  </g>`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Bidirectional: extend(BASE, {\n        name: 'Bidirectional',\n        iconContent: `<g fill=\"{{color}}\" stroke-width=\"3\" stroke=\"{{color}}\">\n    <path d=\"M27.63 3.21L3.12 28.81\"></path>\n    <path d=\"M27.63 15.75L15.27 4.43\"></path>\n    <path d=\"M16.5 4.28C16.5 4.96 15.95 5.51 15.27 5.51C14.59 5.51 14.03 4.96 14.03 4.28C14.03 3.59 14.59 3.04 15.27 3.04C15.95 3.04 16.5 3.59 16.5 4.28Z\" ></path>\n    <path d=\"M28.87 3.19C28.87 3.87 28.31 4.43 27.63 4.43C26.95 4.43 26.4 3.87 26.4 3.19C26.4 2.51 26.95 1.95 27.63 1.95C28.31 1.95 28.87 2.51 28.87 3.19Z\"></path>\n    <path d=\"M28.87 15.75C28.87 16.43 28.31 16.99 27.63 16.99C26.95 16.99 26.4 16.43 26.4 15.75C26.4 15.07 26.95 14.51 27.63 14.51C28.31 14.51 28.87 15.07 28.87 15.75Z\"></path>\n    <path d=\"M4.73 28.44C4.73 29.12 4.17 29.68 3.49 29.68C2.81 29.68 2.25 29.12 2.25 28.44C2.25 27.76 2.81 27.2 3.49 27.2C4.17 27.2 4.73 27.76 4.73 28.44Z\"></path>\n  </g>`,\n        viewBox: {\n            x: 48,\n            y: 48,\n        },\n    }),\n    CobbAngle: extend(BASE, {\n        name: 'CobbAngle',\n        iconContent: `<g stroke=\"{{color}}\" stroke-width=\"3\">\n    <path d=\"M28.59 2.34L3.82 12.32\"></path>\n    <path d=\"M28.59 29.66L3.82 19.68\"></path>\n    <path stroke-dasharray=\"2\" fill-opacity=\"0\" d=\"M12.37\n      23.06C12.67 22.36 12.85 21.93 12.92 21.76C14.6 17.8 14.68 13.35 13.15\n      9.33C13.11 9.24 13.02 9 12.88 8.63\">\n    </path>\n  </g>`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    CircleROI: extend(BASE, {\n        name: 'CircleROI',\n        iconContent: `<circle stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" cx=\"16\" cy=\"16\" r=\"14\" />`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    EllipticalROI: extend(BASE, {\n        name: 'EllipticalROI',\n        iconContent: `<path stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" d=\"M30.74 15.76C30.74 20.99 24.14 25.23 16\n    25.23C7.86 25.23 1.26 20.99 1.26 15.76C1.26 10.54 7.86 6.3 16 6.3C24.14\n    6.3 30.74 10.54 30.74 15.76Z\" />`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    FreehandROI: extend(BASE, {\n        name: 'FreehandROI',\n        iconContent: `<g fill=\"{{color}}\" stroke=\"{{color}}\" stroke-width=\"2\">\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_3\" cy=\"4.240343\" cx=\"14.306499\"/>\n    <line id=\"svg_4\" y2=\"3.58462\" x2=\"12.242186\" y1=\"3.997482\" x1=\"13.432202\"/>\n    <line id=\"svg_5\" y2=\"3.268901\" x2=\"10.857882\" y1=\"3.608906\" x1=\"12.387902\"/>\n    <line id=\"svg_6\" y2=\"3.147471\" x2=\"9.740724\" y1=\"3.293187\" x1=\"10.955026\"/>\n    <line id=\"svg_7\" y2=\"3.147471\" x2=\"8.089274\" y1=\"3.196043\" x1=\"9.983585\"/>\n    <line id=\"svg_8\" y2=\"3.268901\" x2=\"6.874972\" y1=\"3.123185\" x1=\"8.307848\"/>\n    <line id=\"svg_9\" y2=\"3.657478\" x2=\"5.587812\" y1=\"3.220329\" x1=\"7.020688\"/>\n    <line id=\"svg_10\" y2=\"4.046054\" x2=\"4.737801\" y1=\"3.560334\" x1=\"5.854959\"/>\n    <line id=\"svg_11\" y2=\"4.337487\" x2=\"4.300652\" y1=\"3.997482\" x1=\"4.834945\"/>\n    <line id=\"svg_12\" y2=\"4.726063\" x2=\"3.88779\" y1=\"4.191771\" x1=\"4.470655\"/>\n    <line id=\"svg_15\" y2=\"5.3575\" x2=\"3.377783\" y1=\"4.604633\" x1=\"3.960648\"/>\n    <line id=\"svg_16\" y2=\"6.183226\" x2=\"2.916348\" y1=\"5.138926\" x1=\"3.547785\"/>\n    <line id=\"svg_17\" y2=\"6.960379\" x2=\"2.770632\" y1=\"5.867507\" x1=\"3.037779\"/>\n    <line id=\"svg_18\" y2=\"7.713246\" x2=\"2.673488\" y1=\"6.741804\" x1=\"2.819204\"/>\n    <line id=\"svg_19\" y2=\"8.684687\" x2=\"2.697774\" y1=\"7.616102\" x1=\"2.673488\"/>\n    <line id=\"svg_20\" y2=\"9.753273\" x2=\"2.892062\" y1=\"8.611829\" x1=\"2.697774\"/>\n    <line id=\"svg_21\" y2=\"10.724714\" x2=\"3.134923\" y1=\"9.534698\" x1=\"2.84349\"/>\n    <line id=\"svg_23\" y2=\"11.647583\" x2=\"3.596357\" y1=\"10.578998\" x1=\"3.086351\"/>\n    <line id=\"svg_25\" y2=\"12.521881\" x2=\"4.276366\" y1=\"11.501867\" x1=\"3.499213\"/>\n    <line id=\"svg_26\" y2=\"13.930471\" x2=\"5.830673\" y1=\"12.376165\" x1=\"4.13065\"/>\n    <line id=\"svg_28\" y2=\"14.707624\" x2=\"7.263549\" y1=\"13.881899\" x1=\"5.733528\"/>\n    <line id=\"svg_29\" y2=\"15.339061\" x2=\"8.963571\" y1=\"14.61048\" x1=\"7.06926\"/>\n    <line id=\"svg_30\" y2=\"15.581921\" x2=\"10.882168\" y1=\"15.314775\" x1=\"8.817855\"/>\n    <line id=\"svg_31\" y2=\"15.460491\" x2=\"12.023612\" y1=\"15.581921\" x1=\"10.785024\"/>\n    <line id=\"svg_33\" y2=\"15.120487\" x2=\"13.092197\" y1=\"15.484777\" x1=\"11.877895\"/>\n    <line id=\"svg_34\" y2=\"14.586194\" x2=\"13.86935\" y1=\"15.217631\" x1=\"12.897909\"/>\n    <line id=\"svg_35\" y2=\"13.833327\" x2=\"14.597931\" y1=\"14.756196\" x1=\"13.699348\"/>\n    <line id=\"svg_37\" y2=\"12.716169\" x2=\"15.180796\" y1=\"13.881899\" x1=\"14.549359\"/>\n    <line id=\"svg_39\" y2=\"11.429009\" x2=\"15.520801\" y1=\"12.813313\" x1=\"15.15651\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_40\" cy=\"10.967574\" cx=\"15.520801\"/>\n  </g>`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    FreehandROISculptor: extend(BASE, {\n        name: 'FreehandROISculptor',\n        iconContent: `<g id=\"icon-freehand-sculpt\" fill=\"none\" stroke-width=\"1.5\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <line id=\"svg_1\" y2=\"2.559367\" x2=\"10.184807\" y1=\"4.467781\" x1=\"8.81711\"/>\n    <line id=\"svg_4\" y2=\"1.493836\" x2=\"11.727442\" y1=\"2.766112\" x1=\"10.089386\"/>\n    <line id=\"svg_7\" y2=\"1.080346\" x2=\"13.047428\" y1=\"1.748291\" x1=\"11.345759\"/>\n    <line id=\"svg_8\" y2=\"1.000829\" x2=\"14.351511\" y1=\"1.112153\" x1=\"12.77707\"/>\n    <line id=\"svg_9\" y2=\"1.350705\" x2=\"15.242104\" y1=\"0.905408\" x1=\"13.969828\"/>\n    <line id=\"svg_10\" y2=\"2.098167\" x2=\"15.862339\" y1=\"1.14396\" x1=\"14.955842\"/>\n    <line id=\"svg_11\" y2=\"3.195505\" x2=\"16.41896\" y1=\"1.939133\" x1=\"15.766918\"/>\n    <line id=\"svg_12\" y2=\"4.292843\" x2=\"16.530284\" y1=\"2.925147\" x1=\"16.387153\"/>\n    <line id=\"svg_16\" y2=\"5.644637\" x2=\"16.196311\" y1=\"3.831643\" x1=\"16.593898\"/>\n    <line id=\"svg_18\" y2=\"7.266789\" x2=\"15.623787\" y1=\"5.19934\" x1=\"16.275829\"/>\n    <line id=\"svg_19\" y2=\"10.813258\" x2=\"14.526449\" y1=\"6.726071\" x1=\"15.766918\"/>\n    <line id=\"svg_20\" y2=\"5.056209\" x2=\"8.085552\" y1=\"4.181519\" x1=\"8.976145\"/>\n    <line id=\"svg_23\" y2=\"5.326568\" x2=\"7.481221\" y1=\"4.78585\" x1=\"8.403621\"/>\n    <line id=\"svg_24\" y2=\"5.565119\" x2=\"6.749662\" y1=\"5.294761\" x1=\"7.624352\"/>\n    <line id=\"svg_25\" y2=\"5.994512\" x2=\"5.429675\" y1=\"5.533312\" x1=\"6.956407\"/>\n    <line id=\"svg_27\" y2=\"6.551133\" x2=\"4.284627\" y1=\"5.962706\" x1=\"5.572807\"/>\n    <line id=\"svg_28\" y2=\"7.584858\" x2=\"3.044158\" y1=\"6.392099\" x1=\"4.427758\"/>\n    <line id=\"svg_29\" y2=\"8.84123\" x2=\"2.185372\" y1=\"7.489437\" x1=\"3.219096\"/>\n    <line id=\"svg_31\" y2=\"10.606513\" x2=\"1.644654\" y1=\"8.602678\" x1=\"2.280792\"/>\n    <line id=\"svg_32\" y2=\"13.214679\" x2=\"1.48562\" y1=\"10.352058\" x1=\"1.724171\"/>\n    <line id=\"svg_33\" y2=\"14.375631\" x2=\"1.676461\" y1=\"12.992031\" x1=\"1.453813\"/>\n    <line id=\"svg_34\" y2=\"15.298031\" x2=\"2.264889\" y1=\"14.152983\" x1=\"1.517427\"/>\n    <line id=\"svg_35\" y2=\"16.172721\" x2=\"3.521261\" y1=\"14.948155\" x1=\"1.915013\"/>\n    <line id=\"svg_36\" y2=\"16.824762\" x2=\"5.207027\" y1=\"15.997783\" x1=\"3.28271\"/>\n    <line id=\"svg_38\" y2=\"17.063314\" x2=\"7.035924\" y1=\"16.745245\" x1=\"4.968475\"/>\n    <line id=\"svg_39\" y2=\"16.888376\" x2=\"9.278311\" y1=\"17.047411\" x1=\"6.733758\"/>\n    <line id=\"svg_40\" y2=\"16.284045\" x2=\"10.661911\" y1=\"16.983797\" x1=\"8.992048\"/>\n    <line id=\"svg_41\" y2=\"15.313934\" x2=\"11.647925\" y1=\"16.395369\" x1=\"10.455166\"/>\n    <line id=\"svg_44\" y2=\"13.898527\" x2=\"12.82478\" y1=\"15.425259\" x1=\"11.504794\"/>\n    <line id=\"svg_45\" y2=\"12.037824\" x2=\"14.144766\" y1=\"14.312017\" x1=\"12.522614\"/>\n    <line id=\"svg_47\" y2=\"10.59061\" x2=\"14.605966\" y1=\"12.228665\" x1=\"13.953925\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_48\" cy=\"3.982726\" cx=\"13.460918\"/>\n  </g>`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    Length: extend(BASE, {\n        name: 'Length',\n        iconContent: `<g id=\"length-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"length-dashes\" d=\"m22.5,6 -16.5,16.5\" stroke-width=\"3\" stroke-dasharray=\"0.6666,5\" />\n  </g>`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Height: extend(BASE, {\n        name: 'Height',\n        iconContent: `<path d=\"m 6 22 l 8.5 0 v -16 h 8\" stroke-width=\"3\" fill=\"none\" stroke=\"{{color}}\" />`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Probe: extend(BASE, {\n        name: 'Probe',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75\n    75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73\n    198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5\n    279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5\n    385.5-103 385.5 103 279.5 279.5 103 385.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    RectangleROI: extend(BASE, {\n        name: 'RectangleROI',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47\n    113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0\n    119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119\n    84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    TextMarker: extend(BASE, {\n        name: 'TextMarker',\n        iconContent: `<path fill=\"{{color}}\" d=\"M789 559l-170 450q33 0 136.5 2t160.5 2q19 0\n    57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29\n    31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15\n    34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 5-.5\n    13.5t-.5 12.5q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0\n    12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11\n    2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0\n    22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58\n    0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Crosshairs: extend(BASE, {\n        name: 'Crosshairs',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1325 1024h-109q-26 0-45-19t-19-45v-128q0-26\n    19-45t45-19h109q-32-108-112.5-188.5t-188.5-112.5v109q0 26-19 45t-45\n    19h-128q-26 0-45-19t-19-45v-109q-108 32-188.5 112.5t-112.5 188.5h109q26\n    0 45 19t19 45v128q0 26-19 45t-45 19h-109q32 108 112.5 188.5t188.5\n    112.5v-109q0-26 19-45t45-19h128q26 0 45 19t19 45v109q108-32\n    188.5-112.5t112.5-188.5zm339-192v128q0 26-19 45t-45 19h-143q-37 161-154.5\n    278.5t-278.5 154.5v143q0 26-19 45t-45 19h-128q-26\n    0-45-19t-19-45v-143q-161-37-278.5-154.5t-154.5-278.5h-143q-26\n    0-45-19t-19-45v-128q0-26 19-45t45-19h143q37-161\n    154.5-278.5t278.5-154.5v-143q0-26 19-45t45-19h128q26 0 45 19t19 45v143q161\n    37 278.5 154.5t154.5 278.5h143q26 0 45 19t19 45z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Eraser: extend(BASE, {\n        name: 'Eraser',\n        iconContent: `<path transform=\"translate(0,1792) scale(1,-1)\" fill=\"{{color}}\" d=\"M960 1408l336-384h-768l-336 384h768zm1013-1077q15\n    34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38\n    0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38\n    0 69.5 20.5t47.5 54.5z\" />`,\n        viewBox: {\n            x: 2048,\n            y: 1792,\n        },\n    }),\n    Magnify: extend(BASE, {\n        name: 'Magnify',\n        iconContent: `<path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />`,\n        viewBox: {\n            x: 512,\n            y: 512,\n        },\n    }),\n    Pan: extend(BASE, {\n        name: 'Pan',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17\n    39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355\n    355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59\n    39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12\n    0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144\n    144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19\n    45v448q0 42-39 59-13 5-25 5-26 0-45-19z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Rotate: extend(BASE, {\n        name: 'Rotate',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39\n    14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5\n    163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0\n    225-52t179-147q7-10 23-12 15 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109\n    132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298\n    164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14\n    39 17 39 59z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    StackScroll: extend(BASE, {\n        name: 'StackScroll',\n        iconContent: `<path fill=\"{{color}}\" d=\"M24 21v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1zM24 13v2c0\n    0.547-0.453 1-1 1h-22c-0.547 0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547\n    0 1 0.453 1 1zM24 5v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1z\" />`,\n        viewBox: {\n            x: 24,\n            y: 28,\n        },\n    }),\n    WindowLevelRegion: extend(BASE, {\n        name: 'WindowLevelRegion',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1664 416v960q0 119-84.5 203.5t-203.5 84.5h-960q-119\n    0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5\n    84.5t84.5 203.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    WindowLevel: extend(BASE, {\n        name: 'WindowLevel',\n        iconContent: `\n    <path fill=\"{{color}}\" d=\"M14.5,3.5 a1 1 0 0 1 -11,11 Z\" stroke=\"none\" opacity=\"0.8\" />\n    <circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"none\" stroke-width=\"2\" stroke=\"{{color}}\" />`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    Zoom: extend(BASE, {\n        name: 'Zoom',\n        iconContent: `\n  <path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />\n  <path fill=\"{{color}}\" transform=\"scale(0.22,0.22) translate(1400,0)\" d=\"M1216\n    320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19\n    19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26\n    0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z\" />`,\n        viewBox: {\n            x: 640,\n            y: 512,\n        },\n    }),\n    SegmentationFreeHandEraseInside: extend(BASE, {\n        name: 'SegmentationFreeHandEraseInside',\n        iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandFillInside: extend(BASE, {\n        name: 'SegmentationFreeHandFillInside',\n        iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandEraseOutside: extend(BASE, {\n        name: 'SegmentationFreeHandEraseOutside',\n        iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandFillOutside: extend(BASE, {\n        name: 'SegmentationFreeHandFillOutside',\n        iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationRectangleEraseInside: extend(BASE, {\n        name: 'SegmentationRectangleEraseInside',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    RectangleScissor: extend(BASE, {\n        name: 'RectangleScissor',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.FILL_INSIDE': extend(BASE, {\n        name: 'RectangleScissor.FILL_INSIDE',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.FILL_OUTSIDE': extend(BASE, {\n        name: 'RectangleScissor.FILL_OUTSIDE',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.ERASE_OUTSIDE': extend(BASE, {\n        name: 'RectangleScissor.ERASE_OUTSIDE',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.ERASE_INSIDE': extend(BASE, {\n        name: 'RectangleScissor.ERASE_INSIDE',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    CircleScissor: extend(BASE, {\n        name: 'CircleScissor',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.FILL_INSIDE': extend(BASE, {\n        name: 'CircleScissor.FILL_INSIDE',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.ERASE_OUTSIDE': extend(BASE, {\n        name: 'CircleScissor.ERASE_OUTSIDE',\n        iconContent: `${CIRCLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.FILL_OUTSIDE': extend(BASE, {\n        name: 'CircleScissor.FILL_OUTSIDE',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n};\nfunction extend(base, values) {\n    return Object.assign(Object.create(base), {\n        ...values,\n        name: values.name || base.name,\n    });\n}\nfunction registerCursor(toolName, iconContent, viewBox) {\n    CursorSVG[toolName] = extend(BASE, {\n        iconContent,\n        viewBox,\n    });\n}\nfunction getDefinedSVGCursorDescriptor(name) {\n    return CursorSVG[name];\n}\nconst svgCursorNames = Object.keys(CursorSVG);\nexport { getDefinedSVGCursorDescriptor, registerCursor, svgCursorNames, CursorSVG, };\n","import { ToolModes, AnnotationStyleStates } from '../enums';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport { getDefinedSVGCursorDescriptor } from './SVGCursorDescriptor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nconst PROPERTY = 'color';\nconst STATE = AnnotationStyleStates.Highlighted;\nconst MODE = ToolModes.Active;\nexport default class SVGMouseCursor extends ImageMouseCursor {\n    constructor(url, x, y, name, fallback) {\n        super(url, x, y, name, fallback);\n    }\n    static getDefinedCursor(name, pointer = false, color) {\n        if (!color) {\n            color = getStyleProperty(PROPERTY, {}, STATE, MODE);\n        }\n        const urn = getCursorURN(name, pointer, color);\n        let cursor = super.getDefinedCursor(urn);\n        if (!cursor) {\n            const descriptor = getDefinedSVGCursorDescriptor(name);\n            if (descriptor) {\n                cursor = createSVGMouseCursor(descriptor, urn, pointer, color, super.getDefinedCursor('default'));\n                super.setDefinedCursor(urn, cursor);\n            }\n        }\n        return cursor;\n    }\n}\nfunction format(template, dictionary) {\n    const dict = Object(dictionary);\n    const defined = Object.prototype.hasOwnProperty.bind(dict);\n    return (template + '').replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n        return defined(key) ? dict[key] + '' : '';\n    });\n}\nfunction getCursorURN(name, pointer, color) {\n    const type = pointer ? 'pointer' : 'cursor';\n    return `${type}:${name}/${color}`;\n}\nfunction createSVGMouseCursor(descriptor, name, pointer, color, fallback) {\n    const { x, y } = descriptor.mousePoint;\n    return new SVGMouseCursor(createSVGIconUrl(descriptor, pointer, { color }), x, y, name, fallback);\n}\nfunction createSVGIconUrl(descriptor, pointer, options) {\n    const blob = createSVGIconBlob(descriptor, pointer, options);\n    const url = URL.createObjectURL(blob);\n    const urn = `${url}#${descriptor.name || 'unknown'}-${pointer ? 'pointer' : 'cursor'}`;\n    return urn;\n}\nfunction createSVGIconBlob(descriptor, pointer, options) {\n    const svgString = (pointer ? createSVGIconWithPointer : createSVGIcon)(descriptor, options);\n    return new Blob([svgString], { type: 'image/svg+xml' });\n}\nfunction createSVGIcon(descriptor, options) {\n    const { iconContent, iconSize, viewBox } = descriptor;\n    const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${iconSize}\" height=\"${iconSize}\" viewBox=\"0 0\n      ${viewBox.x} ${viewBox.y}\">\n      ${iconContent}\n    </svg>`;\n    return format(svgString, options);\n}\nfunction createSVGIconWithPointer(descriptor, options) {\n    const { iconContent, iconSize, viewBox, mousePointerGroupString } = descriptor;\n    const scale = iconSize / Math.max(viewBox.x, viewBox.y, 1);\n    const svgSize = 16 + iconSize;\n    const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${svgSize}\" height=\"${svgSize}\" viewBox=\"0 0 ${svgSize} ${svgSize}\">\n      <g>${mousePointerGroupString}</g>\n      <g transform=\"translate(16, 16) scale(${scale})\">${iconContent}</g>\n    </svg>`;\n    return format(svgString, options);\n}\n","import MouseCursor, { standardCursorNames } from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nimport * as elementCursor from './elementCursor';\nimport setCursorForElement from './setCursorForElement';\nimport { registerCursor, svgCursorNames, CursorSVG, } from './SVGCursorDescriptor';\nconst CursorNames = [...svgCursorNames, ...standardCursorNames];\nexport { MouseCursor, ImageMouseCursor, SVGMouseCursor, elementCursor, registerCursor, CursorNames, CursorSVG, setCursorForElement, };\n","import { state } from '../store/state';\nimport { getEnabledElement } from '@cornerstonejs/core';\nconst VIEWPORT_ELEMENT = 'viewport-element';\nfunction getSvgDrawingHelper(element) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId, renderingEngineId } = enabledElement;\n    const canvasHash = `${viewportId}:${renderingEngineId}`;\n    const svgLayerElement = _getSvgLayer(element);\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        state.svgNodeCache[canvasHash][cacheKey].touched = false;\n    });\n    return {\n        svgLayerElement: svgLayerElement,\n        svgNodeCacheForCanvas: state.svgNodeCache,\n        getSvgNode: getSvgNode.bind(this, canvasHash),\n        appendNode: appendNode.bind(this, svgLayerElement, canvasHash),\n        setNodeTouched: setNodeTouched.bind(this, canvasHash),\n        clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash),\n    };\n}\nfunction _getSvgLayer(element) {\n    const viewportElement = `.${VIEWPORT_ELEMENT}`;\n    const internalDivElement = element.querySelector(viewportElement);\n    const svgLayer = internalDivElement?.querySelector(':scope > .svg-layer');\n    return svgLayer;\n}\nfunction getSvgNode(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        return state.svgNodeCache[canvasHash][cacheKey].domRef;\n    }\n}\nfunction appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return null;\n    }\n    state.svgNodeCache[canvasHash][cacheKey] = {\n        touched: true,\n        domRef: svgNode,\n    };\n    svgLayerElement.appendChild(svgNode);\n}\nfunction setNodeTouched(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        state.svgNodeCache[canvasHash][cacheKey].touched = true;\n    }\n}\nfunction clearUntouched(svgLayerElement, canvasHash) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        const cacheEntry = state.svgNodeCache[canvasHash][cacheKey];\n        if (!cacheEntry.touched && cacheEntry.domRef) {\n            svgLayerElement.removeChild(cacheEntry.domRef);\n            delete state.svgNodeCache[canvasHash][cacheKey];\n        }\n    });\n}\nexport default getSvgDrawingHelper;\n","import getSvgDrawingHelper from './getSvgDrawingHelper';\nfunction draw(element, fn) {\n    const svgDrawingHelper = getSvgDrawingHelper(element);\n    fn(svgDrawingHelper);\n    svgDrawingHelper.clearUntouched();\n}\nexport default draw;\n","export function setAttributesIfNecessary(attributes, svgNode) {\n    Object.keys(attributes).forEach((key) => {\n        const currentValue = svgNode.getAttribute(key);\n        const newValue = attributes[key];\n        if (newValue === undefined || newValue === '') {\n            svgNode.removeAttribute(key);\n        }\n        else if (currentValue !== newValue) {\n            svgNode.setAttribute(key, newValue);\n        }\n    });\n}\nexport default setAttributesIfNecessary;\n","export function setNewAttributesIfValid(attributes, svgNode) {\n    Object.keys(attributes).forEach((key) => {\n        const newValue = attributes[key];\n        if (newValue !== undefined && newValue !== '') {\n            svgNode.setAttribute(key, newValue);\n        }\n    });\n}\nexport default setNewAttributesIfValid;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawCircle(svgDrawingHelper, annotationUID, circleUID, center, radius, options = {}, dataId = '') {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'circle', circleUID);\n    const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        r: `${radius}`,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n    };\n    if (existingCircleElement) {\n        setAttributesIfNecessary(attributes, existingCircleElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newCircleElement = document.createElementNS(svgns, 'circle');\n        if (dataId !== '') {\n            newCircleElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, newCircleElement);\n        svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);\n    }\n}\nexport default drawCircle;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n    const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [bottom, top, left, right] = canvasCoordinates;\n    const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n    const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n    const angle = (Math.atan2(left[1] - right[1], left[0] - right[0]) * 180) / Math.PI;\n    const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n    const radiusX = w / 2;\n    const radiusY = h / 2;\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        rx: `${radiusX}`,\n        ry: `${radiusY}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingEllipse) {\n        setAttributesIfNecessary(attributes, existingEllipse);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n        if (dataId !== '') {\n            svgEllipseElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgEllipseElement);\n        svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n    }\n}\nexport default drawEllipseByCoordinates;\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nfunction drawHandle(svgDrawingHelper, annotationUID, handleGroupUID, handle, options = {}, uniqueIndex) {\n    const { color, handleRadius, width, lineWidth, fill, type, opacity } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        handleRadius: '6',\n        width: '2',\n        lineWidth: undefined,\n        fill: 'transparent',\n        type: 'circle',\n        opacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'handle', `hg-${handleGroupUID}-index-${uniqueIndex}`);\n    let attributes;\n    if (type === 'circle') {\n        attributes = {\n            cx: `${handle[0]}`,\n            cy: `${handle[1]}`,\n            r: handleRadius,\n            stroke: color,\n            fill,\n            'stroke-width': strokeWidth,\n            opacity: opacity,\n        };\n    }\n    else if (type === 'rect') {\n        const handleRadiusFloat = parseFloat(handleRadius);\n        const side = handleRadiusFloat * 1.5;\n        const x = handle[0] - side * 0.5;\n        const y = handle[1] - side * 0.5;\n        attributes = {\n            x: `${x}`,\n            y: `${y}`,\n            width: `${side}`,\n            height: `${side}`,\n            stroke: color,\n            fill,\n            'stroke-width': strokeWidth,\n            rx: `${side * 0.1}`,\n            opacity: opacity,\n        };\n    }\n    else {\n        throw new Error(`Unsupported handle type: ${type}`);\n    }\n    const existingHandleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    if (existingHandleElement) {\n        setAttributesIfNecessary(attributes, existingHandleElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newHandleElement = document.createElementNS(svgns, type);\n        setNewAttributesIfValid(attributes, newHandleElement);\n        svgDrawingHelper.appendNode(newHandleElement, svgNodeHash);\n    }\n}\nexport default drawHandle;\n","import drawHandle from './drawHandle';\nfunction drawHandles(svgDrawingHelper, annotationUID, handleGroupUID, handlePoints, options = {}) {\n    handlePoints.forEach((handle, i) => {\n        drawHandle(svgDrawingHelper, annotationUID, handleGroupUID, handle, options, i);\n    });\n}\nexport default drawHandles;\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, options = {}, dataId = '') {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color, width, lineWidth, lineDash, shadow } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n        shadow: undefined,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'line', lineUID);\n    const existingLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const dropShadowStyle = shadow\n        ? `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`\n        : '';\n    const attributes = {\n        x1: `${start[0]}`,\n        y1: `${start[1]}`,\n        x2: `${end[0]}`,\n        y2: `${end[1]}`,\n        stroke: color,\n        style: dropShadowStyle,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingLine) {\n        setAttributesIfNecessary(attributes, existingLine);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newLine = document.createElementNS(svgns, 'line');\n        if (dataId !== '') {\n            newLine.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, newLine);\n        svgDrawingHelper.appendNode(newLine, svgNodeHash);\n    }\n}\n","import drawLine from './drawLine';\nexport default function drawHeight(svgDrawingHelper, annotationUID, heightUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const midX = end[0] + (start[0] - end[0]) / 2;\n    const endfirstLine = [midX, start[1]];\n    const endsecondLine = [midX, end[1]];\n    const firstLine = {\n        start: start,\n        end: endfirstLine,\n    };\n    const secondLine = {\n        start: endfirstLine,\n        end: endsecondLine,\n    };\n    const threeLine = {\n        start: endsecondLine,\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, '1', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', threeLine.start, threeLine.end, {\n        color,\n        width,\n        lineWidth,\n    });\n}\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawPolyline(svgDrawingHelper, annotationUID, polylineUID, points, options) {\n    if (points.length < 2) {\n        return;\n    }\n    const { color = 'rgb(0, 255, 0)', width = 10, fillColor = 'none', fillOpacity = 0, lineWidth, lineDash, closePath = false, } = options;\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'polyline', polylineUID);\n    const existingPolyLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n    let pointsAttribute = '';\n    for (const point of points) {\n        pointsAttribute += `${point[0].toFixed(1)}, ${point[1].toFixed(1)} `;\n    }\n    if (closePath) {\n        const firstPoint = points[0];\n        pointsAttribute += `${firstPoint[0]}, ${firstPoint[1]}`;\n    }\n    const attributes = {\n        points: pointsAttribute,\n        stroke: color,\n        fill: fillColor,\n        'fill-opacity': fillOpacity,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingPolyLine) {\n        setAttributesIfNecessary(attributes, existingPolyLine);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newPolyLine = document.createElementNS(svgns, 'polyline');\n        setNewAttributesIfValid(attributes, newPolyLine);\n        svgDrawingHelper.appendNode(newPolyLine, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawPath(svgDrawingHelper, annotationUID, pathUID, points, options) {\n    const hasSubArrays = points.length && points[0].length && Array.isArray(points[0][0]);\n    const pointsArrays = hasSubArrays ? points : [points];\n    const { color = 'rgb(0, 255, 0)', width = 10, fillColor = 'none', fillOpacity = 0, lineWidth, lineDash, closePath = false, } = options;\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'path', pathUID);\n    const existingNode = svgDrawingHelper.getSvgNode(svgNodeHash);\n    let pointsAttribute = '';\n    for (let i = 0, numArrays = pointsArrays.length; i < numArrays; i++) {\n        const points = pointsArrays[i];\n        const numPoints = points.length;\n        if (numPoints < 2) {\n            continue;\n        }\n        for (let j = 0; j < numPoints; j++) {\n            const point = points[j];\n            const cmd = j ? 'L' : 'M';\n            pointsAttribute += `${cmd} ${point[0].toFixed(1)}, ${point[1].toFixed(1)} `;\n        }\n        if (closePath) {\n            pointsAttribute += 'Z ';\n        }\n    }\n    if (!pointsAttribute) {\n        return;\n    }\n    const attributes = {\n        d: pointsAttribute,\n        stroke: color,\n        fill: fillColor,\n        'fill-opacity': fillOpacity,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingNode) {\n        setAttributesIfNecessary(attributes, existingNode);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newNode = document.createElementNS(svgns, 'path');\n        setNewAttributesIfValid(attributes, newNode);\n        svgDrawingHelper.appendNode(newNode, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nfunction drawTextBox(svgDrawingHelper, annotationUID, textUID, textLines, position, options = {}) {\n    const mergedOptions = Object.assign({\n        fontFamily: 'Helvetica, Arial, sans-serif',\n        fontSize: '14px',\n        color: 'rgb(255, 255, 0)',\n        background: '',\n        padding: 25,\n        centerX: false,\n        centerY: true,\n    }, options);\n    const textGroupBoundingBox = _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines, position, mergedOptions);\n    return textGroupBoundingBox;\n}\nfunction _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines = [''], position, options) {\n    const { padding, color, fontFamily, fontSize, background } = options;\n    let textGroupBoundingBox;\n    const [x, y] = [position[0] + padding, position[1] + padding];\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'text', textUID);\n    const existingTextGroup = svgDrawingHelper.getSvgNode(svgNodeHash);\n    if (existingTextGroup) {\n        const textElement = existingTextGroup.querySelector('text');\n        const textSpans = Array.from(textElement.children);\n        for (let i = 0; i < textSpans.length; i++) {\n            const textSpanElement = textSpans[i];\n            const text = textLines[i] || '';\n            textSpanElement.textContent = text;\n        }\n        if (textLines.length > textSpans.length) {\n            for (let i = 0; i < textLines.length - textSpans.length; i++) {\n                const textLine = textLines[i + textSpans.length];\n                const textSpan = _createTextSpan(textLine);\n                textElement.appendChild(textSpan);\n            }\n            existingTextGroup.appendChild(textElement);\n            svgDrawingHelper.appendNode(existingTextGroup, svgNodeHash);\n        }\n        const textAttributes = {\n            fill: color,\n            'font-size': fontSize,\n            'font-family': fontFamily,\n        };\n        const textGroupAttributes = {\n            transform: `translate(${x} ${y})`,\n        };\n        setAttributesIfNecessary(textAttributes, textElement);\n        setAttributesIfNecessary(textGroupAttributes, existingTextGroup);\n        textGroupBoundingBox = _drawTextBackground(existingTextGroup, background);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const textGroup = document.createElementNS(svgns, 'g');\n        textGroup.setAttribute('transform', `translate(${x} ${y})`);\n        const textElement = _createTextElement(svgDrawingHelper, options);\n        for (let i = 0; i < textLines.length; i++) {\n            const textLine = textLines[i];\n            const textSpan = _createTextSpan(textLine);\n            textElement.appendChild(textSpan);\n        }\n        textGroup.appendChild(textElement);\n        svgDrawingHelper.appendNode(textGroup, svgNodeHash);\n        textGroupBoundingBox = _drawTextBackground(textGroup, background);\n    }\n    return Object.assign({}, textGroupBoundingBox, {\n        x,\n        y,\n        height: textGroupBoundingBox.height + padding,\n        width: textGroupBoundingBox.width + padding,\n    });\n}\nfunction _createTextElement(svgDrawingHelper, options) {\n    const { color, fontFamily, fontSize } = options;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const textElement = document.createElementNS(svgns, 'text');\n    const noSelectStyle = 'user-select: none; pointer-events: none; -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);';\n    const dropShadowStyle = `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`;\n    const combinedStyle = `${noSelectStyle}${dropShadowStyle}`;\n    textElement.setAttribute('x', '0');\n    textElement.setAttribute('y', '0');\n    textElement.setAttribute('fill', color);\n    textElement.setAttribute('font-family', fontFamily);\n    textElement.setAttribute('font-size', fontSize);\n    textElement.setAttribute('style', combinedStyle);\n    return textElement;\n}\nfunction _createTextSpan(text) {\n    const svgns = 'http://www.w3.org/2000/svg';\n    const textSpanElement = document.createElementNS(svgns, 'tspan');\n    textSpanElement.setAttribute('x', '0');\n    textSpanElement.setAttribute('dy', '1.2em');\n    textSpanElement.textContent = text;\n    return textSpanElement;\n}\nfunction _drawTextBackground(group, color) {\n    let element = group.querySelector('rect.background');\n    if (!color) {\n        if (element) {\n            group.removeChild(element);\n        }\n        return group.getBBox();\n    }\n    if (!element) {\n        element = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        element.setAttribute('class', 'background');\n        group.insertBefore(element, group.firstChild);\n    }\n    const bBox = group.getBBox();\n    const attributes = {\n        x: `${bBox.x}`,\n        y: `${bBox.y}`,\n        width: `${bBox.width}`,\n        height: `${bBox.height}`,\n        fill: color,\n    };\n    setAttributesIfNecessary(attributes, element);\n    return bBox;\n}\nexport default drawTextBox;\n","import drawLine from './drawLine';\nimport findClosestPoint from '../utilities/math/vec2/findClosestPoint';\nfunction drawLink(svgDrawingHelper, annotationUID, linkUID, annotationAnchorPoints, refPoint, boundingBox, options = {}) {\n    const start = annotationAnchorPoints.length > 0\n        ? findClosestPoint(annotationAnchorPoints, refPoint)\n        : refPoint;\n    const boundingBoxPoints = _boundingBoxPoints(boundingBox);\n    const end = findClosestPoint(boundingBoxPoints, start);\n    const mergedOptions = Object.assign({\n        color: 'rgb(255, 255, 0)',\n        lineWidth: '1',\n        lineDash: '2,3',\n    }, options);\n    drawLine(svgDrawingHelper, annotationUID, `link-${linkUID}`, start, end, mergedOptions);\n}\nfunction _boundingBoxPoints(boundingBox) {\n    const { x: left, y: top, height, width } = boundingBox;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const topMiddle = [left + halfWidth, top];\n    const leftMiddle = [left, top + halfHeight];\n    const bottomMiddle = [left + halfWidth, top + height];\n    const rightMiddle = [left + width, top + halfHeight];\n    return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];\n}\nexport default drawLink;\n","import drawTextBox from './drawTextBox';\nimport drawLink from './drawLink';\nfunction drawLinkedTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, annotationAnchorPoints, textBox, options = {}) {\n    const mergedOptions = Object.assign({\n        handleRadius: '6',\n        centering: {\n            x: false,\n            y: true,\n        },\n    }, options);\n    const canvasBoundingBox = drawTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, mergedOptions);\n    drawLink(svgDrawingHelper, annotationUID, textBoxUID, annotationAnchorPoints, textBoxPosition, canvasBoundingBox, mergedOptions);\n    return canvasBoundingBox;\n}\nexport default drawLinkedTextBox;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [topLeft, topRight, bottomLeft, bottomRight] = canvasCoordinates;\n    const width = Math.hypot(topLeft[0] - topRight[0], topLeft[1] - topRight[1]);\n    const height = Math.hypot(topLeft[0] - bottomLeft[0], topLeft[1] - bottomLeft[1]);\n    const center = [\n        (bottomRight[0] + topLeft[0]) / 2,\n        (bottomRight[1] + topLeft[1]) / 2,\n    ];\n    const leftEdgeCenter = [\n        (bottomLeft[0] + topLeft[0]) / 2,\n        (bottomLeft[1] + topLeft[1]) / 2,\n    ];\n    const angle = (Math.atan2(center[1] - leftEdgeCenter[1], center[0] - leftEdgeCenter[0]) *\n        180) /\n        Math.PI;\n    const attributes = {\n        x: `${center[0] - width / 2}`,\n        y: `${center[1] - height / 2}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        if (dataId !== '') {\n            svgRectElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport drawRectByCoordinates from './drawRectByCoordinates';\nexport default function drawRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}, dataId = '') {\n    const topLeft = [start[0], start[1]];\n    const topRight = [end[0], start[1]];\n    const bottomLeft = [start[0], end[1]];\n    const bottomRight = [end[0], end[1]];\n    drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, [topLeft, topRight, bottomLeft, bottomRight], options, dataId);\n}\n","import drawLine from './drawLine';\nexport default function drawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    const headLength = 10;\n    const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n    const firstLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle - Math.PI / 7),\n            end[1] - headLength * Math.sin(angle - Math.PI / 7),\n        ],\n        end: end,\n    };\n    const secondLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle + Math.PI / 7),\n            end[1] - headLength * Math.sin(angle + Math.PI / 7),\n        ],\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, '2', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n    });\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRedactionRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}) {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n    const width = Math.abs(start[0] - end[0]);\n    const height = Math.abs(start[1] - end[1]);\n    const attributes = {\n        x: `${tlhc[0]}`,\n        y: `${tlhc[1]}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'black',\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        _setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        _setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Events;\n(function (Events) {\n    Events[\"TOOL_ACTIVATED\"] = \"CORNERSTONE_TOOLS_TOOL_ACTIVATED\";\n    Events[\"TOOLGROUP_VIEWPORT_ADDED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_ADDED\";\n    Events[\"TOOLGROUP_VIEWPORT_REMOVED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_REMOVED\";\n    Events[\"TOOL_MODE_CHANGED\"] = \"CORNERSTONE_TOOLS_TOOL_MODE_CHANGED\";\n    Events[\"ANNOTATION_ADDED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_ADDED\";\n    Events[\"ANNOTATION_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_COMPLETED\";\n    Events[\"ANNOTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_MODIFIED\";\n    Events[\"ANNOTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_REMOVED\";\n    Events[\"ANNOTATION_SELECTION_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE\";\n    Events[\"ANNOTATION_LOCK_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE\";\n    Events[\"ANNOTATION_VISIBILITY_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE\";\n    Events[\"ANNOTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_RENDERED\";\n    Events[\"ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\";\n    Events[\"INTERPOLATED_ANNOTATIONS_REMOVED\"] = \"CORNERSTONE_TOOLS_INTERPOLATED_ANNOTATIONS_REMOVED\";\n    Events[\"SEGMENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_RENDERED\";\n    Events[\"SEGMENTATION_REPRESENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_ADDED\";\n    Events[\"SEGMENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_ADDED\";\n    Events[\"SEGMENTATION_REPRESENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REMOVED\";\n    Events[\"SEGMENTATION_REPRESENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED\";\n    Events[\"SEGMENTATION_DATA_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED\";\n    Events[\"KEY_DOWN\"] = \"CORNERSTONE_TOOLS_KEY_DOWN\";\n    Events[\"KEY_UP\"] = \"CORNERSTONE_TOOLS_KEY_UP\";\n    Events[\"MOUSE_DOWN\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN\";\n    Events[\"MOUSE_UP\"] = \"CORNERSTONE_TOOLS_MOUSE_UP\";\n    Events[\"MOUSE_DOWN_ACTIVATE\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE\";\n    Events[\"MOUSE_DRAG\"] = \"CORNERSTONE_TOOLS_MOUSE_DRAG\";\n    Events[\"MOUSE_MOVE\"] = \"CORNERSTONE_TOOLS_MOUSE_MOVE\";\n    Events[\"MOUSE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_CLICK\";\n    Events[\"MOUSE_DOUBLE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK\";\n    Events[\"MOUSE_WHEEL\"] = \"CORNERSTONE_TOOLS_MOUSE_WHEEL\";\n    Events[\"TOUCH_START\"] = \"CORNERSTONE_TOOLS_TOUCH_START\";\n    Events[\"TOUCH_START_ACTIVATE\"] = \"CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE\";\n    Events[\"TOUCH_PRESS\"] = \"CORNERSTONE_TOOLS_TOUCH_PRESS\";\n    Events[\"TOUCH_DRAG\"] = \"CORNERSTONE_TOOLS_TOUCH_DRAG\";\n    Events[\"TOUCH_END\"] = \"CORNERSTONE_TOOLS_TOUCH_END\";\n    Events[\"TOUCH_TAP\"] = \"CORNERSTONE_TOOLS_TAP\";\n    Events[\"TOUCH_SWIPE\"] = \"CORNERSTONE_TOOLS_SWIPE\";\n})(Events || (Events = {}));\nexport default Events;\n","var StrategyCallbacks;\n(function (StrategyCallbacks) {\n    StrategyCallbacks[\"OnInteractionStart\"] = \"onInteractionStart\";\n    StrategyCallbacks[\"OnInteractionEnd\"] = \"onInteractionEnd\";\n    StrategyCallbacks[\"Preview\"] = \"preview\";\n    StrategyCallbacks[\"RejectPreview\"] = \"rejectPreview\";\n    StrategyCallbacks[\"AcceptPreview\"] = \"acceptPreview\";\n    StrategyCallbacks[\"Fill\"] = \"fill\";\n    StrategyCallbacks[\"StrategyFunction\"] = \"strategyFunction\";\n    StrategyCallbacks[\"CreateIsInThreshold\"] = \"createIsInThreshold\";\n    StrategyCallbacks[\"Initialize\"] = \"initialize\";\n    StrategyCallbacks[\"INTERNAL_setValue\"] = \"setValue\";\n    StrategyCallbacks[\"ComputeInnerCircleRadius\"] = \"computeInnerCircleRadius\";\n})(StrategyCallbacks || (StrategyCallbacks = {}));\nexport default StrategyCallbacks;\n","var ToolModes;\n(function (ToolModes) {\n    ToolModes[\"Active\"] = \"Active\";\n    ToolModes[\"Passive\"] = \"Passive\";\n    ToolModes[\"Enabled\"] = \"Enabled\";\n    ToolModes[\"Disabled\"] = \"Disabled\";\n})(ToolModes || (ToolModes = {}));\nexport default ToolModes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","var AnnotationStyleStates;\n(function (AnnotationStyleStates) {\n    AnnotationStyleStates[\"Default\"] = \"\";\n    AnnotationStyleStates[\"Highlighted\"] = \"Highlighted\";\n    AnnotationStyleStates[\"Selected\"] = \"Selected\";\n    AnnotationStyleStates[\"Locked\"] = \"Locked\";\n    AnnotationStyleStates[\"AutoGenerated\"] = \"AutoGenerated\";\n})(AnnotationStyleStates || (AnnotationStyleStates = {}));\nexport default AnnotationStyleStates;\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_LABELMAP\"] = \"Converting Contour to Labelmap\";\n    ChangeTypes[\"POLYSEG_SURFACE_TO_LABELMAP\"] = \"Converting Surfaces to Labelmap\";\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_SURFACE\"] = \"Converting Contour to Surface\";\n    ChangeTypes[\"POLYSEG_LABELMAP_TO_SURFACE\"] = \"Converting Labelmap to Surface\";\n    ChangeTypes[\"SURFACE_CLIPPING\"] = \"Clipping Surfaces\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","import { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport getViewportsForAnnotation from '../../../utilities/getViewportsForAnnotation';\nimport * as math from '../../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getViewportIdsWithToolToRender } from '../../../utilities/viewportFilters';\nimport { addAnnotation, removeAnnotation, getAllAnnotations, getChildAnnotations, addChildAnnotation, clearParentAnnotation, } from '../../../stateManagement/annotation/annotationState';\nimport { ContourWindingDirection } from '../../../types/ContourAnnotation';\nimport { triggerAnnotationModified } from '../../../stateManagement/annotation/helpers/state';\nimport updateContourPolyline from '../../../utilities/contours/updateContourPolyline';\nimport { addContourSegmentationAnnotation, areSameSegment, isContourSegmentationAnnotation, removeContourSegmentationAnnotation, } from '../../../utilities/contourSegmentation';\nimport { getToolGroupForViewport } from '../../../store/ToolGroupManager';\nimport { hasTool, hasToolByName } from '../../../store/addTool';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default async function contourSegmentationCompletedListener(evt) {\n    const sourceAnnotation = evt.detail\n        .annotation;\n    if (!isContourSegmentationAnnotation(sourceAnnotation)) {\n        return;\n    }\n    const viewport = getViewport(sourceAnnotation);\n    const contourSegmentationAnnotations = getValidContourSegmentationAnnotations(viewport, sourceAnnotation);\n    if (!contourSegmentationAnnotations.length) {\n        return;\n    }\n    const sourcePolyline = convertContourPolylineToCanvasSpace(sourceAnnotation.data.contour.polyline, viewport);\n    const targetAnnotationInfo = findIntersectingContour(viewport, sourcePolyline, contourSegmentationAnnotations);\n    if (!targetAnnotationInfo) {\n        return;\n    }\n    const { targetAnnotation, targetPolyline, isContourHole } = targetAnnotationInfo;\n    if (isContourHole) {\n        const { contourHoleProcessingEnabled = false } = evt.detail;\n        if (!contourHoleProcessingEnabled) {\n            return;\n        }\n        createPolylineHole(viewport, targetAnnotation, sourceAnnotation);\n    }\n    else {\n        combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline);\n    }\n}\nfunction isFreehandContourSegToolRegisteredForViewport(viewport, silent = false) {\n    const toolName = 'PlanarFreehandContourSegmentationTool';\n    const toolGroup = getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n    let errorMessage;\n    if (!toolGroup.hasTool(toolName)) {\n        errorMessage = `Tool ${toolName} not added to ${toolGroup.id} toolGroup`;\n    }\n    else if (!toolGroup.getToolOptions(toolName)) {\n        errorMessage = `Tool ${toolName} must be in active/passive state`;\n    }\n    if (errorMessage && !silent) {\n        console.warn(errorMessage);\n    }\n    return !errorMessage;\n}\nfunction getViewport(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    const viewportWithToolRegistered = viewports.find((viewport) => isFreehandContourSegToolRegisteredForViewport(viewport, true));\n    return viewportWithToolRegistered ?? viewports[0];\n}\nfunction convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nfunction getValidContourSegmentationAnnotations(viewport, sourceAnnotation) {\n    const { annotationUID: sourceAnnotationUID } = sourceAnnotation;\n    const allAnnotations = getAllAnnotations();\n    return allAnnotations.filter((targetAnnotation) => targetAnnotation.annotationUID &&\n        targetAnnotation.annotationUID !== sourceAnnotationUID &&\n        isContourSegmentationAnnotation(targetAnnotation) &&\n        areSameSegment(targetAnnotation, sourceAnnotation) &&\n        viewport.isReferenceViewable(targetAnnotation.metadata));\n}\nfunction findIntersectingContour(viewport, sourcePolyline, contourSegmentationAnnotations) {\n    const sourceAABB = math.polyline.getAABB(sourcePolyline);\n    for (let i = 0; i < contourSegmentationAnnotations.length; i++) {\n        const targetAnnotation = contourSegmentationAnnotations[i];\n        const targetPolyline = convertContourPolylineToCanvasSpace(targetAnnotation.data.contour.polyline, viewport);\n        const targetAABB = math.polyline.getAABB(targetPolyline);\n        const aabbIntersect = math.aabb.intersectAABB(sourceAABB, targetAABB);\n        const lineSegmentsIntersect = aabbIntersect &&\n            math.polyline.intersectPolyline(sourcePolyline, targetPolyline);\n        const isContourHole = aabbIntersect &&\n            !lineSegmentsIntersect &&\n            math.polyline.containsPoints(targetPolyline, sourcePolyline);\n        if (lineSegmentsIntersect || isContourHole) {\n            return { targetAnnotation, targetPolyline, isContourHole };\n        }\n    }\n}\nexport function createPolylineHole(viewport, targetAnnotation, holeAnnotation) {\n    const { windingDirection: targetWindingDirection } = targetAnnotation.data.contour;\n    const { windingDirection: holeWindingDirection } = holeAnnotation.data.contour;\n    addChildAnnotation(targetAnnotation, holeAnnotation);\n    removeContourSegmentationAnnotation(holeAnnotation);\n    const { contour: holeContour } = holeAnnotation.data;\n    const holePolyline = convertContourPolylineToCanvasSpace(holeContour.polyline, viewport);\n    updateContourPolyline(holeAnnotation, {\n        points: holePolyline,\n        closed: holeContour.closed,\n    }, viewport);\n    const { element } = viewport;\n    const updatedToolNames = new Set([\n        DEFAULT_CONTOUR_SEG_TOOL_NAME,\n        targetAnnotation.metadata.toolName,\n        holeAnnotation.metadata.toolName,\n    ]);\n    for (const toolName of updatedToolNames.values()) {\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n}\nfunction getContourHolesData(viewport, annotation) {\n    return getChildAnnotations(annotation).map((holeAnnotation) => {\n        const polyline = convertContourPolylineToCanvasSpace(holeAnnotation.data.contour.polyline, viewport);\n        return { annotation: holeAnnotation, polyline };\n    });\n}\nfunction combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline) {\n    if (!hasToolByName(DEFAULT_CONTOUR_SEG_TOOL_NAME)) {\n        console.warn(`${DEFAULT_CONTOUR_SEG_TOOL_NAME} is not registered in cornerstone`);\n        return;\n    }\n    if (!isFreehandContourSegToolRegisteredForViewport(viewport)) {\n        return;\n    }\n    const sourceStartPoint = sourcePolyline[0];\n    const mergePolylines = math.polyline.containsPoint(targetPolyline, sourceStartPoint);\n    const contourHolesData = getContourHolesData(viewport, targetAnnotation);\n    const unassignedContourHolesSet = new Set(contourHolesData);\n    const reassignedContourHolesMap = new Map();\n    const assignHoleToPolyline = (parentPolyline, holeData) => {\n        let holes = reassignedContourHolesMap.get(parentPolyline);\n        if (!holes) {\n            holes = [];\n            reassignedContourHolesMap.set(parentPolyline, holes);\n        }\n        holes.push(holeData);\n        unassignedContourHolesSet.delete(holeData);\n    };\n    const newPolylines = [];\n    if (mergePolylines) {\n        const mergedPolyline = math.polyline.mergePolylines(targetPolyline, sourcePolyline);\n        newPolylines.push(mergedPolyline);\n        Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => assignHoleToPolyline(mergedPolyline, holeData));\n    }\n    else {\n        const subtractedPolylines = math.polyline.subtractPolylines(targetPolyline, sourcePolyline);\n        subtractedPolylines.forEach((newPolyline) => {\n            newPolylines.push(newPolyline);\n            Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => {\n                const containsHole = math.polyline.containsPoints(newPolyline, holeData.polyline);\n                if (containsHole) {\n                    assignHoleToPolyline(newPolyline, holeData);\n                    unassignedContourHolesSet.delete(holeData);\n                }\n            });\n        });\n    }\n    Array.from(reassignedContourHolesMap.values()).forEach((contourHolesDataArray) => contourHolesDataArray.forEach((contourHoleData) => clearParentAnnotation(contourHoleData.annotation)));\n    const { element } = viewport;\n    const enabledElement = getEnabledElement(element);\n    const { metadata, data } = targetAnnotation;\n    const { handles, segmentation } = data;\n    const { textBox } = handles;\n    removeAnnotation(sourceAnnotation.annotationUID);\n    removeAnnotation(targetAnnotation.annotationUID);\n    for (let i = 0; i < newPolylines.length; i++) {\n        const polyline = newPolylines[i];\n        const startPoint = viewport.canvasToWorld(polyline[0]);\n        const endPoint = viewport.canvasToWorld(polyline[polyline.length - 1]);\n        const newAnnotation = {\n            metadata: {\n                ...metadata,\n                toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n                originalToolName: metadata.originalToolName || metadata.toolName,\n            },\n            data: {\n                cachedStats: {},\n                handles: {\n                    points: [startPoint, endPoint],\n                    textBox: textBox ? { ...textBox } : undefined,\n                },\n                contour: {\n                    polyline: [],\n                    closed: true,\n                },\n                spline: targetAnnotation.data.spline,\n                segmentation: {\n                    ...segmentation,\n                },\n            },\n            annotationUID: csUtils.uuidv4(),\n            highlighted: true,\n            invalidated: true,\n            isLocked: false,\n            isVisible: undefined,\n            interpolationUID: targetAnnotation.interpolationUID,\n            interpolationCompleted: targetAnnotation.interpolationCompleted,\n        };\n        updateContourPolyline(newAnnotation, {\n            points: polyline,\n            closed: true,\n            targetWindingDirection: ContourWindingDirection.Clockwise,\n        }, viewport);\n        addAnnotation(newAnnotation, element);\n        addContourSegmentationAnnotation(newAnnotation);\n        triggerAnnotationModified(newAnnotation, viewport.element);\n        reassignedContourHolesMap\n            .get(polyline)\n            ?.forEach((holeData) => addChildAnnotation(newAnnotation, holeData.annotation));\n    }\n    updateViewports(enabledElement, targetAnnotation, sourceAnnotation);\n}\nfunction updateViewports(enabledElement, targetAnnotation, sourceAnnotation) {\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    const updatedTtoolNames = new Set([\n        DEFAULT_CONTOUR_SEG_TOOL_NAME,\n        targetAnnotation.metadata.toolName,\n        sourceAnnotation.metadata.toolName,\n    ]);\n    for (const toolName of updatedTtoolNames.values()) {\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    return new Promise((resolve) => window.requestAnimationFrame(resolve));\n}\n","import vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { BaseVolumeViewport, getEnabledElement, Enums, getEnabledElementByIds, cache, utilities, } from '@cornerstonejs/core';\nimport { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport { updateLabelmapSegmentationImageReferences } from '../../stateManagement/segmentation/updateLabelmapSegmentationImageReferences';\nimport { getCurrentLabelmapImageIdForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nconst enable = function (element) {\n    const { viewport } = getEnabledElement(element);\n    if (viewport instanceof BaseVolumeViewport) {\n        return;\n    }\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst perViewportManualTriggers = new Map();\nfunction _imageChangeEventListener(evt) {\n    const eventData = evt.detail;\n    const { viewportId, renderingEngineId } = eventData;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n    const representations = getSegmentationRepresentations(viewportId);\n    if (!representations?.length) {\n        return;\n    }\n    const labelmapRepresentations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n    const actors = viewport.getActors();\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n    });\n    const labelmapActors = labelmapRepresentations\n        .map((representation) => {\n        return getLabelmapActorEntry(viewportId, representation.segmentationId);\n    })\n        .filter((actor) => actor !== undefined);\n    if (!labelmapActors.length) {\n        return;\n    }\n    labelmapActors.forEach((actor) => {\n        const validActor = labelmapRepresentations.find((representation) => {\n            const derivedImageId = getCurrentLabelmapImageIdForViewport(viewportId, representation.segmentationId);\n            return derivedImageId === actor.referencedId;\n        });\n        if (!validActor) {\n            viewport.removeActors([actor.uid]);\n        }\n    });\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        const currentImageId = viewport.getCurrentImageId();\n        const derivedImageId = getCurrentLabelmapImageIdForViewport(viewportId, segmentationId);\n        if (!derivedImageId) {\n            return;\n        }\n        const derivedImage = cache.getImage(derivedImageId);\n        if (!derivedImage) {\n            console.warn('No derived image found in the cache for segmentation representation', representation);\n            return;\n        }\n        const segmentationActorInput = actors.find((actor) => actor.referencedId === derivedImageId);\n        if (!segmentationActorInput) {\n            const { dimensions, spacing, direction } = viewport.getImageDataMetadata(derivedImage);\n            const currentImage = cache.getImage(currentImageId) ||\n                {\n                    imageId: currentImageId,\n                };\n            const { origin: currentOrigin } = viewport.getImageDataMetadata(currentImage);\n            const originToUse = currentOrigin;\n            const constructor = derivedImage.voxelManager.getConstructor();\n            const newPixelData = derivedImage.voxelManager.getScalarData();\n            const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: new constructor(newPixelData),\n            });\n            const imageData = vtkImageData.newInstance();\n            imageData.setDimensions(dimensions[0], dimensions[1], 1);\n            imageData.setSpacing(spacing);\n            imageData.setDirection(direction);\n            imageData.setOrigin(originToUse);\n            imageData.getPointData().setScalars(scalarArray);\n            imageData.modified();\n            viewport.addImages([\n                {\n                    imageId: derivedImageId,\n                    representationUID: `${segmentationId}-${SegmentationRepresentations.Labelmap}`,\n                    callback: ({ imageActor }) => {\n                        imageActor.getMapper().setInputData(imageData);\n                    },\n                },\n            ]);\n            triggerSegmentationRender(viewportId);\n            return;\n        }\n        else {\n            const segmentationImageData = segmentationActorInput.actor\n                .getMapper()\n                .getInputData();\n            if (segmentationImageData.setDerivedImage) {\n                segmentationImageData.setDerivedImage(derivedImage);\n            }\n            else {\n                utilities.updateVTKImageDataWithCornerstoneImage(segmentationImageData, derivedImage);\n            }\n        }\n        viewport.render();\n        if (evt.type === Enums.Events.IMAGE_RENDERED) {\n            viewport.element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n        }\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraModified = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onCameraModified) {\n            tool.onCameraModified(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onImageSpacingCalibrated = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onImageSpacingCalibrated) {\n            tool.onImageSpacingCalibrated(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport InterpolationManager from '../utilities/segmentation/InterpolationManager/InterpolationManager';\nconst enable = function () {\n    eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.addEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nconst disable = function () {\n    eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.removeEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraReset = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onResetCamera) {\n            tool.onResetCamera(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createCameraPositionSynchronizer(synchronizerName) {\n    const cameraPositionSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, cameraSyncCallback);\n    return cameraPositionSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport presentationViewSyncCallback from '../callbacks/presentationViewSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName, options) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, presentationViewSyncCallback, { viewPresentation: options });\n    return presentationView;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createZoomPanSynchronizer(synchronizerName) {\n    const zoomPanSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, zoomPanSyncCallback);\n    return zoomPanSynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport imageSliceSyncCallback from '../callbacks/imageSliceSyncCallback';\nconst { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = Enums.Events;\nexport default function createImageSliceSynchronizer(synchronizerName) {\n    const stackImageSynchronizer = createSynchronizer(synchronizerName, STACK_NEW_IMAGE, imageSliceSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: 'VOLUME_NEW_IMAGE',\n            },\n        ],\n    });\n    return stackImageSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport slabThicknessSyncCallback from '../callbacks/slabThicknessSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, slabThicknessSyncCallback);\n    return presentationView;\n}\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nclass PanTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        if (deltaPointsWorld[0] === 0 &&\n            deltaPointsWorld[1] === 0 &&\n            deltaPointsWorld[2] === 0) {\n            return;\n        }\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Events } from '../enums';\nimport { eventTarget, getEnabledElement, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass TrackballRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            rotateIncrementDegrees: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                mapper.setSampleDistance(originalSampleDistance * 2);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.onSetToolActive = () => {\n            const subscribeToElementResize = () => {\n                const viewportsInfo = this._getViewportsInfo();\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            viewport.resetCamera();\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n        };\n        this.onSetToolDisabled = () => {\n            this._resizeObservers.forEach((resizeObserver, viewportId) => {\n                resizeObserver.disconnect();\n                this._resizeObservers.delete(viewportId);\n            });\n            if (this._viewportAddedListener) {\n                eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n                this._viewportAddedListener = null;\n            }\n        };\n        this.rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        const currentPointsCanvas = currentPoints.canvas;\n        const lastPointsCanvas = lastPoints.canvas;\n        const { rotateIncrementDegrees } = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const normalizedPosition = [\n            currentPointsCanvas[0] / width,\n            currentPointsCanvas[1] / height,\n        ];\n        const normalizedPreviousPosition = [\n            lastPointsCanvas[0] / width,\n            lastPointsCanvas[1] / height,\n        ];\n        const center = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(center);\n        const normalizedCenter = [0.5, 0.5];\n        const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n        const op = [normalizedPreviousPosition[0], 0, 0];\n        const oe = [normalizedPosition[0], 0, 0];\n        const opsq = op[0] ** 2;\n        const oesq = oe[0] ** 2;\n        const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n        const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n        const nop = [op[0], 0, lop];\n        vtkMath.normalize(nop);\n        const noe = [oe[0], 0, loe];\n        vtkMath.normalize(noe);\n        const dot = vtkMath.dot(nop, noe);\n        if (Math.abs(dot) > 0.0001) {\n            const angleX = -2 *\n                Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                rotateIncrementDegrees;\n            const upVec = camera.viewUp;\n            const atV = camera.viewPlaneNormal;\n            const rightV = [0, 0, 0];\n            const forwardV = [0, 0, 0];\n            vtkMath.cross(upVec, atV, rightV);\n            vtkMath.normalize(rightV);\n            vtkMath.cross(atV, rightV, forwardV);\n            vtkMath.normalize(forwardV);\n            vtkMath.normalize(upVec);\n            this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n            const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                rotateIncrementDegrees;\n            this.rotateCamera(viewport, centerWorld, rightV, angleY);\n            viewport.render();\n        }\n    }\n}\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport, cache, utilities, } from '@cornerstonejs/core';\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\nclass WindowLevelTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this._getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n            const middleSliceIndex = Math.floor(dimensions[2] / 2);\n            const frameLength = dimensions[0] * dimensions[1];\n            let bytesPerVoxel;\n            let TypedArrayConstructor;\n            if (scalarData instanceof Float32Array) {\n                bytesPerVoxel = 4;\n                TypedArrayConstructor = Float32Array;\n            }\n            else if (scalarData instanceof Uint8Array) {\n                bytesPerVoxel = 1;\n                TypedArrayConstructor = Uint8Array;\n            }\n            else if (scalarData instanceof Uint16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Uint16Array;\n            }\n            else if (scalarData instanceof Int16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Int16Array;\n            }\n            const buffer = scalarData.buffer;\n            const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n            const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n            const { max, min } = this._getMinMax(frame, frameLength);\n            return max - min;\n        };\n    }\n    touchDragCallback(evt) {\n        this.mouseDragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let volumeId, lower, upper, modality, newRange, viewportsContainingVolumeUID;\n        let isPreScaled = false;\n        const properties = viewport.getProperties();\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n            viewportsContainingVolumeUID =\n                utilities.getViewportsWithVolumeId(volumeId);\n            ({ lower, upper } = properties.voiRange);\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                throw new Error('Volume not found ' + volumeId);\n            }\n            modality = volume.metadata.Modality;\n            isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n        }\n        else if (properties.voiRange) {\n            modality = viewport.modality;\n            ({ lower, upper } = properties.voiRange);\n            const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n            isPreScaled =\n                preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n        }\n        else {\n            throw new Error('Viewport is not a valid type');\n        }\n        if (modality === PT && isPreScaled) {\n            newRange = this.getPTScaledNewRange({\n                deltaPointsCanvas: deltaPoints.canvas,\n                lower,\n                upper,\n                clientHeight: element.clientHeight,\n                isPreScaled,\n                viewport,\n                volumeId,\n            });\n        }\n        else {\n            newRange = this.getNewRange({\n                viewport,\n                deltaPointsCanvas: deltaPoints.canvas,\n                volumeId,\n                lower,\n                upper,\n            });\n        }\n        if (newRange.lower >= newRange.upper) {\n            return;\n        }\n        viewport.setProperties({\n            voiRange: newRange,\n        });\n        viewport.render();\n        if (viewport instanceof VolumeViewport) {\n            viewportsContainingVolumeUID.forEach((vp) => {\n                if (viewport !== vp) {\n                    vp.render();\n                }\n            });\n            return;\n        }\n    }\n    getPTScaledNewRange({ deltaPointsCanvas, lower, upper, clientHeight, viewport, volumeId, isPreScaled, }) {\n        let multiplier = DEFAULT_MULTIPLIER;\n        if (isPreScaled) {\n            multiplier = 5 / clientHeight;\n        }\n        else {\n            multiplier =\n                this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n                    DEFAULT_MULTIPLIER;\n        }\n        const deltaY = deltaPointsCanvas[1];\n        const wcDelta = deltaY * multiplier;\n        upper -= wcDelta;\n        upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n        return { lower, upper };\n    }\n    getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n        const multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n            DEFAULT_MULTIPLIER;\n        const wwDelta = deltaPointsCanvas[0] * multiplier;\n        const wcDelta = deltaPointsCanvas[1] * multiplier;\n        let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\n        windowWidth += wwDelta;\n        windowCenter += wcDelta;\n        windowWidth = Math.max(windowWidth, 1);\n        return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter);\n    }\n    _getMultiplierFromDynamicRange(viewport, volumeId) {\n        let imageDynamicRange;\n        if (volumeId) {\n            const imageVolume = cache.getVolume(volumeId);\n            const { voxelManager } = viewport.getImageData();\n            const middleSlicePixelData = voxelManager.getMiddleSliceData();\n            const calculatedDynamicRange = middleSlicePixelData.reduce((acc, pixel) => {\n                return [Math.min(acc[0], pixel), Math.max(acc[1], pixel)];\n            }, [Infinity, -Infinity]);\n            const BitsStored = imageVolume?.metadata?.BitsStored;\n            const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n            imageDynamicRange = Math.min(calculatedDynamicRange, metadataDynamicRange);\n        }\n        else {\n            imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n        }\n        const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n        return ratio > 1 ? Math.round(ratio) : ratio;\n    }\n    _getImageDynamicRangeFromViewport(viewport) {\n        const { imageData, voxelManager } = viewport.getImageData();\n        if (voxelManager?.getRange) {\n            const range = voxelManager.getRange();\n            return range[1] - range[0];\n        }\n        const dimensions = imageData.getDimensions();\n        if (imageData.getRange) {\n            const imageDataRange = imageData.getRange();\n            return imageDataRange[1] - imageDataRange[0];\n        }\n        let scalarData;\n        if (imageData.getScalarData) {\n            scalarData = imageData.getScalarData();\n        }\n        else {\n            scalarData = imageData.getPointData().getScalars().getData();\n        }\n        if (dimensions[2] !== 1) {\n            return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n        }\n        let range;\n        if (scalarData.getRange) {\n            range = scalarData.getRange();\n        }\n        else {\n            const { min, max } = this._getMinMax(scalarData, scalarData.length);\n            range = [min, max];\n        }\n        return range[1] - range[0];\n    }\n    _getMinMax(frame, frameLength) {\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < frameLength; i++) {\n            const voxel = frame[i];\n            if (voxel < min) {\n                min = voxel;\n            }\n            if (voxel > max) {\n                max = voxel;\n            }\n        }\n        return { max, min };\n    }\n}\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawRect as drawRectSvg } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { windowLevel } from '../utilities/voi';\nclass WindowLevelRegionTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minWindowWidth: 10,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            removeAnnotation(annotation.annotationUID);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationCompleted(annotation);\n            this.applyWindowLevelRegion(annotation, element);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            const DEFAULT_HANDLE_INDEX = 3;\n            points[DEFAULT_HANDLE_INDEX] = [...worldPos];\n            const bottomLeftCanvas = worldToCanvas(points[0]);\n            const topRightCanvas = worldToCanvas(points[3]);\n            const bottomRightCanvas = [\n                topRightCanvas[0],\n                bottomLeftCanvas[1],\n            ];\n            const topLeftCanvas = [\n                bottomLeftCanvas[0],\n                topRightCanvas[1],\n            ];\n            const bottomRightWorld = canvasToWorld(bottomRightCanvas);\n            const topLeftWorld = canvasToWorld(topLeftCanvas);\n            points[1] = bottomRightWorld;\n            points[2] = topLeftWorld;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this.applyWindowLevelRegion = (annotation, element) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const imageData = windowLevel.extractWindowLevelRegionToolData(viewport);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const startCanvas = canvasCoordinates[0];\n            const endCanvas = canvasCoordinates[3];\n            let left = Math.min(startCanvas[0], endCanvas[0]);\n            let top = Math.min(startCanvas[1], endCanvas[1]);\n            let width = Math.abs(startCanvas[0] - endCanvas[0]);\n            let height = Math.abs(startCanvas[1] - endCanvas[1]);\n            left = utilities.clip(left, 0, imageData.width);\n            top = utilities.clip(top, 0, imageData.height);\n            width = Math.floor(Math.min(width, Math.abs(imageData.width - left)));\n            height = Math.floor(Math.min(height, Math.abs(imageData.height - top)));\n            const pixelLuminanceData = windowLevel.getLuminanceFromRegion(imageData, Math.round(left), Math.round(top), width, height);\n            const minMaxMean = windowLevel.calculateMinMaxMean(pixelLuminanceData, imageData.minPixelValue, imageData.maxPixelValue);\n            if (this.configuration.minWindowWidth === undefined) {\n                this.configuration.minWindowWidth = 10;\n            }\n            const windowWidth = Math.max(Math.abs(minMaxMean.max - minMaxMean.min), this.configuration.minWindowWidth);\n            const windowCenter = minMaxMean.mean;\n            const voiRange = utilities.windowLevel.toLowHighRange(windowWidth, windowCenter);\n            viewport.setProperties({ voiRange });\n            viewport.render();\n        };\n        this.cancel = () => {\n            return null;\n        };\n        this.isPointNearTool = () => {\n            return null;\n        };\n        this.toolSelectedCallback = () => {\n            return null;\n        };\n        this.handleSelectedCallback = () => {\n            return null;\n        };\n        this._activateModify = () => {\n            return null;\n        };\n        this._deactivateModify = () => {\n            return null;\n        };\n    }\n}\nWindowLevelRegionTool.toolName = 'WindowLevelRegion';\nexport default WindowLevelRegionTool;\n","import { getEnabledElementByIds, getEnabledElement, VolumeViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nclass StackScrollTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            invert: false,\n            debounceIfNotLoaded: true,\n            loop: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.deltaY = 1;\n    }\n    mouseWheelCallback(evt) {\n        this._scroll(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        this._scrollDrag(evt);\n    }\n    _scrollDrag(evt) {\n        const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n        const { debounceIfNotLoaded, invert, loop } = this.configuration;\n        const deltaPointY = deltaPoints.canvas[1];\n        let volumeId;\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n        }\n        const pixelsPerImage = this._getPixelPerImage(viewport);\n        const deltaY = deltaPointY + this.deltaY;\n        if (!pixelsPerImage) {\n            return;\n        }\n        if (Math.abs(deltaY) >= pixelsPerImage) {\n            const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n            utilities.scroll(viewport, {\n                delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n                volumeId,\n                debounceLoading: debounceIfNotLoaded,\n                loop: loop,\n            });\n            this.deltaY = deltaY % pixelsPerImage;\n        }\n        else {\n            this.deltaY = deltaY;\n        }\n    }\n    _scroll(evt) {\n        const { wheel, element } = evt.detail;\n        const { direction } = wheel;\n        const { invert } = this.configuration;\n        const { viewport } = getEnabledElement(element);\n        const delta = direction * (invert ? -1 : 1);\n        utilities.scroll(viewport, {\n            delta,\n            debounceLoading: this.configuration.debounceIfNotLoaded,\n            loop: this.configuration.loop,\n            volumeId: viewport instanceof BaseVolumeViewport\n                ? viewport.getVolumeId()\n                : undefined,\n            scrollSlabs: this.configuration.scrollSlabs,\n        });\n    }\n    _getPixelPerImage(viewport) {\n        const { element } = viewport;\n        const numberOfSlices = viewport.getNumberOfSlices();\n        return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n    }\n}\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import { BaseVolumeViewport, getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nclass PlanarRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseWheelCallback = (evt) => {\n            const { element, wheel } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { invert } = this.configuration;\n            const angle = wheel.direction * 10 * (invert ? -1 : 1);\n            this.setAngle(viewport, angle);\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, startPoints } = evt.detail;\n        const currentPointWorld = currentPoints.world;\n        const startPointWorld = startPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const centerCanvas = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(centerCanvas);\n        let angle = angleBetweenLines([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);\n        const { viewPlaneNormal } = camera;\n        const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n        const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n        const cross = vec3.cross(vec3.create(), v1, v2);\n        if (vec3.dot(viewPlaneNormal, cross) > 0) {\n            angle = -angle;\n        }\n        if (Number.isNaN(angle)) {\n            return;\n        }\n        this.setAngle(viewport, angle);\n    }\n    setAngle(viewport, angle) {\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        if (viewport instanceof BaseVolumeViewport) {\n            const rotAngle = (((angle + 360) % 360) * Math.PI) / 180;\n            const rotMat = mat4.identity(new Float32Array(16));\n            mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n            const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n            viewport.setCamera({ viewUp: rotatedViewUp });\n        }\n        else {\n            const { rotation } = viewport.getViewPresentation();\n            viewport.setViewPresentation({\n                rotation: (rotation + angle + 360) % 360,\n            });\n        }\n        viewport.render();\n    }\n}\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nclass ZoomTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            zoomToCenter: false,\n            minZoomScale: 0.001,\n            maxZoomScale: 3000,\n            pinchToZoom: true,\n            pan: true,\n            invert: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const camera = enabledElement.viewport.getCamera();\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            return false;\n        };\n        this.preTouchStartCallback = (evt) => {\n            if (!this.configuration.pinchToZoom) {\n                return this.preMouseDownCallback(evt);\n            }\n        };\n        this._dragParallelProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { parallelScale, focalPoint, position } = camera;\n            const zoomScale = 5 / size[1];\n            const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n            const parallelScaleToSet = (1.0 - k) * parallelScale;\n            let focalPointToSet = focalPoint;\n            let positionToSet = position;\n            if (!this.configuration.zoomToCenter) {\n                const distanceToCanvasCenter = vec3.distance(focalPoint, this.initialMousePosWorld);\n                positionToSet = vec3.scaleAndAdd(vec3.create(), position, this.dirVec, -distanceToCanvasCenter * k);\n                focalPointToSet = vec3.scaleAndAdd(vec3.create(), focalPoint, this.dirVec, -distanceToCanvasCenter * k);\n            }\n            const imageData = viewport.getImageData();\n            let spacing = [1, 1, 1];\n            if (imageData) {\n                spacing = imageData.spacing;\n            }\n            const { minZoomScale, maxZoomScale } = this.configuration;\n            const t = element.clientHeight * spacing[1] * 0.5;\n            const scale = t / parallelScaleToSet;\n            let cappedParallelScale = parallelScaleToSet;\n            let thresholdExceeded = false;\n            if (imageData) {\n                if (scale < minZoomScale) {\n                    cappedParallelScale = t / minZoomScale;\n                    thresholdExceeded = true;\n                }\n                else if (scale >= maxZoomScale) {\n                    cappedParallelScale = t / maxZoomScale;\n                    thresholdExceeded = true;\n                }\n            }\n            viewport.setCamera({\n                parallelScale: cappedParallelScale,\n                focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n                position: thresholdExceeded ? position : positionToSet,\n            });\n        };\n        this._dragPerspectiveProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { position, focalPoint, viewPlaneNormal } = camera;\n            const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n            const zoomScale = Math.sqrt(distance) / size[1];\n            const directionOfProjection = [\n                -viewPlaneNormal[0],\n                -viewPlaneNormal[1],\n                -viewPlaneNormal[2],\n            ];\n            const k = this.configuration.invert\n                ? deltaY / zoomScale\n                : deltaY * zoomScale;\n            let tmp = k * directionOfProjection[0];\n            position[0] += tmp;\n            focalPoint[0] += tmp;\n            tmp = k * directionOfProjection[1];\n            position[1] += tmp;\n            focalPoint[1] += tmp;\n            tmp = k * directionOfProjection[2];\n            position[2] += tmp;\n            focalPoint[2] += tmp;\n            viewport.setCamera({ position, focalPoint });\n        };\n        this.initialMousePosWorld = [0, 0, 0];\n        this.dirVec = [0, 0, 0];\n        if (this.configuration.pinchToZoom) {\n            this.touchDragCallback = this._pinchCallback.bind(this);\n        }\n        else {\n            this.touchDragCallback = this._dragCallback.bind(this);\n        }\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _pinchCallback(evt) {\n        const pointsList = evt.detail\n            .currentPointsList;\n        if (pointsList.length > 1) {\n            const { element, currentPoints } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const worldPos = currentPoints.world;\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            if (camera.parallelProjection) {\n                this._dragParallelProjection(evt, viewport, camera, true);\n            }\n            else {\n                this._dragPerspectiveProjection(evt, viewport, camera, true);\n            }\n            viewport.render();\n        }\n        if (this.configuration.pan) {\n            this._panCallback(evt);\n        }\n    }\n    _dragCallback(evt) {\n        const { element } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        if (camera.parallelProjection) {\n            this._dragParallelProjection(evt, viewport, camera);\n        }\n        else {\n            this._dragPerspectiveProjection(evt, viewport, camera);\n        }\n        viewport.render();\n    }\n    _panCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass MIPJumpToClickTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            targetViewportIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseClickCallback(evt) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const volumeId = viewport.getVolumeId();\n        if (!volumeId) {\n            throw new Error(`MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`);\n        }\n        let maxIntensity = -Infinity;\n        const maxFn = (intensity, point) => {\n            if (intensity > maxIntensity) {\n                maxIntensity = intensity;\n                return point;\n            }\n        };\n        const brightestPoint = getPointInLineOfSightWithCriteria(viewport, currentPoints.world, volumeId, maxFn);\n        if (!brightestPoint || !brightestPoint.length) {\n            return;\n        }\n        const { targetViewportIds, toolGroupId } = this.configuration;\n        const viewports = renderingEngine.getViewports().filter((vp) => {\n            if (targetViewportIds?.indexOf(vp.id) >= 0) {\n                return true;\n            }\n            const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n            if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n                return true;\n            }\n            return false;\n        });\n        viewports.forEach((viewport) => {\n            if (viewport instanceof VolumeViewport) {\n                viewport.jumpToWorld(brightestPoint);\n            }\n            else {\n                console.warn('Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport');\n            }\n        });\n    }\n}\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport { AnnotationTool } from './base';\nimport { getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nfunction defaultReferenceLineDraggableRotatable() {\n    return true;\n}\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nconst EPSILON = 1e-3;\nclass CrosshairsTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            shadow: true,\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            autoPan: {\n                enabled: false,\n                panSize: 10,\n            },\n            referenceLinesCenterGapRadius: 20,\n            filterActorUIDsToSetSlabThickness: [],\n            slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n                handleRadius: 9,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.toolCenter = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { FrameOfReferenceUID, viewport } = enabledElement;\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    FrameOfReferenceUID,\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        rotationPoints: [],\n                        slabThicknessPoints: [],\n                        toolCenter: this.toolCenter,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([\n                    viewport.canvas.clientWidth / 2,\n                    viewport.canvas.clientHeight / 2,\n                ]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCrosshairs = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo.length || viewportsInfo.length === 1) {\n                console.warn('For crosshairs to operate, at least two viewports must be given.');\n                return;\n            }\n            const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n            const { normal: normal1, point: point1 } = this.initializeViewport(firstViewport);\n            const { normal: normal2, point: point2 } = this.initializeViewport(secondViewport);\n            let normal3 = [0, 0, 0];\n            let point3 = vec3.create();\n            if (thirdViewport) {\n                ({ normal: normal3, point: point3 } =\n                    this.initializeViewport(thirdViewport));\n            }\n            else {\n                vec3.add(point3, point1, point2);\n                vec3.scale(point3, point3, 0.5);\n                vec3.cross(normal3, normal1, normal2);\n            }\n            const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n            const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n            const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n            this.toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane);\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const jumpWorld = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._jump(enabledElement, jumpWorld);\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n            const { data } = filteredAnnotations[0];\n            const { rotationPoints } = data.handles;\n            const viewportIdArray = [];\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                if (!viewportControllable || !viewportDraggableRotatable) {\n                    continue;\n                }\n                viewportIdArray.push(otherViewport.id);\n                i++;\n            }\n            data.activeViewportIds = [...viewportIdArray];\n            data.handles.activeOperation = OPERATION.DRAG;\n            evt.preventDefault();\n            hideElementCursor(element);\n            this._activateModify(element);\n            return filteredAnnotations[0];\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const viewport = enabledElement.viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const currentCamera = viewport.getCamera();\n            const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n            const deltaCameraPosition = [0, 0, 0];\n            vtkMath.subtract(currentCamera.position, oldCameraPosition, deltaCameraPosition);\n            const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(currentCamera.focalPoint, oldCameraFocalPoint, deltaCameraFocalPoint);\n            viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n            viewportAnnotation.metadata.cameraFocalPoint = [\n                ...currentCamera.focalPoint,\n            ];\n            const viewportControllable = this._getReferenceLineControllable(viewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(viewport.id);\n            if (!csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n                viewportControllable &&\n                viewportDraggableRotatable) {\n                let isRotation = false;\n                const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(deltaCameraPosition, deltaCameraFocalPoint, 1e-3);\n                if (!cameraModifiedSameForPosAndFocalPoint) {\n                    isRotation = true;\n                }\n                const cameraModifiedInPlane = Math.abs(vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)) < 1e-2;\n                if (!isRotation && !cameraModifiedInPlane) {\n                    this.toolCenter[0] += deltaCameraPosition[0];\n                    this.toolCenter[1] += deltaCameraPosition[1];\n                    this.toolCenter[2] += deltaCameraPosition[2];\n                }\n            }\n            if (this.configuration.autoPan?.enabled) {\n                const toolGroup = getToolGroupForViewport(viewport.id, renderingEngine.id);\n                const otherViewportIds = toolGroup\n                    .getViewportIds()\n                    .filter((id) => id !== viewport.id);\n                otherViewportIds.forEach((viewportId) => {\n                    this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n                });\n            }\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCrosshairs();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                data.handles.activeOperation = null;\n                const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, 6);\n                let near = false;\n                if (handleNearImagePoint) {\n                    near = true;\n                }\n                else {\n                    near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                }\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n                else if (data.handles.activeOperation !== previousActiveOperation ||\n                    !this._areViewportIdArraysEqual(data.activeViewportIds, previousActiveViewportIds)) {\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewportId } = enabledElement;\n            const viewportUIDSpecificCrosshairs = annotations.filter((annotation) => annotation.data.viewportId === viewportId);\n            return viewportUIDSpecificCrosshairs;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!annotations?.length || !viewportAnnotation?.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n            const data = viewportAnnotation.data;\n            const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n            const otherViewportAnnotations = this._filterAnnotationsByUniqueViewportOrientations(enabledElement, annotations);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const { data } = annotation;\n                data.handles.toolCenter = this.toolCenter;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                const { clientWidth, clientHeight } = otherViewport.canvas;\n                const otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                const otherCanvasCenter = [\n                    clientWidth * 0.5,\n                    clientHeight * 0.5,\n                ];\n                const otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas(otherViewportCenterWorld);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const canvasVectorFromCenterMid = vec2.create();\n                vec2.scale(canvasVectorFromCenterMid, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.4);\n                const canvasVectorFromCenterShort = vec2.create();\n                vec2.scale(canvasVectorFromCenterShort, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.2);\n                const canvasVectorFromCenterStart = vec2.create();\n                const centerGap = this.configuration.referenceLinesCenterGapRadius;\n                vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, otherViewportAnnotations.length === 2 ? centerGap : 0);\n                const refLinePointOne = vec2.create();\n                const refLinePointTwo = vec2.create();\n                const refLinePointThree = vec2.create();\n                const refLinePointFour = vec2.create();\n                let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n                    refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n                }\n                vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointThree, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.subtract(refLinePointFour, refLinesCenter, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n                liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n                const rotHandleOne = vec2.create();\n                vec2.subtract(rotHandleOne, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                const rotHandleTwo = vec2.create();\n                vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n                }\n                let stHandlesCenterWorld = [...this.toolCenter];\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterWorld = [...otherViewportCenterWorld];\n                }\n                const worldUnitVectorFromCenter = [0, 0, 0];\n                vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n                vtkMath.normalize(worldUnitVectorFromCenter);\n                const { viewPlaneNormal } = camera;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromDegree()\n                    .rotate(90, viewPlaneNormal);\n                const worldUnitOrthoVectorFromCenter = [0, 0, 0];\n                vec3.transformMat4(worldUnitOrthoVectorFromCenter, worldUnitVectorFromCenter, matrix);\n                const slabThicknessValue = otherViewport.getSlabThickness();\n                const worldOrthoVectorFromCenter = [\n                    ...worldUnitOrthoVectorFromCenter,\n                ];\n                vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n                const worldVerticalRefPoint = [0, 0, 0];\n                vtkMath.add(stHandlesCenterWorld, worldOrthoVectorFromCenter, worldVerticalRefPoint);\n                const canvasVerticalRefPoint = viewport.worldToCanvas(worldVerticalRefPoint);\n                const canvasOrthoVectorFromCenter = vec2.create();\n                vec2.subtract(canvasOrthoVectorFromCenter, stHandlesCenterCanvas, canvasVerticalRefPoint);\n                const stLinePointOne = vec2.create();\n                vec2.subtract(stLinePointOne, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n                const stLinePointTwo = vec2.create();\n                vec2.add(stLinePointTwo, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n                const stLinePointThree = vec2.create();\n                vec2.add(stLinePointThree, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointThree, stLinePointThree, canvasOrthoVectorFromCenter);\n                const stLinePointFour = vec2.create();\n                vec2.subtract(stLinePointFour, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointFour, stLinePointFour, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n                const stHandleOne = vec2.create();\n                const stHandleTwo = vec2.create();\n                const stHandleThree = vec2.create();\n                const stHandleFour = vec2.create();\n                vec2.subtract(stHandleOne, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n                vec2.subtract(stHandleThree, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleFour, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointOne,\n                    refLinePointTwo,\n                    refLinePointThree,\n                    refLinePointFour,\n                    stLinePointOne,\n                    stLinePointTwo,\n                    stLinePointThree,\n                    stLinePointFour,\n                    rotHandleOne,\n                    rotHandleTwo,\n                    stHandleOne,\n                    stHandleTwo,\n                    stHandleThree,\n                    stHandleFour,\n                ]);\n            });\n            const newRtpoints = [];\n            const newStpoints = [];\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const otherViewport = line[0];\n                const viewportColor = this._getReferenceLineColor(otherViewport.id);\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                let lineWidth = 1;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = 2.5;\n                }\n                let lineUID = `${lineIndex}`;\n                if (viewportControllable && viewportDraggableRotatable) {\n                    lineUID = `${lineIndex}One`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[1], line[2], {\n                        color,\n                        lineWidth,\n                    });\n                    lineUID = `${lineIndex}Two`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[3], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                else {\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[2], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                if (viewportControllable) {\n                    color =\n                        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                    const rotHandlesActive = data.handles.activeOperation === OPERATION.ROTATE;\n                    const rotationHandles = [line[9], line[10]];\n                    const rotHandleWorldOne = [\n                        viewport.canvasToWorld(line[9]),\n                        otherViewport,\n                        line[1],\n                        line[2],\n                    ];\n                    const rotHandleWorldTwo = [\n                        viewport.canvasToWorld(line[10]),\n                        otherViewport,\n                        line[3],\n                        line[4],\n                    ];\n                    newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n                    const slabThicknessHandlesActive = data.handles.activeOperation === OPERATION.SLAB;\n                    const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n                    const slabThicknessHandleWorldOne = [\n                        viewport.canvasToWorld(line[11]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldTwo = [\n                        viewport.canvasToWorld(line[12]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldThree = [\n                        viewport.canvasToWorld(line[13]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    const slabThicknessHandleWorldFour = [\n                        viewport.canvasToWorld(line[14]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    newStpoints.push(slabThicknessHandleWorldOne, slabThicknessHandleWorldTwo, slabThicknessHandleWorldThree, slabThicknessHandleWorldFour);\n                    if ((lineActive || this.configuration.mobile?.enabled) &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable &&\n                        viewportSlabThicknessControlsOn) {\n                        let handleUID = `${lineIndex}One`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius: this.configuration.mobile?.enabled\n                                ? this.configuration.mobile?.handleRadius\n                                : 3,\n                            opacity: this.configuration.mobile?.enabled\n                                ? this.configuration.mobile?.opacity\n                                : 1,\n                            type: 'circle',\n                        });\n                        handleUID = `${lineIndex}Two`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius: this.configuration.mobile?.enabled\n                                ? this.configuration.mobile?.handleRadius\n                                : 3,\n                            opacity: this.configuration.mobile?.enabled\n                                ? this.configuration.mobile?.opacity\n                                : 1,\n                            type: 'rect',\n                        });\n                    }\n                    else if (lineActive &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius: this.configuration.mobile?.enabled\n                                ? this.configuration.mobile?.handleRadius\n                                : 3,\n                            opacity: this.configuration.mobile?.enabled\n                                ? this.configuration.mobile?.opacity\n                                : 1,\n                            type: 'circle',\n                        });\n                    }\n                    else if (selectedViewportId &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius: this.configuration.mobile?.enabled\n                                ? this.configuration.mobile?.handleRadius\n                                : 3,\n                            opacity: this.configuration.mobile?.enabled\n                                ? this.configuration.mobile?.opacity\n                                : 1,\n                            type: 'rect',\n                        });\n                    }\n                    else if (rotHandlesActive && viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius: 2,\n                            fill: color,\n                            type: 'circle',\n                        });\n                    }\n                    else if (slabThicknessHandlesActive &&\n                        selectedViewportId &&\n                        viewportSlabThicknessControlsOn) {\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, lineUID, slabThicknessHandles, {\n                            color,\n                            handleRadius: 2,\n                            fill: color,\n                            type: 'rect',\n                        });\n                    }\n                    const slabThicknessValue = otherViewport.getSlabThickness();\n                    if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n                        lineUID = `${lineIndex}STOne`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[5], line[6], {\n                            color,\n                            width: 1,\n                            lineDash: [2, 3],\n                        });\n                        lineUID = `${lineIndex}STTwo`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[7], line[8], {\n                            color,\n                            width: line,\n                            lineDash: [2, 3],\n                        });\n                    }\n                }\n            });\n            renderStatus = true;\n            data.handles.rotationPoints = newRtpoints;\n            data.handles.slabThicknessPoints = newStpoints;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n            if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n                return false;\n            }\n            viewportIdArrayOne.forEach((id) => {\n                let itemFound = false;\n                for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n                    if (id === viewportIdArrayTwo[i]) {\n                        itemFound = true;\n                        break;\n                    }\n                }\n                if (itemFound === false) {\n                    return false;\n                }\n            });\n            return true;\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._filterAnnotationsByUniqueViewportOrientations = (enabledElement, annotations) => {\n            const { renderingEngine, viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable === true);\n            });\n            const otherViewportsAnnotationsWithUniqueCameras = [];\n            for (let i = 0; i < otherLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable !== true);\n            });\n            for (let i = 0; i < otherNonLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n                const annotation = otherViewportAnnotations[i];\n                if (otherViewportsAnnotationsWithUniqueCameras.some((element) => element === annotation)) {\n                    continue;\n                }\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            return otherViewportsAnnotationsWithUniqueCameras;\n        };\n        this._checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n            const actors = viewport.getActors();\n            const otherViewportActors = otherViewport.getActors();\n            let sameScene = true;\n            actors.forEach((actor) => {\n                if (actors.length !== otherViewportActors.length ||\n                    otherViewportActors.find(({ uid }) => uid === actor.uid) === undefined) {\n                    sameScene = false;\n                }\n            });\n            return sameScene;\n        };\n        this._jump = (enabledElement, jumpWorld) => {\n            state.isInteractingWithTool = true;\n            const { viewport, renderingEngine } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const delta = [0, 0, 0];\n            vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const sameScene = this._checkIfViewportsRenderingSameScene(viewport, otherViewport);\n                return (this._getReferenceLineControllable(otherViewport.id) &&\n                    this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n                    sameScene);\n            });\n            if (viewportsAnnotationsToUpdate.length === 0) {\n                state.isInteractingWithTool = false;\n                return false;\n            }\n            this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            state.isInteractingWithTool = false;\n            return true;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            const { currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            }\n            else if (handles.activeOperation === OPERATION.ROTATE) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true);\n                });\n                const dir1 = vec2.create();\n                const dir2 = vec2.create();\n                const center = [\n                    this.toolCenter[0],\n                    this.toolCenter[1],\n                    this.toolCenter[2],\n                ];\n                const centerCanvas = viewport.worldToCanvas(center);\n                const finalPointCanvas = eventDetail.currentPoints.canvas;\n                const originalPointCanvas = vec2.create();\n                vec2.sub(originalPointCanvas, finalPointCanvas, eventDetail.deltaPoints.canvas);\n                vec2.sub(dir1, originalPointCanvas, centerCanvas);\n                vec2.sub(dir2, finalPointCanvas, centerCanvas);\n                let angle = vec2.angle(dir1, dir2);\n                if (this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)) {\n                    angle *= -1;\n                }\n                angle = Math.round(angle * 100) / 100;\n                const rotationAxis = viewport.getCamera().viewPlaneNormal;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromRadian()\n                    .translate(center[0], center[1], center[2])\n                    .rotate(angle, rotationAxis)\n                    .translate(-center[0], -center[1], -center[2]);\n                const otherViewportsIds = [];\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    data.handles.toolCenter = center;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const { viewUp, position, focalPoint } = camera;\n                    viewUp[0] += position[0];\n                    viewUp[1] += position[1];\n                    viewUp[2] += position[2];\n                    vec3.transformMat4(focalPoint, focalPoint, matrix);\n                    vec3.transformMat4(position, position, matrix);\n                    vec3.transformMat4(viewUp, viewUp, matrix);\n                    viewUp[0] -= position[0];\n                    viewUp[1] -= position[1];\n                    viewUp[2] -= position[2];\n                    otherViewport.setCamera({\n                        position,\n                        viewUp,\n                        focalPoint,\n                    });\n                    otherViewportsIds.push(otherViewport.id);\n                });\n                renderingEngine.renderViewports(otherViewportsIds);\n            }\n            else if (handles.activeOperation === OPERATION.SLAB) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const referenceAnnotations = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportSlabThicknessControlsOn === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                if (referenceAnnotations.length === 0) {\n                    return;\n                }\n                const viewportsAnnotationsToUpdate = this._filterViewportWithSameOrientation(enabledElement, referenceAnnotations[0], annotations);\n                const viewportsIds = [];\n                viewportsIds.push(viewport.id);\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const normal = camera.viewPlaneNormal;\n                    const dotProd = vtkMath.dot(delta, normal);\n                    const projectedDelta = [...normal];\n                    vtkMath.multiplyScalar(projectedDelta, dotProd);\n                    if (Math.abs(projectedDelta[0]) > 1e-3 ||\n                        Math.abs(projectedDelta[1]) > 1e-3 ||\n                        Math.abs(projectedDelta[2]) > 1e-3) {\n                        const mod = Math.sqrt(projectedDelta[0] * projectedDelta[0] +\n                            projectedDelta[1] * projectedDelta[1] +\n                            projectedDelta[2] * projectedDelta[2]);\n                        const currentPoint = eventDetail.lastPoints.world;\n                        const direction = [0, 0, 0];\n                        const currentCenter = [\n                            this.toolCenter[0],\n                            this.toolCenter[1],\n                            this.toolCenter[2],\n                        ];\n                        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                        if (!viewportDraggableRotatable) {\n                            const { rotationPoints } = this.editData.annotation.data.handles;\n                            const otherViewportRotationPoints = rotationPoints.filter((point) => point[1].uid === otherViewport.id);\n                            if (otherViewportRotationPoints.length === 2) {\n                                const point1 = viewport.canvasToWorld(otherViewportRotationPoints[0][3]);\n                                const point2 = viewport.canvasToWorld(otherViewportRotationPoints[1][3]);\n                                vtkMath.add(point1, point2, currentCenter);\n                                vtkMath.multiplyScalar(currentCenter, 0.5);\n                            }\n                        }\n                        vtkMath.subtract(currentPoint, currentCenter, direction);\n                        const dotProdDirection = vtkMath.dot(direction, normal);\n                        const projectedDirection = [...normal];\n                        vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n                        const normalizedProjectedDirection = [\n                            projectedDirection[0],\n                            projectedDirection[1],\n                            projectedDirection[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDirection, normalizedProjectedDirection);\n                        const normalizedProjectedDelta = [\n                            projectedDelta[0],\n                            projectedDelta[1],\n                            projectedDelta[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n                        let slabThicknessValue = otherViewport.getSlabThickness();\n                        if (csUtils.isOpposite(normalizedProjectedDirection, normalizedProjectedDelta, 1e-3)) {\n                            slabThicknessValue -= mod;\n                        }\n                        else {\n                            slabThicknessValue += mod;\n                        }\n                        slabThicknessValue = Math.abs(slabThicknessValue);\n                        slabThicknessValue = Math.max(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, slabThicknessValue);\n                        const near = this._pointNearReferenceLine(viewportAnnotation, canvasCoords, 6, otherViewport);\n                        if (near) {\n                            slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n                        }\n                        const toolGroup = getToolGroupForViewport(otherViewport.id, renderingEngine.id);\n                        const crosshairsInstance = toolGroup.getToolInstance(this.getToolName());\n                        crosshairsInstance.setSlabThickness(otherViewport, slabThicknessValue);\n                        viewportsIds.push(otherViewport.id);\n                    }\n                });\n                renderingEngine.renderViewports(viewportsIds);\n            }\n        };\n        this._pointNearReferenceLine = (annotation, canvasCoords, proximity, lineViewport) => {\n            const { data } = annotation;\n            const { rotationPoints } = data.handles;\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                if (otherViewport.id !== lineViewport.id) {\n                    continue;\n                }\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                if (!viewportControllable) {\n                    continue;\n                }\n                const lineSegment1 = {\n                    start: {\n                        x: rotationPoints[i][2][0],\n                        y: rotationPoints[i][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i][3][0],\n                        y: rotationPoints[i][3][1],\n                    },\n                };\n                const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n                const lineSegment2 = {\n                    start: {\n                        x: rotationPoints[i + 1][2][0],\n                        y: rotationPoints[i + 1][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i + 1][3][0],\n                        y: rotationPoints[i + 1][3][1],\n                    },\n                };\n                const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n                if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                    return true;\n                }\n                i++;\n            }\n            return false;\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        this._getReferenceLineDraggableRotatable =\n            toolProps.configuration?.getReferenceLineDraggableRotatable ||\n                defaultReferenceLineDraggableRotatable;\n        this._getReferenceLineSlabThicknessControlsOn =\n            toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n                defaultReferenceLineSlabThicknessControlsOn;\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        this._subscribeToViewportNewVolumeSet(viewportsInfo);\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolPassive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolEnabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolDisabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let point = this._getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n        point = this._getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _autoPanViewportIfNecessary(viewportId, renderingEngine) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n        const pan = this.configuration.autoPan.panSize;\n        const visiblePointCanvas = [\n            toolCenterCanvas[0],\n            toolCenterCanvas[1],\n        ];\n        if (toolCenterCanvas[0] < 0) {\n            visiblePointCanvas[0] = pan;\n        }\n        else if (toolCenterCanvas[0] > clientWidth) {\n            visiblePointCanvas[0] = clientWidth - pan;\n        }\n        if (toolCenterCanvas[1] < 0) {\n            visiblePointCanvas[1] = pan;\n        }\n        else if (toolCenterCanvas[1] > clientHeight) {\n            visiblePointCanvas[1] = clientHeight - pan;\n        }\n        if (visiblePointCanvas[0] === toolCenterCanvas[0] &&\n            visiblePointCanvas[1] === toolCenterCanvas[1]) {\n            return;\n        }\n        const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n        const deltaPointsWorld = [\n            visiblePointWorld[0] - this.toolCenter[0],\n            visiblePointWorld[1] - this.toolCenter[1],\n            visiblePointWorld[2] - this.toolCenter[2],\n        ];\n        const camera = viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        viewport.render();\n    }\n    setSlabThickness(viewport, slabThickness) {\n        let actorUIDs;\n        const { filterActorUIDsToSetSlabThickness } = this.configuration;\n        if (filterActorUIDsToSetSlabThickness &&\n            filterActorUIDsToSetSlabThickness.length > 0) {\n            actorUIDs = filterActorUIDsToSetSlabThickness;\n        }\n        let blendModeToUse = this.configuration.slabThicknessBlendMode;\n        if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n            blendModeToUse = Enums.BlendModes.COMPOSITE;\n        }\n        const immediate = false;\n        viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n        viewport.setSlabThickness(slabThickness, actorUIDs);\n    }\n    _isClockWise(a, b, c) {\n        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        for (let i = 0; i < rotationPoints.length; i++) {\n            const point = rotationPoints[i][0];\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.ROTATE;\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { slabThicknessPoints } = data.handles;\n        for (let i = 0; i < slabThicknessPoints.length; i++) {\n            const point = slabThicknessPoints[i][0];\n            const otherViewport = slabThicknessPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.SLAB;\n                data.activeViewportIds = [otherViewport.id];\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        const { slabThicknessPoints } = data.handles;\n        const viewportIdArray = [];\n        for (let i = 0; i < rotationPoints.length - 1; ++i) {\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportControllable || !viewportDraggableRotatable) {\n                continue;\n            }\n            const lineSegment1 = {\n                start: {\n                    x: rotationPoints[i][2][0],\n                    y: rotationPoints[i][2][1],\n                },\n                end: {\n                    x: rotationPoints[i][3][0],\n                    y: rotationPoints[i][3][1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: rotationPoints[i + 1][2][0],\n                    y: rotationPoints[i + 1][2][1],\n                },\n                end: {\n                    x: rotationPoints[i + 1][3][0],\n                    y: rotationPoints[i + 1][3][1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = OPERATION.DRAG;\n            }\n            i++;\n        }\n        for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n            const otherViewport = slabThicknessPoints[i][1];\n            if (viewportIdArray.find((id) => id === otherViewport.id)) {\n                continue;\n            }\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const stPointLineCanvas1 = slabThicknessPoints[i][2];\n            const stPointLineCanvas2 = slabThicknessPoints[i][3];\n            const centerCanvas = vec2.create();\n            vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n            vec2.scale(centerCanvas, centerCanvas, 0.5);\n            const canvasUnitVectorFromCenter = vec2.create();\n            vec2.subtract(canvasUnitVectorFromCenter, stPointLineCanvas1, centerCanvas);\n            vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n            const canvasVectorFromCenterStart = vec2.create();\n            vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, canvasDiagonalLength * 0.05);\n            const stPointLineCanvas1Start = vec2.create();\n            const stPointLineCanvas2Start = vec2.create();\n            vec2.add(stPointLineCanvas1Start, centerCanvas, canvasVectorFromCenterStart);\n            vec2.subtract(stPointLineCanvas2Start, centerCanvas, canvasVectorFromCenterStart);\n            const lineSegment1 = {\n                start: {\n                    x: stPointLineCanvas1Start[0],\n                    y: stPointLineCanvas1Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas1[0],\n                    y: stPointLineCanvas1[1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: stPointLineCanvas2Start[0],\n                    y: stPointLineCanvas2Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas2[0],\n                    y: stPointLineCanvas2[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = null;\n            }\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n    }\n}\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\nimport { getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store/state';\nimport { Enums } from '@cornerstonejs/core';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\nclass MagnifyTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            magnifySize: 10,\n            magnifyWidth: 250,\n            magnifyHeight: 250,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._hasBeenRemoved = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('MagnifyTool only works on StackViewports');\n            }\n            const referencedImageId = this._getReferencedImageId(viewport);\n            if (!referencedImageId) {\n                throw new Error('MagnifyTool: No referenced image id found, reconstructed planes not supported yet');\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                referencedImageId,\n                viewportIdsToRender,\n                enabledElement,\n                renderingEngine,\n                currentPoints,\n            };\n            this._createMagnificationViewport();\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this.preTouchStartCallback = (evt) => {\n            this.preMouseDownCallback(evt);\n        };\n        this._createMagnificationViewport = () => {\n            const { enabledElement, referencedImageId, viewportIdsToRender, renderingEngine, currentPoints, } = this.editData;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportProperties = viewport.getProperties();\n            const { canvas: canvasPos, world: worldPos } = currentPoints;\n            let magnifyToolElement;\n            magnifyToolElement = element.querySelector('.magnifyTool');\n            if (magnifyToolElement === null) {\n                const magnifyElement = document.createElement('div');\n                magnifyElement.classList.add('magnifyTool');\n                magnifyElement.style.display = 'block';\n                magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n                magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n                magnifyElement.style.position = 'absolute';\n                magnifyToolElement = magnifyElement;\n                const viewportElement = element.querySelector('.viewport-element');\n                viewportElement.appendChild(magnifyElement);\n                const viewportInput = {\n                    viewportId: MAGNIFY_VIEWPORT_ID,\n                    type: Enums.ViewportType.STACK,\n                    element: magnifyToolElement,\n                };\n                renderingEngine.enableElement(viewportInput);\n            }\n            magnifyToolElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyToolElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            magnifyViewport.setStack([referencedImageId]).then(() => {\n                if (this._hasBeenRemoved) {\n                    return;\n                }\n                magnifyViewport.setProperties(viewportProperties);\n                const { parallelScale } = viewport.getCamera();\n                const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n                const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n                    Math.pow(focalPoint[1] - position[1], 2) +\n                    Math.pow(focalPoint[2] - position[2], 2));\n                const updatedFocalPoint = [\n                    worldPos[0],\n                    worldPos[1],\n                    worldPos[2],\n                ];\n                const updatedPosition = [\n                    updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n                    updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n                    updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n                ];\n                magnifyViewport.setCamera({\n                    parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n                    focalPoint: updatedFocalPoint,\n                    position: updatedPosition,\n                });\n                magnifyViewport.render();\n            });\n            magnifyToolElement.style.display = 'block';\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { deltaPoints, element, currentPoints } = eventDetail;\n            const deltaPointsWorld = deltaPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            const magnifyElement = element.querySelector('.magnifyTool');\n            if (!magnifyElement) {\n                return;\n            }\n            magnifyElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const { focalPoint, position } = magnifyViewport.getCamera();\n            const updatedPosition = [\n                position[0] + deltaPointsWorld[0],\n                position[1] + deltaPointsWorld[1],\n                position[2] + deltaPointsWorld[2],\n            ];\n            const updatedFocalPoint = [\n                focalPoint[0] + deltaPointsWorld[0],\n                focalPoint[1] + deltaPointsWorld[1],\n                focalPoint[2] + deltaPointsWorld[2],\n            ];\n            magnifyViewport.setCamera({\n                focalPoint: updatedFocalPoint,\n                position: updatedPosition,\n            });\n            magnifyViewport.render();\n        };\n        this._dragEndCallback = (evt) => {\n            const { element } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n            const viewportElement = element.querySelector('.viewport-element');\n            const magnifyToolElement = viewportElement.querySelector('.magnifyTool');\n            viewportElement.removeChild(magnifyToolElement);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this._hasBeenRemoved = true;\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            this._hasBeenRemoved = false;\n            element.addEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n    }\n    _getReferencedImageId(viewport) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId;\n        if (viewport instanceof StackViewport) {\n            referencedImageId = targetId.split('imageId:')[1];\n        }\n        return referencedImageId;\n    }\n}\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities as csUtils, eventTarget, Enums, getRenderingEngine, CONSTANTS, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events, MouseBindings, KeyboardBindings, Events as cstEvents, SegmentationRepresentations, ToolModes, } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nimport debounce from '../utilities/debounce';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { addSegmentationRepresentations } from '../stateManagement/segmentation';\nconst MAGNIFY_CLASSNAME = 'advancedMagnifyTool';\nconst MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;\nconst { Events: csEvents } = Enums;\nconst isSegmentation = (actor) => actor.uid !== actor.referencedId;\nvar AdvancedMagnifyToolActions;\n(function (AdvancedMagnifyToolActions) {\n    AdvancedMagnifyToolActions[\"ShowZoomFactorsList\"] = \"showZoomFactorsList\";\n})(AdvancedMagnifyToolActions || (AdvancedMagnifyToolActions = {}));\nconst ADVANCED_MAGNIFY_TOOL_NAME = 'AdvancedMagnify';\nconst PARALLEL_THRESHOLD = 1 - CONSTANTS.EPSILON;\nclass AdvancedMagnifyTool extends AnnotationTool {\n    static { this.Actions = AdvancedMagnifyToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            magnifyingGlass: {\n                radius: 125,\n                zoomFactor: 3,\n                zoomFactorList: [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],\n                autoPan: {\n                    enabled: true,\n                    padding: 10,\n                },\n            },\n            actions: {\n                showZoomFactorsList: {\n                    method: 'showZoomFactorsList',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Secondary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const { magnifyingGlass: config } = this.configuration;\n            const { radius, zoomFactor, autoPan } = config;\n            const canvasHandlePoints = this._getCanvasHandlePoints(canvasPos, radius);\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotationUID = csUtils.uuidv4();\n            const magnifyViewportId = csUtils.uuidv4();\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    sourceViewportId: viewport.id,\n                    magnifyViewportId,\n                    zoomFactor,\n                    isCanvasAnnotation: true,\n                    handles: {\n                        points: canvasHandlePoints,\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            this.magnifyViewportManager.createViewport(annotation, {\n                magnifyViewportId,\n                sourceEnabledElement: enabledElement,\n                position: canvasPos,\n                radius,\n                zoomFactor,\n                autoPan: {\n                    enabled: autoPan.enabled,\n                    padding: autoPan.padding,\n                    callback: (data) => {\n                        const annotationPoints = annotation.data.handles.points;\n                        const { canvas: canvasDelta } = data.delta;\n                        for (let i = 0, len = annotationPoints.length; i < len; i++) {\n                            const point = annotationPoints[i];\n                            point[0] += canvasDelta[0];\n                            point[1] += canvasDelta[1];\n                            annotation.invalidated = true;\n                        }\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.onSetToolDisabled = () => {\n            this.magnifyViewportManager.dispose();\n            const annotations = getAllAnnotations();\n            annotations.forEach((annotation) => {\n                if (annotation.metadata.toolName === this.getToolName()) {\n                    removeAnnotation(annotation.annotationUID);\n                }\n            });\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const center = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radiusPoint - radius) < proximity * 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            const { points } = data.handles;\n            const handleIndex = points.findIndex((p) => p === handle);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { deltaPoints } = eventDetail;\n            const canvasDelta = deltaPoints?.canvas ?? [0, 0, 0];\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { points } = annotation.data.handles;\n            points.forEach((point) => {\n                point[0] += canvasDelta[0];\n                point[1] += canvasDelta[1];\n            });\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const canvasDelta = deltaPoints.canvas;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += canvasDelta[0];\n                    point[1] += canvasDelta[1];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const canvasCenter = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const newRadius = getCanvasCircleRadius([\n                canvasCenter,\n                currentCanvasPoints,\n            ]);\n            const newCanvasHandlePoints = this._getCanvasHandlePoints(canvasCenter, newRadius);\n            points[0] = newCanvasHandlePoints[0];\n            points[1] = newCanvasHandlePoints[1];\n            points[2] = newCanvasHandlePoints[2];\n            points[3] = newCanvasHandlePoints[3];\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = annotations?.filter((annotation) => annotation.data.sourceViewportId ===\n                viewport.id);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!filteredAnnotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < filteredAnnotations.length; i++) {\n                const annotation = filteredAnnotations[i];\n                const { annotationUID, data } = annotation;\n                const { magnifyViewportId, zoomFactor, handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points;\n                const canvasTop = canvasCoordinates[0];\n                const canvasBottom = canvasCoordinates[2];\n                const canvasLeft = canvasCoordinates[3];\n                const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n                const center = [\n                    canvasLeft[0] + radius,\n                    canvasTop[1] + radius,\n                ];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-advancedMagnify`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineWidth: 5,\n                }, dataId);\n                const magnifyViewport = this.magnifyViewportManager.getViewport(magnifyViewportId);\n                magnifyViewport.position = center;\n                magnifyViewport.radius = radius;\n                magnifyViewport.zoomFactor = zoomFactor;\n                magnifyViewport.update();\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._getCanvasHandlePoints = (canvasCenterPos, canvasRadius) => {\n            return [\n                [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius, 0],\n                [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1], 0],\n                [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius, 0],\n                [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1], 0],\n            ];\n        };\n        this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n    }\n    showZoomFactorsList(evt, annotation) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvas: canvasPoint } = currentPoints;\n        const viewportElement = element.querySelector(':scope .viewport-element');\n        const currentZoomFactor = annotation.data.zoomFactor;\n        const remove = () => dropdown.parentElement.removeChild(dropdown);\n        const dropdown = this._getZoomFactorsListDropdown(currentZoomFactor, (newZoomFactor) => {\n            if (newZoomFactor !== undefined) {\n                annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n                annotation.invalidated = true;\n            }\n            remove();\n            viewport.render();\n        });\n        Object.assign(dropdown.style, {\n            left: `${canvasPoint[0]}px`,\n            top: `${canvasPoint[1]}px`,\n        });\n        viewportElement.appendChild(dropdown);\n        dropdown.focus();\n    }\n    _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n        const { zoomFactorList } = this.configuration.magnifyingGlass;\n        const dropdown = document.createElement('select');\n        dropdown.size = 5;\n        Object.assign(dropdown.style, {\n            width: '50px',\n            position: 'absolute',\n        });\n        ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n            dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n        });\n        dropdown.addEventListener('change', (evt) => {\n            evt.stopPropagation();\n            onChangeCallback(dropdown.value);\n        });\n        dropdown.addEventListener('keydown', (evt) => {\n            const shouldCancel = (evt.keyCode ?? evt.which === 27) ||\n                evt.key?.toLowerCase() === 'escape';\n            if (shouldCancel) {\n                evt.stopPropagation();\n                onChangeCallback();\n            }\n        });\n        zoomFactorList.forEach((zoomFactor) => {\n            const option = document.createElement('option');\n            option.label = zoomFactor;\n            option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n            option.value = zoomFactor;\n            option.defaultSelected = zoomFactor === currentZoomFactor;\n            dropdown.add(option);\n        });\n        return dropdown;\n    }\n}\nclass AdvancedMagnifyViewportManager {\n    constructor() {\n        this.createViewport = (annotation, viewportInfo) => {\n            const { magnifyViewportId, sourceEnabledElement, position, radius, zoomFactor, autoPan, } = viewportInfo;\n            const { viewport: sourceViewport } = sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            const magnifyViewport = new AdvancedMagnifyViewport({\n                magnifyViewportId,\n                sourceEnabledElement,\n                radius,\n                position,\n                zoomFactor,\n                autoPan,\n            });\n            this._addSourceElementEventListener(sourceElement);\n            this._magnifyViewportsMap.set(magnifyViewport.viewportId, {\n                annotation,\n                magnifyViewport,\n                magnifyViewportInfo: viewportInfo,\n            });\n            return magnifyViewport;\n        };\n        this._annotationRemovedCallback = (evt) => {\n            const { annotation } = evt.detail;\n            if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {\n                return;\n            }\n            this.destroyViewport(annotation.data.magnifyViewportId);\n        };\n        this._newStackImageCallback = (evt) => {\n            const { viewportId: sourceViewportId, imageId } = evt.detail;\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            const { viewport } = getEnabledElementByViewportId(sourceViewportId);\n            if (viewport.stackActorReInitialized) {\n                this._reset(sourceViewportId);\n            }\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                annotation.metadata.referencedImageId = imageId;\n                annotation.invalidated = true;\n            });\n        };\n        this._newVolumeImageCallback = (evt) => {\n            const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const sourceViewport = renderingEngine.getViewport(sourceViewportId);\n            const { viewPlaneNormal: currentViewPlaneNormal } = sourceViewport.getCamera();\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                const { viewPlaneNormal } = annotation.metadata;\n                const isParallel = Math.abs(vec3.dot(viewPlaneNormal, currentViewPlaneNormal)) >\n                    PARALLEL_THRESHOLD;\n                if (!isParallel) {\n                    return;\n                }\n                const { handles } = annotation.data;\n                const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);\n                const vecHandleToImagePlane = vec3.sub(vec3.create(), worldImagePlanePoint, handles.points[0]);\n                const worldDist = vec3.dot(vecHandleToImagePlane, currentViewPlaneNormal);\n                const worldDelta = vec3.scale(vec3.create(), currentViewPlaneNormal, worldDist);\n                for (let i = 0, len = handles.points.length; i < len; i++) {\n                    const point = handles.points[i];\n                    point[0] += worldDelta[0];\n                    point[1] += worldDelta[1];\n                    point[2] += worldDelta[2];\n                }\n                annotation.invalidated = true;\n            });\n        };\n        this._magnifyViewportsMap = new Map();\n        this._initialize();\n    }\n    static getInstance() {\n        AdvancedMagnifyViewportManager._singleton =\n            AdvancedMagnifyViewportManager._singleton ??\n                new AdvancedMagnifyViewportManager();\n        return AdvancedMagnifyViewportManager._singleton;\n    }\n    getViewport(magnifyViewportId) {\n        return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;\n    }\n    dispose() {\n        this._removeEventListeners();\n        this._destroyViewports();\n    }\n    destroyViewport(magnifyViewportId) {\n        const magnifyViewportMapEntry = this._magnifyViewportsMap.get(magnifyViewportId);\n        if (magnifyViewportMapEntry) {\n            const { magnifyViewport } = magnifyViewportMapEntry;\n            const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            this._removeSourceElementEventListener(sourceElement);\n            magnifyViewport.dispose();\n            this._magnifyViewportsMap.delete(magnifyViewportId);\n        }\n    }\n    _destroyViewports() {\n        const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());\n        magnifyViewportIds.forEach((magnifyViewportId) => this.destroyViewport(magnifyViewportId));\n    }\n    _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {\n        const magnifyViewportsMapEntries = Array.from(this._magnifyViewportsMap.values());\n        return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {\n            const { viewport } = magnifyViewport.sourceEnabledElement;\n            return viewport.id === sourceViewportId;\n        });\n    }\n    _reset(sourceViewportId) {\n        const magnifyViewports = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n        magnifyViewports.forEach(({ magnifyViewport, annotation, magnifyViewportInfo }) => {\n            this.destroyViewport(magnifyViewport.viewportId);\n            const newEnabledElement = getEnabledElementByViewportId(sourceViewportId);\n            this.createViewport(annotation, {\n                ...magnifyViewportInfo,\n                sourceEnabledElement: {\n                    ...newEnabledElement,\n                },\n            });\n        });\n    }\n    _addEventListeners() {\n        eventTarget.addEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _removeEventListeners() {\n        eventTarget.removeEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _addSourceElementEventListener(element) {\n        element.addEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        const newStackHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, newStackHandler);\n        const newVolumeHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, newVolumeHandler);\n        element.addEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.newStackHandler = newStackHandler;\n        element.newVolumeHandler = newVolumeHandler;\n    }\n    _removeSourceElementEventListener(element) {\n        element.removeEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        element.removeEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.removeEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, element.newStackHandler);\n        element.removeEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, element.newVolumeHandler);\n        delete element.newStackHandler;\n        delete element.newVolumeHandler;\n    }\n    _initialize() {\n        this._addEventListeners();\n    }\n}\nclass AdvancedMagnifyViewport {\n    constructor({ magnifyViewportId, sourceEnabledElement, radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS, position = [0, 0], zoomFactor, autoPan, }) {\n        this._enabledElement = null;\n        this._sourceToolGroup = null;\n        this._magnifyToolGroup = null;\n        this._isViewportReady = false;\n        this._radius = 0;\n        this._resized = false;\n        this._canAutoPan = false;\n        this._viewportId = magnifyViewportId ?? csUtils.uuidv4();\n        this._sourceEnabledElement = sourceEnabledElement;\n        this._autoPan = autoPan;\n        this.radius = radius;\n        this.position = position;\n        this.zoomFactor = zoomFactor;\n        this.visible = true;\n        this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);\n        this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);\n        this._handleToolModeChanged = this._handleToolModeChanged.bind(this);\n        this._mouseDragCallback = this._mouseDragCallback.bind(this);\n        this._resizeViewportAsync = (debounce(this._resizeViewport.bind(this), 1));\n        this._initialize();\n    }\n    get sourceEnabledElement() {\n        return this._sourceEnabledElement;\n    }\n    get viewportId() {\n        return this._viewportId;\n    }\n    get radius() {\n        return this._radius;\n    }\n    set radius(radius) {\n        if (Math.abs(this._radius - radius) > 0.00001) {\n            this._radius = radius;\n            this._resized = true;\n        }\n    }\n    update() {\n        const { radius, position, visible } = this;\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const size = 2 * radius;\n        const [x, y] = position;\n        if (this._resized) {\n            this._resizeViewportAsync();\n            this._resized = false;\n        }\n        Object.assign(element.style, {\n            display: visible ? 'block' : 'hidden',\n            width: `${size}px`,\n            height: `${size}px`,\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(${x}px, ${y}px)`,\n        });\n        if (this._isViewportReady) {\n            this._syncViewports();\n            viewport.render();\n        }\n    }\n    dispose() {\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const renderingEngine = viewport.getRenderingEngine();\n        this._removeEventListeners(element);\n        renderingEngine.disableElement(viewport.id);\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    _handleToolModeChanged(evt) {\n        const { _magnifyToolGroup: magnifyToolGroup } = this;\n        const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;\n        if (this._sourceToolGroup?.id !== toolGroupId) {\n            return;\n        }\n        switch (mode) {\n            case ToolModes.Active:\n                magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);\n                break;\n            case ToolModes.Passive:\n                magnifyToolGroup.setToolPassive(toolName);\n                break;\n            case ToolModes.Enabled:\n                magnifyToolGroup.setToolEnabled(toolName);\n                break;\n            case ToolModes.Disabled:\n                magnifyToolGroup.setToolDisabled(toolName);\n                break;\n            default:\n                throw new Error(`Unknow tool mode (${mode})`);\n        }\n    }\n    _inheritBorderRadius(magnifyElement) {\n        const viewport = magnifyElement.querySelector('.viewport-element');\n        const canvas = magnifyElement.querySelector('.cornerstone-canvas');\n        viewport.style.borderRadius = 'inherit';\n        canvas.style.borderRadius = 'inherit';\n    }\n    _createViewportNode() {\n        const magnifyElement = document.createElement('div');\n        const { radius } = this;\n        const size = radius * 2;\n        magnifyElement.classList.add(MAGNIFY_CLASSNAME);\n        Object.assign(magnifyElement.style, {\n            display: 'block',\n            width: `${size}px`,\n            height: `${size}px`,\n            position: 'absolute',\n            overflow: 'hidden',\n            borderRadius: '50%',\n            boxSizing: 'border-box',\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(-1000px, -1000px)`,\n        });\n        return magnifyElement;\n    }\n    _convertZoomFactorToParallelScale(viewport, magnifyViewport, zoomFactor) {\n        const { parallelScale } = viewport.getCamera();\n        const canvasRatio = magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;\n        return parallelScale * (1 / zoomFactor) * canvasRatio;\n    }\n    _isStackViewport(viewport) {\n        return 'setStack' in viewport;\n    }\n    _isVolumeViewport(viewport) {\n        return 'addVolumes' in viewport;\n    }\n    _cloneToolGroups(sourceViewport, magnifyViewport) {\n        const sourceActors = sourceViewport.getActors();\n        const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;\n        const sourceToolGroup = getToolGroupForViewport(sourceViewport.id, sourceViewport.renderingEngineId);\n        const magnifyToolGroup = sourceToolGroup.clone(magnifyToolGroupId, (toolName) => {\n            const toolInstance = sourceToolGroup.getToolInstance(toolName);\n            const isAnnotationTool = toolInstance instanceof AnnotationTool &&\n                !(toolInstance instanceof AdvancedMagnifyTool);\n            return isAnnotationTool;\n        });\n        magnifyToolGroup.addViewport(magnifyViewport.id, magnifyViewport.renderingEngineId);\n        sourceActors.filter(isSegmentation).forEach((actor) => {\n            addSegmentationRepresentations(this.viewportId, [\n                {\n                    segmentationId: actor.referencedId,\n                    type: SegmentationRepresentations.Labelmap,\n                },\n            ]);\n        });\n        return { sourceToolGroup, magnifyToolGroup };\n    }\n    _cloneStack(sourceViewport, magnifyViewport) {\n        const imageIds = sourceViewport.getImageIds();\n        magnifyViewport.setStack(imageIds).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n    }\n    _cloneVolumes(sourceViewport, magnifyViewport) {\n        const actors = sourceViewport.getActors();\n        const volumeInputArray = actors\n            .filter((actor) => !isSegmentation(actor))\n            .map((actor) => ({ volumeId: actor.uid }));\n        magnifyViewport.setVolumes(volumeInputArray).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n        return magnifyViewport;\n    }\n    _cloneViewport(sourceViewport, magnifyElement) {\n        const { viewportId: magnifyViewportId } = this;\n        const renderingEngine = sourceViewport.getRenderingEngine();\n        const { options: sourceViewportOptions } = sourceViewport;\n        const viewportInput = {\n            element: magnifyElement,\n            viewportId: magnifyViewportId,\n            type: sourceViewport.type,\n            defaultOptions: { ...sourceViewportOptions },\n        };\n        renderingEngine.enableElement(viewportInput);\n        const magnifyViewport = (renderingEngine.getViewport(magnifyViewportId));\n        if (this._isStackViewport(sourceViewport)) {\n            this._cloneStack(sourceViewport, magnifyViewport);\n        }\n        else if (this._isVolumeViewport(sourceViewport)) {\n            this._cloneVolumes(sourceViewport, magnifyViewport);\n        }\n        this._inheritBorderRadius(magnifyElement);\n        const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);\n        this._sourceToolGroup = toolGroups.sourceToolGroup;\n        this._magnifyToolGroup = toolGroups.magnifyToolGroup;\n    }\n    _cancelMouseEventCallback(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n    _browserMouseUpCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _browserMouseDownCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        this._canAutoPan = !!evt.target?.closest('.advancedMagnifyTool');\n        document.addEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _mouseDragCallback(evt) {\n        if (!state.isInteractingWithTool) {\n            return;\n        }\n        const { _autoPan: autoPan } = this;\n        if (!autoPan.enabled || !this._canAutoPan) {\n            return;\n        }\n        const { currentPoints } = evt.detail;\n        const { viewport } = this._enabledElement;\n        const { canvasToWorld } = viewport;\n        const { canvas: canvasCurrent } = currentPoints;\n        const { radius: magnifyRadius } = this;\n        const canvasCenter = [magnifyRadius, magnifyRadius];\n        const dist = distanceToPoint(canvasCenter, canvasCurrent);\n        const maxDist = magnifyRadius - autoPan.padding;\n        if (dist <= maxDist) {\n            return;\n        }\n        const panDist = dist - maxDist;\n        const canvasDeltaPos = vec2.sub(vec2.create(), canvasCurrent, canvasCenter);\n        vec2.normalize(canvasDeltaPos, canvasDeltaPos);\n        vec2.scale(canvasDeltaPos, canvasDeltaPos, panDist);\n        const newCanvasPosition = vec2.add(vec2.create(), this.position, canvasDeltaPos);\n        const currentWorldPos = canvasToWorld(this.position);\n        const newWorldPos = canvasToWorld(newCanvasPosition);\n        const worldDeltaPos = vec3.sub(vec3.create(), newWorldPos, currentWorldPos);\n        const autoPanCallbackData = {\n            points: {\n                currentPosition: {\n                    canvas: this.position,\n                    world: currentWorldPos,\n                },\n                newPosition: {\n                    canvas: newCanvasPosition,\n                    world: newWorldPos,\n                },\n            },\n            delta: {\n                canvas: canvasDeltaPos,\n                world: worldDeltaPos,\n            },\n        };\n        autoPan.callback(autoPanCallbackData);\n    }\n    _addBrowserEventListeners(element) {\n        document.addEventListener('mousedown', this._browserMouseDownCallback, true);\n        element.addEventListener('mousedown', this._cancelMouseEventCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n        element.addEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _removeBrowserEventListeners(element) {\n        document.removeEventListener('mousedown', this._browserMouseDownCallback, true);\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mousedown', this._cancelMouseEventCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n        element.removeEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _addEventListeners(element) {\n        eventTarget.addEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._addBrowserEventListeners(element);\n    }\n    _removeEventListeners(element) {\n        eventTarget.removeEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._removeBrowserEventListeners(element);\n    }\n    _initialize() {\n        const { _sourceEnabledElement: sourceEnabledElement } = this;\n        const { viewport: sourceViewport } = sourceEnabledElement;\n        const { canvas: sourceCanvas } = sourceViewport;\n        const magnifyElement = this._createViewportNode();\n        sourceCanvas.parentNode.appendChild(magnifyElement);\n        this._addEventListeners(magnifyElement);\n        this._cloneViewport(sourceViewport, magnifyElement);\n        this._enabledElement = getEnabledElement(magnifyElement);\n    }\n    _syncViewportsCameras(sourceViewport, magnifyViewport) {\n        const worldPos = sourceViewport.canvasToWorld(this.position);\n        const parallelScale = this._convertZoomFactorToParallelScale(sourceViewport, magnifyViewport, this.zoomFactor);\n        const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n        const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n            Math.pow(focalPoint[1] - position[1], 2) +\n            Math.pow(focalPoint[2] - position[2], 2));\n        const updatedFocalPoint = [\n            worldPos[0],\n            worldPos[1],\n            worldPos[2],\n        ];\n        const updatedPosition = [\n            updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n            updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n            updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n        ];\n        magnifyViewport.setCamera({\n            parallelScale,\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n    }\n    _syncStackViewports(sourceViewport, magnifyViewport) {\n        magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());\n    }\n    _syncViewports() {\n        const { viewport: sourceViewport } = this._sourceEnabledElement;\n        const { viewport: magnifyViewport } = this._enabledElement;\n        const sourceProperties = sourceViewport.getProperties();\n        const imageData = magnifyViewport.getImageData();\n        if (!imageData) {\n            return;\n        }\n        magnifyViewport.setProperties(sourceProperties);\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        if (this._isStackViewport(sourceViewport)) {\n            this._syncStackViewports(sourceViewport, magnifyViewport);\n        }\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        magnifyViewport.render();\n    }\n    _resizeViewport() {\n        const { viewport } = this._enabledElement;\n        const renderingEngine = viewport.getRenderingEngine();\n        renderingEngine.resize();\n    }\n}\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\nexport { AdvancedMagnifyTool as default };\n","import { vec3 } from 'gl-matrix';\nimport { getRenderingEngines, CONSTANTS, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass ReferenceLines extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceViewportId: '',\n            enforceSameFrameOfReference: true,\n            showFullDimension: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            let viewports = renderingEngine.getViewports();\n            viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n            const sourceViewport = renderingEngine.getViewport(this.configuration.sourceViewportId);\n            if (!sourceViewport?.getImageData()) {\n                return;\n            }\n            const { element } = sourceViewport;\n            const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n            const sourceViewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(sourceViewport);\n            let annotation = this.editData?.annotation;\n            const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n            if (!annotation) {\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        viewPlaneNormal: [...viewPlaneNormal],\n                        viewUp: [...viewUp],\n                        FrameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        handles: {\n                            points: sourceViewportCanvasCornersInWorld,\n                        },\n                    },\n                };\n                addAnnotation(newAnnotation, element);\n                annotation = newAnnotation;\n            }\n            else {\n                this.editData.annotation.data.handles.points =\n                    sourceViewportCanvasCornersInWorld;\n            }\n            this.editData = {\n                sourceViewportId: sourceViewport.id,\n                renderingEngine,\n                annotation,\n            };\n            triggerAnnotationRenderForViewportIds(viewports\n                .filter((viewport) => viewport.id !== sourceViewport.id)\n                .map((viewport) => viewport.id));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolConfiguration = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport: targetViewport } = enabledElement;\n            if (!this.editData) {\n                return false;\n            }\n            const { annotation, sourceViewportId } = this.editData;\n            let renderStatus = false;\n            const { viewport: sourceViewport } = getEnabledElementByViewportId(sourceViewportId) || {};\n            if (!sourceViewport) {\n                return renderStatus;\n            }\n            if (sourceViewport.id === targetViewport.id) {\n                return renderStatus;\n            }\n            if (!annotation || !annotation?.data?.handles?.points) {\n                return renderStatus;\n            }\n            if (this.configuration.enforceSameFrameOfReference &&\n                sourceViewport.getFrameOfReferenceUID() !==\n                    targetViewport.getFrameOfReferenceUID()) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const topLeft = annotation.data.handles.points[0];\n            const topRight = annotation.data.handles.points[1];\n            const bottomLeft = annotation.data.handles.points[2];\n            const bottomRight = annotation.data.handles.points[3];\n            const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n            const { viewPlaneNormal: sourceViewPlaneNormal } = sourceViewport.getCamera();\n            if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            let pointSetToUse = pointSet1;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const newNormal = vec3.cross(vec3.create(), topBottomVec, topRightVec);\n            if (this.isParallel(newNormal, viewPlaneNormal)) {\n                return renderStatus;\n            }\n            if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                pointSetToUse = pointSet2;\n            }\n            const lineStartWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n            const lineEndWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n            const { annotationUID } = annotation;\n            styleSpecifier.annotationUID = annotationUID;\n            const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n            const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n            const color = this.getStyle('color', styleSpecifier, annotation);\n            const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n            let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n            if (this.configuration.showFullDimension) {\n                canvasCoordinates = this.handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates);\n            }\n            if (canvasCoordinates.length < 2) {\n                return renderStatus;\n            }\n            const dataId = `${annotationUID}-line`;\n            const lineUID = '1';\n            drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, dataId);\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates) {\n        const renderingEngine = targetViewport.getRenderingEngine();\n        const targetId = this.getTargetId(targetViewport);\n        const targetImage = this.getTargetImageData(targetId);\n        const referencedImageId = this.getReferencedImageId(targetViewport, lineStartWorld, viewPlaneNormal, viewUp);\n        if (referencedImageId && targetImage) {\n            try {\n                const { imageData, dimensions } = targetImage;\n                const [topLeftImageCoord, topRightImageCoord, bottomRightImageCoord, bottomLeftImageCoord,] = [\n                    imageData.indexToWorld([0, 0, 0]),\n                    imageData.indexToWorld([dimensions[0] - 1, 0, 0]),\n                    imageData.indexToWorld([\n                        dimensions[0] - 1,\n                        dimensions[1] - 1,\n                        0,\n                    ]),\n                    imageData.indexToWorld([0, dimensions[1] - 1, 0]),\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                const [lineStartImageCoord, lineEndImageCoord] = [\n                    lineStartWorld,\n                    lineEndWorld,\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                canvasCoordinates = [\n                    [topLeftImageCoord, topRightImageCoord],\n                    [topRightImageCoord, bottomRightImageCoord],\n                    [bottomLeftImageCoord, bottomRightImageCoord],\n                    [topLeftImageCoord, bottomLeftImageCoord],\n                ]\n                    .map(([start, end]) => this.intersectInfiniteLines(start, end, lineStartImageCoord, lineEndImageCoord))\n                    .filter((point) => point && this.isInBound(point, dimensions))\n                    .map((point) => {\n                    const world = csUtils.imageToWorldCoords(referencedImageId, point);\n                    return targetViewport.worldToCanvas(world);\n                });\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n        return canvasCoordinates;\n    }\n    intersectInfiniteLines(line1Start, line1End, line2Start, line2End) {\n        const [x1, y1] = line1Start;\n        const [x2, y2] = line1End;\n        const [x3, y3] = line2Start;\n        const [x4, y4] = line2End;\n        const a1 = y2 - y1;\n        const b1 = x1 - x2;\n        const c1 = x2 * y1 - x1 * y2;\n        const a2 = y4 - y3;\n        const b2 = x3 - x4;\n        const c2 = x4 * y3 - x3 * y4;\n        if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n            return;\n        }\n        const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n        const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n        return [x, y];\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    isInBound(point, dimensions) {\n        return (point[0] >= 0 &&\n            point[0] <= dimensions[0] &&\n            point[1] >= 0 &&\n            point[1] <= dimensions[1]);\n    }\n}\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import { vec3 } from 'gl-matrix';\nimport { metaData, CONSTANTS, getRenderingEngine, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass OverlayGridTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceImageIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolActive = () => {\n            this._init();\n        };\n        this._init = () => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            if (!sourceImageIds?.length) {\n                console.warn('OverlayGridTool: No sourceImageIds provided in configuration');\n                return;\n            }\n            const imagePlaneModule = metaData.get('imagePlaneModule', sourceImageIds[0]);\n            if (!imagePlaneModule) {\n                console.warn('OverlayGridTool: No imagePlaneModule found for sourceImageIds');\n                return;\n            }\n            const { frameOfReferenceUID } = imagePlaneModule;\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn('OverlayGridTool: No viewports found');\n                return;\n            }\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const pointSets = sourceImageIds.map((id) => {\n                    return this.calculateImageIdPointSets(id);\n                });\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        viewportData: new Map(),\n                        pointSets,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.calculateImageIdPointSets = (imageId) => {\n            const { imagePositionPatient, rows, columns, rowCosines, columnCosines, rowPixelSpacing, columnPixelSpacing, } = metaData.get('imagePlaneModule', imageId);\n            const topLeft = [...imagePositionPatient];\n            const topRight = [...imagePositionPatient];\n            const bottomLeft = [...imagePositionPatient];\n            const bottomRight = [...imagePositionPatient];\n            vec3.scaleAndAdd(topRight, imagePositionPatient, columnCosines, columns * columnPixelSpacing);\n            vec3.scaleAndAdd(bottomLeft, imagePositionPatient, rowCosines, rows * rowPixelSpacing);\n            vec3.scaleAndAdd(bottomRight, bottomLeft, columnCosines, columns * columnPixelSpacing);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            return { pointSet1, pointSet2 };\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            let renderStatus = false;\n            if (!sourceImageIds?.length) {\n                return renderStatus;\n            }\n            const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n            const targetImageIds = targetViewport.getImageIds();\n            if (targetImageIds.length < 2) {\n                return renderStatus;\n            }\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const imageIdNormal = (this.getImageIdNormal(sourceImageIds[0]));\n            if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSets = annotation.data.pointSets;\n            const viewportData = annotation.data.viewportData;\n            for (let i = 0; i < sourceImageIds.length; i++) {\n                const { pointSet1, pointSet2 } = pointSets[i];\n                const targetData = viewportData.get(targetViewport.id) ||\n                    this.initializeViewportData(viewportData, targetViewport.id);\n                if (!targetData.pointSetsToUse[i]) {\n                    let pointSetToUse = pointSet1;\n                    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n                    topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n                    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                        pointSetToUse = pointSet2;\n                    }\n                    targetData.pointSetsToUse[i] = pointSetToUse;\n                    targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n                    targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n                }\n                const lineStartWorld = targetData.lineStartsWorld[i];\n                const lineEndWorld = targetData.lineEndsWorld[i];\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n                const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n                const dataId = `${annotationUID}-line`;\n                const lineUID = `${i}`;\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n            }\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.initializeViewportData = (viewportData, id) => {\n            viewportData.set(id, {\n                pointSetsToUse: [],\n                lineStartsWorld: [],\n                lineEndsWorld: [],\n            });\n            return viewportData.get(id);\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    getImageIdNormal(imageId) {\n        const { imageOrientationPatient } = metaData.get('imagePlaneModule', imageId);\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n    }\n}\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawPath } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            opacity: 0.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._init = () => {\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn(this.getToolName() + 'Tool: No viewports found');\n                return;\n            }\n            const firstViewport = getRenderingEngine(viewportsInfo[0].renderingEngineId)?.getViewport(viewportsInfo[0].viewportId);\n            if (!firstViewport) {\n                return;\n            }\n            const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const actorsWorldPointsMap = new Map();\n                calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo);\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        actorsWorldPointsMap,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            let renderStatus = false;\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const actorsWorldPointsMap = annotation.data.actorsWorldPointsMap;\n            calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n            const actorEntries = viewport.getActors();\n            const cacheId = getCacheId(viewport);\n            actorEntries.forEach((actorEntry) => {\n                if (!actorEntry?.clippingFilter) {\n                    return;\n                }\n                const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n                if (!actorWorldPointMap) {\n                    return;\n                }\n                if (!actorWorldPointMap.get(cacheId)) {\n                    return;\n                }\n                let polyLineIdx = 1;\n                const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n                for (let i = 0; i < worldPointsSet.length; i++) {\n                    const worldPoints = worldPointsSet[i];\n                    const canvasPoints = worldPoints.map((point) => viewport.worldToCanvas(point));\n                    const options = {\n                        color: color,\n                        fillColor: color,\n                        fillOpacity: this.configuration.opacity,\n                        closePath: true,\n                        lineWidth: 2,\n                    };\n                    const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n                    drawPath(svgDrawingHelper, annotationUID, polyLineUID, canvasPoints, options);\n                    polyLineIdx++;\n                }\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nfunction calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n    });\n}\nfunction calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport) {\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n    actorEntries.forEach((actorEntry) => {\n        if (!actorEntry?.clippingFilter) {\n            return;\n        }\n        let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n        if (!actorWorldPointsMap) {\n            actorWorldPointsMap = new Map();\n            actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n        }\n        if (!actorWorldPointsMap.get(cacheId)) {\n            const polyData = actorEntry.clippingFilter.getOutputData();\n            const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n            if (!worldPointsSet) {\n                return;\n            }\n            const colorArray = actorEntry.actor.getProperty().getColor();\n            const color = colorToString(colorArray);\n            actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n        }\n    });\n}\nfunction getCacheId(viewport) {\n    const { viewPlaneNormal } = viewport.getCamera();\n    const imageIndex = viewport.getCurrentImageIdIndex();\n    return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\nfunction colorToString(colorArray) {\n    function colorComponentToString(component) {\n        let componentString = Math.floor(component * 255).toString(16);\n        if (componentString.length === 1) {\n            componentString = '0' + componentString;\n        }\n        return componentString;\n    }\n    return ('#' +\n        colorComponentToString(colorArray[0]) +\n        colorComponentToString(colorArray[1]) +\n        colorComponentToString(colorArray[2]));\n}\nfunction removeExtraPoints(viewport, worldPointsSet) {\n    return worldPointsSet.map((worldPoints) => {\n        const canvasPoints = worldPoints.map((point) => {\n            const canvasPoint = viewport.worldToCanvas(point);\n            return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n        });\n        let lastPoint;\n        const newWorldPoints = [];\n        let newCanvasPoints = [];\n        for (let i = 0; i < worldPoints.length; i++) {\n            if (lastPoint) {\n                if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n                    newWorldPoints.push(worldPoints[i]);\n                    newCanvasPoints.push(canvasPoints[i]);\n                }\n            }\n            lastPoint = canvasPoints[i];\n        }\n        const firstPoint = newCanvasPoints[0];\n        for (let j = Math.min(30, newCanvasPoints.length); j < newCanvasPoints.length; j++) {\n            if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n                newCanvasPoints = newCanvasPoints.slice(0, j);\n                return newWorldPoints.slice(0, j);\n            }\n        }\n        return newWorldPoints;\n    });\n}\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","import { getEnabledElement, StackViewport, VolumeViewport, utilities, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass ReferenceCursors extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            displayThreshold: 5,\n            positionSync: true,\n            disableCursor: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isHandleOutsideImage = false;\n        this._elementWithCursor = null;\n        this._currentCursorWorldPosition = null;\n        this._currentCanvasPosition = null;\n        this._disableCursorEnabled = false;\n        this.mouseMoveCallback = (evt) => {\n            const { detail } = evt;\n            const { element, currentPoints } = detail;\n            this._currentCursorWorldPosition = currentPoints.world;\n            this._currentCanvasPosition = currentPoints.canvas;\n            this._elementWithCursor = element;\n            const annotation = this.getActiveAnnotation(element);\n            if (annotation === null) {\n                this.createInitialAnnotation(currentPoints.world, element);\n                return false;\n            }\n            this.updateAnnotationPosition(element, annotation);\n            return false;\n        };\n        this.createInitialAnnotation = (worldPos, element) => {\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('No enabled element found');\n            }\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            if (!viewPlaneNormal || !viewUp) {\n                throw new Error('Camera not found');\n            }\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                },\n            };\n            const annotations = getAnnotations(this.getToolName(), element);\n            if (annotations.length > 0) {\n                return null;\n            }\n            const annotationId = addAnnotation(annotation, element);\n            if (annotationId === null) {\n                return;\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, previousCamera, camera } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const viewport = enabledElement.viewport;\n            if (element !== this._elementWithCursor) {\n                return;\n            }\n            const oldFocalPoint = previousCamera.focalPoint;\n            const cameraNormal = camera.viewPlaneNormal;\n            const newFocalPoint = camera.focalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n            if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n                return;\n            }\n            const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n            if (Math.abs(dotProduct) < 1e-2) {\n                return;\n            }\n            if (!this._currentCanvasPosition) {\n                return;\n            }\n            const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n            this._currentCursorWorldPosition = newWorldPos;\n            this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            const isElementWithCursor = this._elementWithCursor === viewport.element;\n            if (this.configuration.positionSync && !isElementWithCursor) {\n                this.updateViewportImage(viewport);\n            }\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                if (!annotationUID) {\n                    return renderStatus;\n                }\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidthBase = parseFloat(this.getStyle('lineWidth', styleSpecifier, annotation));\n                const lineWidth = typeof lineWidthBase === 'number' && isElementWithCursor\n                    ? lineWidthBase\n                    : lineWidthBase;\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (points[0].some((e) => isNaN(e))) {\n                    return renderStatus;\n                }\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const crosshairUIDs = {\n                    upper: 'upper',\n                    right: 'right',\n                    lower: 'lower',\n                    left: 'left',\n                };\n                const [x, y] = canvasCoordinates[0];\n                const centerSpace = isElementWithCursor ? 20 : 7;\n                const lineLength = isElementWithCursor ? 5 : 7;\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.upper, [x, y - (centerSpace / 2 + lineLength)], [x, y - centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.lower, [x, y + (centerSpace / 2 + lineLength)], [x, y + centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.right, [x + (centerSpace / 2 + lineLength), y], [x + centerSpace / 2, y], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.left, [x - (centerSpace / 2 + lineLength), y], [x - centerSpace / 2, y], { color, lineDash, lineWidth });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._disableCursorEnabled = this.configuration.disableCursor;\n    }\n    onSetToolActive() {\n        this._disableCursorEnabled = this.configuration.disableCursor;\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                hideElementCursor(element.viewport.element);\n            }\n        });\n    }\n    onSetToolDisabled() {\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                resetElementCursor(element.viewport.element);\n            }\n        });\n    }\n    getActiveAnnotation(element) {\n        const annotations = getAnnotations(this.getToolName(), element);\n        if (!annotations.length) {\n            return null;\n        }\n        const targetAnnotation = annotations[0];\n        return targetAnnotation;\n    }\n    updateAnnotationPosition(element, annotation) {\n        const worldPos = this._currentCursorWorldPosition;\n        if (!worldPos) {\n            return;\n        }\n        if (!annotation.data?.handles?.points) {\n            return;\n        }\n        annotation.data.handles.points = [[...worldPos]];\n        annotation.invalidated = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!(annotations instanceof Array) || annotations.length === 0) {\n            return [];\n        }\n        const annotation = annotations[0];\n        const viewport = getEnabledElement(element)?.viewport;\n        if (!viewport) {\n            return [];\n        }\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, focalPoint } = camera;\n        if (!viewPlaneNormal || !focalPoint) {\n            return [];\n        }\n        const points = annotation.data?.handles?.points;\n        if (!(points instanceof Array) || points.length !== 1) {\n            return [];\n        }\n        const worldPos = points[0];\n        const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n        const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n        return distance < this.configuration.displayThreshold ? [annotation] : [];\n    }\n    updateViewportImage(viewport) {\n        const currentMousePosition = this._currentCursorWorldPosition;\n        if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n            return;\n        }\n        if (viewport instanceof StackViewport) {\n            const closestIndex = utilities.getClosestStackImageIndexForPoint(currentMousePosition, viewport);\n            if (closestIndex === null) {\n                return;\n            }\n            if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n                viewport.setImageIdIndex(closestIndex);\n            }\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n            if (!focalPoint || !viewPlaneNormal) {\n                return;\n            }\n            const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const currentDistance = utilities.planar.planeDistanceToPoint(plane, currentMousePosition, true);\n            if (Math.abs(currentDistance) < 0.5) {\n                return;\n            }\n            const normalizedViewPlane = vec3.normalize(vec3.create(), vec3.fromValues(...viewPlaneNormal));\n            const scaledPlaneNormal = vec3.scale(vec3.create(), normalizedViewPlane, currentDistance);\n            const newFocalPoint = vec3.add(vec3.create(), vec3.fromValues(...focalPoint), scaledPlaneNormal);\n            const isInBounds = true;\n            if (isInBounds) {\n                viewport.setCamera({ focalPoint: newFocalPoint });\n                const renderingEngine = viewport.getRenderingEngine();\n                if (renderingEngine) {\n                    renderingEngine.renderViewport(viewport.id);\n                }\n            }\n        }\n    }\n}\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport { getEnabledElementByIds, getRenderingEngines, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg, drawTextBox as drawTextBoxSvg, } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nconst viewportsWithAnnotations = [];\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            viewportId: '',\n            scaleLocation: 'bottom',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportIds) {\n                return;\n            }\n            const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n            let { viewport } = enabledElements[0];\n            const { FrameOfReferenceUID } = enabledElements[0];\n            if (this.configuration.viewportId) {\n                enabledElements.forEach((element) => {\n                    if (element.viewport.id == this.configuration.viewportId) {\n                        viewport = element.viewport;\n                    }\n                });\n            }\n            if (!viewport) {\n                return;\n            }\n            const { viewUp, viewPlaneNormal } = viewport.getCamera();\n            const viewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(viewport);\n            let annotation = this.editData.annotation;\n            const annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (annotations.length) {\n                annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n            }\n            enabledElements.forEach((element) => {\n                const { viewport } = element;\n                if (!viewportsWithAnnotations.includes(viewport.id)) {\n                    const newAnnotation = {\n                        metadata: {\n                            toolName: this.getToolName(),\n                            viewPlaneNormal: [...viewPlaneNormal],\n                            viewUp: [...viewUp],\n                            FrameOfReferenceUID,\n                            referencedImageId: null,\n                        },\n                        data: {\n                            handles: {\n                                points: csUtils.getViewportImageCornersInWorld(viewport),\n                            },\n                            viewportId: viewport.id,\n                        },\n                    };\n                    viewportsWithAnnotations.push(viewport.id);\n                    addAnnotation(newAnnotation, viewport.element);\n                    annotation = newAnnotation;\n                }\n            });\n            if (this.editData.annotation &&\n                this.editData.annotation.data.viewportId == viewport.id) {\n                this.editData.annotation.data.handles.points =\n                    viewportCanvasCornersInWorld;\n                this.editData.annotation.data.viewportId = viewport.id;\n            }\n            this.editData = {\n                viewport,\n                renderingEngine,\n                annotation,\n            };\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this.configuration.viewportId = evt.detail.viewportId;\n            this._init();\n        };\n        this.computeScaleSize = (worldWidthViewport, worldHeightViewport, location) => {\n            const scaleSizes = [\n                16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n            ];\n            let currentScaleSize;\n            if (location == 'top' || location == 'bottom') {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldWidthViewport * 0.6 &&\n                    scaleSize > worldWidthViewport * 0.2);\n            }\n            else {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldHeightViewport * 0.6 &&\n                    scaleSize > worldHeightViewport * 0.2);\n            }\n            return currentScaleSize[0];\n        };\n        this.computeEndScaleTicks = (canvasCoordinates, location) => {\n            const locationTickOffset = {\n                bottom: [\n                    [0, -10],\n                    [0, -10],\n                ],\n                top: [\n                    [0, 10],\n                    [0, 10],\n                ],\n                left: [\n                    [0, 0],\n                    [10, 0],\n                ],\n                right: [\n                    [0, 0],\n                    [-10, 0],\n                ],\n            };\n            const endTick1 = [\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            const endTick2 = [\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            return {\n                endTick1: endTick1,\n                endTick2: endTick2,\n            };\n        };\n        this.computeInnerScaleTicks = (scaleSize, location, annotationUID, leftTick, rightTick) => {\n            let canvasScaleSize;\n            if (location == 'bottom' || location == 'top') {\n                canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n            }\n            else if (location == 'left' || location == 'right') {\n                canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n            }\n            const tickIds = [];\n            const tickUIDs = [];\n            const tickCoordinates = [];\n            let numberSmallTicks = scaleSize;\n            if (scaleSize >= 50) {\n                numberSmallTicks = scaleSize / 10;\n            }\n            const tickSpacing = canvasScaleSize / numberSmallTicks;\n            for (let i = 0; i < numberSmallTicks - 1; i++) {\n                const locationOffset = {\n                    bottom: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), 5],\n                    ],\n                    top: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), -5],\n                    ],\n                    left: [\n                        [0, tickSpacing * (i + 1)],\n                        [-5, tickSpacing * (i + 1)],\n                    ],\n                    right: [\n                        [0, tickSpacing * (i + 1)],\n                        [5, tickSpacing * (i + 1)],\n                    ],\n                };\n                tickIds.push(`${annotationUID}-tick${i}`);\n                tickUIDs.push(`tick${i}`);\n                if ((i + 1) % 5 == 0) {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][0][0],\n                            leftTick[1][1] + locationOffset[location][0][1],\n                        ],\n                    ]);\n                }\n                else {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][1][0],\n                            leftTick[1][1] + locationOffset[location][1][1],\n                        ],\n                    ]);\n                }\n            }\n            return { tickIds, tickUIDs, tickCoordinates };\n        };\n        this.computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n            let worldCoordinates;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const midpointLocation = {\n                bottom: [pointSet[1], pointSet[2]],\n                top: [pointSet[0], pointSet[3]],\n                right: [pointSet[2], pointSet[3]],\n                left: [pointSet[0], pointSet[1]],\n            };\n            const midpoint = vec3\n                .add(vec3.create(), midpointLocation[location][0], midpointLocation[location][0])\n                .map((i) => i / 2);\n            const offset = scaleSize /\n                2 /\n                Math.sqrt(Math.pow(topBottomVec[0], 2) +\n                    Math.pow(topBottomVec[1], 2) +\n                    Math.pow(topBottomVec[2], 2));\n            if (location == 'top' || location == 'bottom') {\n                worldCoordinates = [\n                    vec3.subtract(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                    vec3.add(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                worldCoordinates = [\n                    vec3.add(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                    vec3.subtract(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                ];\n            }\n            return worldCoordinates;\n        };\n        this.computeCanvasScaleCoordinates = (canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location) => {\n            let scaleCanvasCoordinates;\n            if (location == 'top' || location == 'bottom') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][0] - canvasCoordinates[1][0];\n                scaleCanvasCoordinates = [\n                    [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n                    [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][1] - canvasCoordinates[1][1];\n                scaleCanvasCoordinates = [\n                    [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n                    [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n                ];\n            }\n            return scaleCanvasCoordinates;\n        };\n        this.computeScaleBounds = (canvasSize, horizontalReduction, verticalReduction, location) => {\n            const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n            const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n            const locationBounds = {\n                bottom: [-vReduction, -hReduction],\n                top: [vReduction, hReduction],\n                left: [vReduction, hReduction],\n                right: [-vReduction, -hReduction],\n            };\n            const canvasBounds = {\n                bottom: [canvasSize.height, canvasSize.width],\n                top: [0, canvasSize.width],\n                left: [canvasSize.height, 0],\n                right: [canvasSize.height, canvasSize.width],\n            };\n            return {\n                height: canvasBounds[location][0] + locationBounds[location][0],\n                width: canvasBounds[location][1] + locationBounds[location][1],\n            };\n        };\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.editData.viewport) {\n            return;\n        }\n        const location = this.configuration.scaleLocation;\n        const { viewport } = enabledElement;\n        const annotations = getAnnotations(this.getToolName(), viewport.element);\n        const annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n        const canvas = enabledElement.viewport.canvas;\n        const renderStatus = false;\n        if (!viewport) {\n            return renderStatus;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        const canvasSize = {\n            width: canvas.width / window.devicePixelRatio || 1,\n            height: canvas.height / window.devicePixelRatio || 1,\n        };\n        const topLeft = annotation.data.handles.points[0];\n        const topRight = annotation.data.handles.points[1];\n        const bottomLeft = annotation.data.handles.points[2];\n        const bottomRight = annotation.data.handles.points[3];\n        const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n        const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n        const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n        const hscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const vscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const scaleSize = this.computeScaleSize(worldWidthViewport, worldHeightViewport, location);\n        const canvasCoordinates = this.computeWorldScaleCoordinates(scaleSize, location, pointSet1).map((world) => viewport.worldToCanvas(world));\n        const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location);\n        const scaleTicks = this.computeEndScaleTicks(scaleCanvasCoordinates, location);\n        const { annotationUID } = annotation;\n        styleSpecifier.annotationUID = annotationUID;\n        const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n        const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n        const color = this.getStyle('color', styleSpecifier, annotation);\n        const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n        const scaleId = `${annotationUID}-scaleline`;\n        const scaleLineUID = '1';\n        drawLineSvg(svgDrawingHelper, annotationUID, scaleLineUID, scaleCanvasCoordinates[0], scaleCanvasCoordinates[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, scaleId);\n        const leftTickId = `${annotationUID}-left`;\n        const leftTickUID = '2';\n        drawLineSvg(svgDrawingHelper, annotationUID, leftTickUID, scaleTicks.endTick1[0], scaleTicks.endTick1[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, leftTickId);\n        const rightTickId = `${annotationUID}-right`;\n        const rightTickUID = '3';\n        drawLineSvg(svgDrawingHelper, annotationUID, rightTickUID, scaleTicks.endTick2[0], scaleTicks.endTick2[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, rightTickId);\n        const locationTextOffest = {\n            bottom: [-10, -42],\n            top: [-12, -35],\n            left: [-40, -20],\n            right: [-50, -20],\n        };\n        const textCanvasCoordinates = [\n            scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n            scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n        ];\n        const textBoxLines = this._getTextLines(scaleSize);\n        const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(scaleSize, location, annotationUID, scaleTicks.endTick1, scaleTicks.endTick2);\n        for (let i = 0; i < tickUIDs.length; i++) {\n            drawLineSvg(svgDrawingHelper, annotationUID, tickUIDs[i], tickCoordinates[i][0], tickCoordinates[i][1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, tickIds[i]);\n        }\n        const textUID = 'text0';\n        drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textBoxLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], {\n            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            fontSize: '14px',\n            lineDash: '2,3',\n            lineWidth: '1',\n            shadow: true,\n            color: color,\n        });\n        return renderStatus;\n    }\n    _getTextLines(scaleSize) {\n        let scaleSizeDisplayValue;\n        let scaleSizeUnits;\n        if (scaleSize >= 50) {\n            scaleSizeDisplayValue = scaleSize / 10;\n            scaleSizeUnits = ' cm';\n        }\n        else {\n            scaleSizeDisplayValue = scaleSize;\n            scaleSizeUnits = ' mm';\n        }\n        const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n        return textLines;\n    }\n}\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { getAnnotations } from '../stateManagement';\nimport { point } from '../utilities/math';\nimport { Events, ToolModes, AnnotationStyleStates } from '../enums';\nimport { triggerAnnotationRenderForViewportIds } from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nimport { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport CircleSculptCursor from './SculptorTool/CircleSculptCursor';\nimport { distancePointToContour } from './distancePointToContour';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass SculptorTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minSpacing: 1,\n            referencedToolNames: [\n                'PlanarFreehandROI',\n                'PlanarFreehandContourSegmentationTool',\n            ],\n            toolShape: 'circle',\n            referencedToolName: 'PlanarFreehandROI',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.registeredShapes = new Map();\n        this.isActive = false;\n        this.commonData = {\n            activeAnnotationUID: null,\n            viewportIdsToRender: [],\n            isEditingOpenContour: false,\n            canvasLocation: undefined,\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.configureToolSize(evt);\n            this.selectFreehandTool(eventData);\n            if (this.commonData.activeAnnotationUID === null) {\n                return;\n            }\n            this.isActive = true;\n            hideElementCursor(element);\n            this.activateModify(element);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.configureToolSize(evt);\n                this.updateCursor(evt);\n            }\n            else {\n                this.commonData.canvasLocation = undefined;\n            }\n        };\n        this.endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const config = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            this.isActive = false;\n            this.deactivateModify(element);\n            resetElementCursor(element);\n            const { renderingEngineId, viewportId } = enabledElement;\n            const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n            const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (toolInstance.configuration.calculateStats) {\n                activeAnnotation.invalidated = true;\n            }\n            triggerAnnotationModified(activeAnnotation, element);\n        };\n        this.dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.updateCursor(evt);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (!annotations?.length || !this.isActive) {\n                return;\n            }\n            const points = activeAnnotation.data.contour.polyline;\n            this.sculpt(eventData, points);\n        };\n        this.registerShapes(CircleSculptCursor.shapeName, CircleSculptCursor);\n        this.setToolShape(this.configuration.toolShape);\n    }\n    registerShapes(shapeName, shapeClass) {\n        const shape = new shapeClass();\n        this.registeredShapes.set(shapeName, shape);\n    }\n    sculpt(eventData, points) {\n        const config = this.configuration;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        this.sculptData = {\n            mousePoint: eventData.currentPoints.world,\n            mouseCanvasPoint: eventData.currentPoints.canvas,\n            points,\n            maxSpacing: cursorShape.getMaxSpacing(config.minSpacing),\n            element: element,\n        };\n        const pushedHandles = cursorShape.pushHandles(viewport, this.sculptData);\n        if (pushedHandles.first !== undefined) {\n            this.insertNewHandles(pushedHandles);\n        }\n    }\n    interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing) {\n        const { element } = this.sculptData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const nextHandleIndex = contourIndex(i + 1, points.length);\n        const currentCanvasPoint = viewport.worldToCanvas(points[i]);\n        const nextCanvasPoint = viewport.worldToCanvas(points[nextHandleIndex]);\n        const distanceToNextHandle = point.distanceToPoint(currentCanvasPoint, nextCanvasPoint);\n        if (distanceToNextHandle > maxSpacing) {\n            indicesToInsertAfter.push(i);\n        }\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine, viewport } = enabledElement;\n        this.commonData.viewportIdsToRender = [viewport.id];\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n        this.commonData.canvasLocation = eventData.currentPoints.canvas;\n        if (this.isActive) {\n            activeAnnotation.highlighted = true;\n        }\n        else {\n            const cursorShape = this.registeredShapes.get(this.selectedShape);\n            const canvasCoords = eventData.currentPoints.canvas;\n            cursorShape.updateToolSize(canvasCoords, viewport, activeAnnotation);\n        }\n        triggerAnnotationRenderForViewportIds(this.commonData.viewportIdsToRender);\n    }\n    filterSculptableAnnotationsForElement(element) {\n        const config = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const sculptableAnnotations = [];\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n        config.referencedToolNames.forEach((referencedToolName) => {\n            const annotations = getAnnotations(referencedToolName, element);\n            if (annotations) {\n                sculptableAnnotations.push(...annotations);\n            }\n        });\n        return toolInstance.filterInteractableAnnotationsForElement(element, sculptableAnnotations);\n    }\n    configureToolSize(evt) {\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.configureToolSize(evt);\n    }\n    insertNewHandles(pushedHandles) {\n        const indicesToInsertAfter = this.findNewHandleIndices(pushedHandles);\n        let newIndexModifier = 0;\n        for (let i = 0; i < indicesToInsertAfter?.length; i++) {\n            const insertIndex = indicesToInsertAfter[i] + 1 + newIndexModifier;\n            this.insertHandleRadially(insertIndex);\n            newIndexModifier++;\n        }\n    }\n    findNewHandleIndices(pushedHandles) {\n        const { points, maxSpacing } = this.sculptData;\n        const indicesToInsertAfter = [];\n        for (let i = pushedHandles.first; i <= pushedHandles.last; i++) {\n            this.interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing);\n        }\n        return indicesToInsertAfter;\n    }\n    insertHandleRadially(insertIndex) {\n        const { points } = this.sculptData;\n        if (insertIndex > points.length - 1 &&\n            this.commonData.isEditingOpenContour) {\n            return;\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        const previousIndex = insertIndex - 1;\n        const nextIndex = contourIndex(insertIndex, points.length);\n        const insertPosition = cursorShape.getInsertPosition(previousIndex, nextIndex, this.sculptData);\n        const handleData = insertPosition;\n        points.splice(insertIndex, 0, handleData);\n    }\n    selectFreehandTool(eventData) {\n        const closestAnnotationUID = this.getClosestFreehandToolOnElement(eventData);\n        if (closestAnnotationUID === undefined) {\n            return;\n        }\n        this.commonData.activeAnnotationUID = closestAnnotationUID;\n    }\n    getClosestFreehandToolOnElement(eventData) {\n        const { element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const config = this.configuration;\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const canvasPoints = eventData.currentPoints.canvas;\n        const closest = {\n            distance: Infinity,\n            toolIndex: undefined,\n            annotationUID: undefined,\n        };\n        for (let i = 0; i < annotations?.length; i++) {\n            if (annotations[i].isLocked || !annotations[i].isVisible) {\n                continue;\n            }\n            const distanceFromTool = distancePointToContour(viewport, annotations[i], canvasPoints);\n            if (distanceFromTool === -1) {\n                continue;\n            }\n            if (distanceFromTool < closest.distance) {\n                closest.distance = distanceFromTool;\n                closest.toolIndex = i;\n                closest.annotationUID = annotations[i].annotationUID;\n            }\n        }\n        this.commonData.isEditingOpenContour =\n            !annotations[closest.toolIndex].data.contour.closed;\n        config.referencedToolName =\n            annotations[closest.toolIndex].metadata.toolName;\n        return closest.annotationUID;\n    }\n    activateModify(element) {\n        element.addEventListener(Events.MOUSE_UP, this.endCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.addEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.addEventListener(Events.TOUCH_END, this.endCallback);\n        element.addEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    deactivateModify(element) {\n        element.removeEventListener(Events.MOUSE_UP, this.endCallback);\n        element.removeEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.removeEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.removeEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.removeEventListener(Events.TOUCH_END, this.endCallback);\n        element.removeEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    setToolShape(toolShape) {\n        this.selectedShape =\n            this.registeredShapes.get(toolShape) ?? CircleSculptCursor.shapeName;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const viewportIdsToRender = this.commonData.viewportIdsToRender;\n        if (!this.commonData.canvasLocation ||\n            this.mode !== ToolModes.Active ||\n            !viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        let color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Default, this.mode);\n        if (this.isActive) {\n            color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Highlighted, this.mode);\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.renderShape(svgDrawingHelper, this.commonData.canvasLocation, {\n            color,\n        });\n    }\n}\nexport const contourIndex = (i, length) => {\n    return (i + length) % length;\n};\nSculptorTool.toolName = 'SculptorTool';\nexport default SculptorTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nconst DIRECTIONS = {\n    X: [1, 0, 0],\n    Y: [0, 1, 0],\n    Z: [0, 0, 1],\n    CUSTOM: [],\n};\nclass VolumeRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            direction: DIRECTIONS.Z,\n            rotateIncrementDegrees: 30,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseWheelCallback(evt) {\n        const { element, wheel } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { direction, rotateIncrementDegrees } = this.configuration;\n        const camera = viewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n        const { direction: deltaY } = wheel;\n        const [cx, cy, cz] = focalPoint;\n        const [ax, ay, az] = direction;\n        const angle = (deltaY * (rotateIncrementDegrees * Math.PI)) / 180;\n        const newPosition = [0, 0, 0];\n        const newFocalPoint = [0, 0, 0];\n        const newViewUp = [0, 0, 0];\n        const transform = mat4.identity(new Float32Array(16));\n        mat4.translate(transform, transform, [cx, cy, cz]);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        mat4.translate(transform, transform, [-cx, -cy, -cz]);\n        vec3.transformMat4(newPosition, position, transform);\n        vec3.transformMat4(newFocalPoint, focalPoint, transform);\n        mat4.identity(transform);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        vec3.transformMat4(newViewUp, viewUp, transform);\n        viewport.setCamera({\n            position: newPosition,\n            viewUp: newViewUp,\n            focalPoint: newFocalPoint,\n        });\n        viewport.render();\n    }\n}\nVolumeRotateTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass LengthTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const length = this._calculateLength(worldPos1, worldPos2) / scale;\n            this._isInsideVolume(index1, index2, dimensions)\n                ? (this.isHandleOutsideImage = false)\n                : (this.isHandleOutsideImage = true);\n            cachedStats[targetId] = {\n                length,\n                unit,\n            };\n        }\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, element);\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { length, unit } = cachedVolumeStats;\n    if (length === undefined || length === null || isNaN(length)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(length)} ${unit}`];\n    return textLines;\n}\nLengthTool.toolName = 'Length';\nexport default LengthTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawHeight as drawHeightSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass HeightTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const enabledElement = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const heightUID = '0';\n                drawHeightSvg(svgDrawingHelper, annotationUID, heightUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash: lineDash,\n                });\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateHeight(pos1, pos2) {\n        const dx = pos2[0] - pos1[0];\n        const dy = pos2[1] - pos1[1];\n        const dz = pos2[2] - pos1[2];\n        if (dx == 0) {\n            if (dy != 0) {\n                return Math.abs(dz);\n            }\n            else {\n                return 0;\n            }\n        }\n        else if (dy == 0) {\n            return Math.abs(dz);\n        }\n        else if (dz == 0) {\n            return Math.abs(dy);\n        }\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const height = this._calculateHeight(worldPos1, worldPos2) / scale;\n            const outside = this._isInsideVolume(index1, index2, dimensions);\n            this.isHandleOutsideImage = outside;\n            cachedStats[targetId] = {\n                height,\n                unit,\n            };\n        }\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, element);\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { height, unit } = cachedVolumeStats;\n    if (height === undefined || height === null || isNaN(height)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(height)} ${unit}`];\n    return textLines;\n}\nHeightTool.toolName = 'Height';\nexport default HeightTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nconst { transformWorldToIndex } = csUtils;\nclass ProbeTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: { points: [[...worldPos]] },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const annotationUID = annotation.annotationUID;\n                const data = annotation.data;\n                const point = data.handles.points[0];\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                styleSpecifier.annotationUID = annotationUID;\n                const { color } = this.getAnnotationStyle({ annotation, styleSpecifier });\n                if (!data.cachedStats) {\n                    data.cachedStats = {};\n                }\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].value == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        index: null,\n                        value: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const handleGroupUID = '0';\n                drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (textLines) {\n                    const textCanvasCoordinates = [\n                        canvasCoordinates[0] + 6,\n                        canvasCoordinates[1] - 6,\n                    ];\n                    const textUID = '0';\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], options);\n                }\n            }\n            return renderStatus;\n        };\n    }\n    isPointNearTool() {\n        return false;\n    }\n    toolSelectedCallback() { }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        const near = vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n        if (near === true) {\n            return point;\n        }\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { renderingEngineId, viewport } = enabledElement;\n        const { element } = viewport;\n        const worldPos = data.handles.points[0];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const pixelUnitsOptions = {\n                isPreScaled: isViewportPreScaled(viewport, targetId),\n                isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n            };\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { dimensions, imageData, metadata, voxelManager } = image;\n            const modality = metadata.Modality;\n            let ijk = transformWorldToIndex(imageData, worldPos);\n            ijk = vec3.round(ijk, ijk);\n            if (csUtils.indexWithinDimensions(ijk, dimensions)) {\n                this.isHandleOutsideImage = false;\n                let value = voxelManager.getAtIJKPoint(ijk);\n                if (targetId.startsWith('imageId:')) {\n                    const imageId = targetId.split('imageId:')[1];\n                    const imageURI = csUtils.imageIdToURI(imageId);\n                    const viewports = csUtils.getViewportsWithImageURI(imageURI);\n                    const viewport = viewports[0];\n                    ijk[2] = viewport.getCurrentImageIdIndex();\n                }\n                let modalityUnit;\n                if (modality === 'US') {\n                    const calibratedResults = getCalibratedProbeUnitsAndValue(image, [\n                        ijk,\n                    ]);\n                    const hasEnhancedRegionValues = calibratedResults.values.every((value) => value !== null);\n                    value = (hasEnhancedRegionValues ? calibratedResults.values : value);\n                    modalityUnit = hasEnhancedRegionValues\n                        ? calibratedResults.units\n                        : 'raw';\n                }\n                else {\n                    modalityUnit = getPixelValueUnits(modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                }\n                cachedStats[targetId] = {\n                    index: ijk,\n                    value,\n                    Modality: modality,\n                    modalityUnit,\n                };\n            }\n            else {\n                this.isHandleOutsideImage = true;\n                cachedStats[targetId] = {\n                    index: ijk,\n                    Modality: modality,\n                };\n            }\n            annotation.invalidated = false;\n            triggerAnnotationModified(annotation, element);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    if (value instanceof Array && modalityUnit instanceof Array) {\n        for (let i = 0; i < value.length; i++) {\n            textLines.push(`${csUtils.roundNumber(value[i])} ${modalityUnit[i]}`);\n        }\n    }\n    else {\n        textLines.push(`${csUtils.roundNumber(value)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nProbeTool.toolName = 'Probe';\nexport default ProbeTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nclass DragProbeTool extends ProbeTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.postMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                isVisible: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: { points: [[...worldPos]] },\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.postTouchStartCallback = (evt) => {\n            return this.postMouseDownCallback(evt);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const annotations = this.filterInteractableAnnotationsForElement(viewport.element, [this.editData.annotation]);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const annotation = this.editData.annotation;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const point = data.handles.points[0];\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            styleSpecifier.annotationUID = annotationUID;\n            const { color } = this.getAnnotationStyle({\n                annotation,\n                styleSpecifier,\n            });\n            if (!data.cachedStats[targetId] ||\n                data.cachedStats[targetId].value == null) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    index: null,\n                    value: null,\n                };\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });\n            renderStatus = true;\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (textLines) {\n                const textCanvasCoordinates = [\n                    canvasCoordinates[0] + 6,\n                    canvasCoordinates[1] - 6,\n                ];\n                const textUID = '0';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));\n            }\n            return renderStatus;\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n    return textLines;\n}\nDragProbeTool.toolName = 'DragProbe';\nexport default DragProbeTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawEllipseByCoordinates as drawEllipseSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { pointInEllipse, getCanvasEllipseCorners, } from '../../utilities/math/ellipse';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nconst { transformWorldToIndex } = csUtils;\nclass EllipticalROITool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    initialRotation: viewport.getRotation(),\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                centerWorld: worldPos,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCorners = getCanvasEllipseCorners(canvasCoordinates);\n            const [canvasPoint1, canvasPoint2] = canvasCorners;\n            const minorEllipse = {\n                left: Math.min(canvasPoint1[0], canvasPoint2[0]) + proximity / 2,\n                top: Math.min(canvasPoint1[1], canvasPoint2[1]) + proximity / 2,\n                width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) - proximity,\n                height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) - proximity,\n            };\n            const majorEllipse = {\n                left: Math.min(canvasPoint1[0], canvasPoint2[0]) - proximity / 2,\n                top: Math.min(canvasPoint1[1], canvasPoint2[1]) - proximity / 2,\n                width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) + proximity,\n                height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) + proximity,\n            };\n            const pointInMinorEllipse = this._pointInEllipseCanvas(minorEllipse, canvasCoords);\n            const pointInMajorEllipse = this._pointInEllipseCanvas(majorEllipse, canvasCoords);\n            if (pointInMajorEllipse && !pointInMinorEllipse) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            let centerCanvas;\n            let centerWorld;\n            let canvasWidth;\n            let canvasHeight;\n            let originalHandleCanvas;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                const { viewport } = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = viewport;\n                handleIndex = points.findIndex((p) => p === handle);\n                const pointsCanvas = points.map(worldToCanvas);\n                originalHandleCanvas = pointsCanvas[handleIndex];\n                canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n                canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n                centerCanvas = [\n                    (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n                    (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n                ];\n                centerWorld = canvasToWorld(centerCanvas);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                canvasWidth,\n                canvasHeight,\n                centerWorld,\n                originalHandleCanvas,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerWorld } = this.editData;\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const bottomCanvas = [centerCanvas[0], centerCanvas[1] - dY];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] + dY];\n            const leftCanvas = [centerCanvas[0] - dX, centerCanvas[1]];\n            const rightCanvas = [centerCanvas[0] + dX, centerCanvas[1]];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = viewport;\n            const { annotation, canvasWidth, canvasHeight, handleIndex, centerWorld, originalHandleCanvas, } = this.editData;\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0 || handleIndex === 1) {\n                const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - dYCanvas,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n                const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n                const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n                const canvasLeft = [\n                    centerCanvas[0] - newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n            }\n            else {\n                const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n                const canvasLeft = [\n                    centerCanvas[0] - dXCanvas,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + dXCanvas,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n                const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n                const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - newHalfCanvasHeight,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + newHalfCanvasHeight,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasCorners = (getCanvasEllipseCorners(canvasCoordinates));\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-ellipse`;\n                const ellipseUID = '0';\n                drawEllipseSvg(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    const minRadius = Math.min(Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2);\n                    if (minRadius > 3 * centerPointRadius) {\n                        const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${ellipseUID}-center`, centerPoint, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine) => {\n            const data = annotation.data;\n            const { element } = viewport;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasEllipseCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const post2Index = transformWorldToIndex(imageData, worldPos2);\n                post2Index[0] = Math.floor(post2Index[0]);\n                post2Index[1] = Math.floor(post2Index[1]);\n                post2Index[2] = Math.floor(post2Index[2]);\n                this.isHandleOutsideImage = !this._isInsideVolume(pos1Index, post2Index, dimensions);\n                const iMin = Math.min(pos1Index[0], post2Index[0]);\n                const iMax = Math.max(pos1Index[0], post2Index[0]);\n                const jMin = Math.min(pos1Index[1], post2Index[1]);\n                const jMax = Math.max(pos1Index[1], post2Index[1]);\n                const kMin = Math.min(pos1Index[2], post2Index[2]);\n                const kMax = Math.max(pos1Index[2], post2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = [\n                    (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                    (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                    (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                ];\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                const handles = [pos1Index, post2Index];\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                const area = Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n                    scale /\n                    scale;\n                const pixelUnitsOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    boundsIJK,\n                    imageData,\n                    isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                    returnPoints: this.configuration.storePointData,\n                });\n                const stats = this.configuration.statsCalculator.getStatistics();\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    mean: stats.mean?.value,\n                    max: stats.max?.value,\n                    stdDev: stats.stdDev?.value,\n                    statsArray: stats.array,\n                    pointsInShape,\n                    isEmptyArea,\n                    areaUnit,\n                    modalityUnit,\n                };\n            }\n            annotation.invalidated = false;\n            triggerAnnotationModified(annotation, element);\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    _pointInEllipseCanvas(ellipse, location) {\n        const xRadius = ellipse.width / 2;\n        const yRadius = ellipse.height / 2;\n        if (xRadius <= 0.0 || yRadius <= 0.0) {\n            return false;\n        }\n        const center = [ellipse.left + xRadius, ellipse.top + yRadius];\n        const normalized = [location[0] - center[0], location[1] - center[1]];\n        const inEllipse = (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n            (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n            1.0;\n        return inEllipse;\n    }\n    _getCanvasEllipseCenter(ellipseCanvasPoints) {\n        const [bottom, top, left, right] = ellipseCanvasPoints;\n        const topLeft = [left[0], top[1]];\n        const bottomRight = [right[0], bottom[1]];\n        return [\n            (topLeft[0] + bottomRight[0]) / 2,\n            (topLeft[1] + bottomRight[1]) / 2,\n        ];\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (mean) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (max) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (stdDev) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nEllipticalROITool.toolName = 'EllipticalROI';\nexport default EllipticalROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getCalibratedAspect, getCalibratedLengthUnitsAndScale, } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROITool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const radius = getCanvasCircleRadius(canvasCoordinates);\n            const radiusPoint = getCanvasCircleRadius([\n                canvasCoordinates[0],\n                canvasCoords,\n            ]);\n            if (Math.abs(radiusPoint - radius) < proximity / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            data.handles.points = [\n                data.handles.points[0],\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0) {\n                const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n                const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n                const canvasCenter = currentCanvasPoints;\n                const canvasEnd = [\n                    canvasCoordinates[1][0] + dXCanvas,\n                    canvasCoordinates[1][1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasCenter);\n                points[1] = canvasToWorld(canvasEnd);\n            }\n            else {\n                points[1] = canvasToWorld(currentCanvasPoints);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius(canvasCoordinates);\n                const canvasCorners = getCanvasCircleCorners(canvasCoordinates);\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                        radius: null,\n                        radiusUnit: null,\n                        perimeter: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-circle`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            const data = annotation.data;\n            const { element } = viewport;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const center = [\n                        (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                        (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                        (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                    ];\n                    const ellipseObj = {\n                        center,\n                        xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                        yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                        zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                    };\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const aspect = getCalibratedAspect(image);\n                    const area = Math.abs(Math.PI *\n                        (worldWidth / scale / 2) *\n                        (worldHeight / aspect / scale / 2));\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                        isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                        boundsIJK,\n                        imageData,\n                        returnPoints: this.configuration.storePointData,\n                    });\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        max: stats.max?.value,\n                        stdDev: stats.stdDev?.value,\n                        statsArray: stats.array,\n                        pointsInShape: pointsInShape,\n                        isEmptyArea,\n                        areaUnit,\n                        radius: worldWidth / 2 / scale,\n                        radiusUnit: unit,\n                        perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            annotation.invalidated = false;\n            triggerAnnotationModified(annotation, element);\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { radius, radiusUnit, area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit, } = cachedVolumeStats;\n    const textLines = [];\n    if (radius) {\n        const radiusLine = isEmptyArea\n            ? `Radius: Oblique not supported`\n            : `Radius: ${csUtils.roundNumber(radius)} ${radiusUnit}`;\n        textLines.push(radiusLine);\n    }\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (mean) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (max) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (stdDev) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nCircleROITool.toolName = 'CircleROI';\nexport default CircleROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawLine } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../../utilities/math/circle';\nimport { vec3 } from 'gl-matrix';\nconst CROSSHAIR_SIZE = 5;\nclass ETDRSGridTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            degrees: [45, 135, 225, 315],\n            diameters: [10, 30, 60],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                    },\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const center = viewport.worldToCanvas(points[0]);\n            const radius = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radius) < proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            data.handles.points = [\n                canvasToWorld(currentCanvasPoints),\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { deltaPoints } = eventDetail;\n            const worldPosDelta = deltaPoints.world;\n            const points = data.handles.points;\n            points.forEach((point) => {\n                point[0] += worldPosDelta[0];\n                point[1] += worldPosDelta[1];\n                point[2] += worldPosDelta[2];\n            });\n            annotation.invalidated = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n            const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n            const canvasCenter = currentCanvasPoints;\n            const canvasEnd = [\n                canvasCoordinates[1][0] + dXCanvas,\n                canvasCoordinates[1][1] + dYCanvas,\n            ];\n            points[0] = canvasToWorld(canvasCenter);\n            points[1] = canvasToWorld(canvasEnd);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const { renderingEngine } = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                let lineUID = `${annotationUID}-crosshair-vertical`;\n                let start = [center[0], center[1] + CROSSHAIR_SIZE];\n                let end = [center[0], center[1] - CROSSHAIR_SIZE];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                lineUID = `${annotationUID}-crosshair-horizontal`;\n                start = [center[0] + CROSSHAIR_SIZE, center[1]];\n                end = [center[0] - CROSSHAIR_SIZE, center[1]];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                const diametersCanvas = this.configuration.diameters.map((diameter) => this.worldMeasureToCanvas(diameter, viewport));\n                for (let i = 0; i < diametersCanvas.length; i++) {\n                    const dataId = `${annotationUID}-circle-${i}`;\n                    const circleUID = `${annotationUID}-circle-${i}`;\n                    drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, diametersCanvas[i] / 2, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    }, dataId);\n                }\n                const degreesRad = (x) => (x * Math.PI) / 180;\n                const angleRadians = this.configuration.degrees.map((degree) => degreesRad(degree));\n                for (let i = 0; i < angleRadians.length; i++) {\n                    const lineUID = `${annotationUID}-line-${i}`;\n                    const start = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[0]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[0]) / 2 + center[1],\n                    ];\n                    const end = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[2]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[2]) / 2 + center[1],\n                    ];\n                    drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n    worldMeasureToCanvas(measurement, viewport) {\n        const p1 = viewport.canvasToWorld([\n            viewport.canvas.width / 2,\n            viewport.canvas.height / 2,\n        ]);\n        const { viewUp } = viewport.getCamera();\n        const p2 = vec3.scaleAndAdd(vec3.create(), p1, viewUp, measurement);\n        const p1Canvas = viewport.worldToCanvas(p1);\n        const p2Canvas = viewport.worldToCanvas(p2);\n        const distance = Math.sqrt(Math.pow(p2Canvas[0] - p1Canvas[0], 2) +\n            Math.pow(p2Canvas[1] - p1Canvas[1], 2));\n        return distance;\n    }\n}\nETDRSGridTool.toolName = 'ETDRSGrid';\nexport default ETDRSGridTool;\n","import { getEnabledElement, eventTarget, triggerEvent, utilities, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getChildAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawPolyline as drawPolylineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, MouseBindings, KeyboardBindings, ChangeTypes, } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport * as math from '../../utilities/math';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { CardinalSpline } from './splines/CardinalSpline';\nimport { LinearSpline } from './splines/LinearSpline';\nimport { CatmullRomSpline } from './splines/CatmullRomSpline';\nimport { BSpline } from './splines/BSpline';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\nconst SPLINE_MIN_POINTS = 3;\nconst SPLINE_CLICK_CLOSE_CURVE_DIST = 10;\nconst DEFAULT_SPLINE_CONFIG = {\n    resolution: 20,\n    controlPointAdditionDistance: 6,\n    controlPointDeletionDistance: 6,\n    showControlPointsConnectors: false,\n    controlPointAdditionEnabled: true,\n    controlPointDeletionEnabled: true,\n};\nvar SplineTypesEnum;\n(function (SplineTypesEnum) {\n    SplineTypesEnum[\"Cardinal\"] = \"CARDINAL\";\n    SplineTypesEnum[\"Linear\"] = \"LINEAR\";\n    SplineTypesEnum[\"CatmullRom\"] = \"CATMULLROM\";\n    SplineTypesEnum[\"BSpline\"] = \"BSPLINE\";\n})(SplineTypesEnum || (SplineTypesEnum = {}));\nvar SplineToolActions;\n(function (SplineToolActions) {\n    SplineToolActions[\"AddControlPoint\"] = \"addControlPoint\";\n    SplineToolActions[\"DeleteControlPoint\"] = \"deleteControlPoint\";\n})(SplineToolActions || (SplineToolActions = {}));\nclass SplineROITool extends ContourSegmentationBaseTool {\n    static { this.SplineTypes = SplineTypesEnum; }\n    static { this.Actions = SplineToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            spline: {\n                configuration: {\n                    [SplineTypesEnum.Cardinal]: {\n                        Class: CardinalSpline,\n                        scale: 0.5,\n                    },\n                    [SplineTypesEnum.CatmullRom]: {\n                        Class: CatmullRomSpline,\n                    },\n                    [SplineTypesEnum.Linear]: {\n                        Class: LinearSpline,\n                    },\n                    [SplineTypesEnum.BSpline]: {\n                        Class: BSpline,\n                        controlPointAdditionEnabled: false,\n                        controlPointDeletionEnabled: false,\n                        showControlPointsConnectors: true,\n                    },\n                },\n                type: SplineTypesEnum.CatmullRom,\n                drawPreviewEnabled: true,\n                lastControlPointDeletionKeys: ['Backspace', 'Delete'],\n            },\n            actions: {\n                [SplineToolActions.AddControlPoint]: {\n                    method: 'addControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n                [SplineToolActions.DeleteControlPoint]: {\n                    method: 'deleteControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Ctrl,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.fireChangeOnUpdate = null;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { instance: spline } = annotation.data.spline;\n            return spline.isPointNearCurve(canvasCoords, proximity);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            annotation.autoGenerated = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const image = this.getTargetImageData(this.getTargetId(enabledElement.viewport));\n            const { imageData, dimensions } = image;\n            this.isHandleOutsideImage = data.handles.points\n                .map((p) => utilities.transformWorldToIndex(imageData, p))\n                .some((index) => !utilities.indexWithinDimensions(index, dimensions));\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            if (!this.fireChangeOnUpdate) {\n                this.fireChangeOnUpdate = {\n                    annotationUID: annotation.annotationUID,\n                    changeType,\n                    contourHoleProcessingEnabled,\n                };\n            }\n            else {\n                this.fireChangeOnUpdate.annotationUID = annotation.annotationUID;\n                this.fireChangeOnUpdate.changeType = changeType;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._keyDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const key = eventDetail.key ?? '';\n            const { lastControlPointDeletionKeys } = this.configuration.spline;\n            const deleteLastPoint = lastControlPointDeletionKeys.includes(key);\n            if (!deleteLastPoint) {\n                return;\n            }\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length === SPLINE_MIN_POINTS) {\n                this.cancel(element);\n                return;\n            }\n            else {\n                const controlPointIndex = data.handles.points.length - 1;\n                this._deleteControlPointByIndex(element, annotation, controlPointIndex);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { drawPreviewEnabled } = this.configuration.spline;\n            if (!drawPreviewEnabled) {\n                return;\n            }\n            const { element } = evt.detail;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            if (data.contour.closed) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const { canvas: canvasPoint, world: worldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            let closeContour = data.handles.points.length >= 2 && doubleClick;\n            let addNewPoint = true;\n            if (data.handles.points.length >= 3) {\n                const { instance: spline } = data.spline;\n                const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                if (closestControlPoint?.index === 0) {\n                    addNewPoint = false;\n                    closeContour = true;\n                }\n            }\n            if (addNewPoint) {\n                data.handles.points.push(worldPoint);\n            }\n            data.contour.closed = data.contour.closed || closeContour;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (data.contour.closed) {\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                this.moveAnnotation(annotation, worldPosDelta);\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.triggerAnnotationCompleted = (annotation, contourHoleProcessingEnabled) => {\n            const eventType = Events.ANNOTATION_COMPLETED;\n            const eventDetail = {\n                annotation,\n                changeType: ChangeTypes.Completed,\n                contourHoleProcessingEnabled,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled) => {\n            if (changeType === ChangeTypes.Completed) {\n                this.triggerAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                this.triggerAnnotationModified(annotation, enabledElement, changeType);\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.spline.instance.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.addControlPointCallback = (evt, annotation) => {\n            const { data } = annotation;\n            const splineType = data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointAdditionDistance;\n            if (splineConfig.controlPointAdditionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { instance: spline } = data.spline;\n            const canvasPos = evt.detail.currentPoints.canvas;\n            const closestPointInfo = spline.getClosestPoint(canvasPos);\n            if (closestPointInfo.distance > maxDist) {\n                return;\n            }\n            const { index, point: canvasPoint } = spline.addControlPointAtU(closestPointInfo.uValue);\n            data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));\n            annotation.invalidated = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.deleteControlPointCallback = (evt, annotation) => {\n            const splineType = annotation.data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointDeletionDistance;\n            if (splineConfig.controlPointDeletionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { canvas: canvasPos } = currentPoints;\n            const { instance: spline } = annotation.data.spline;\n            const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPos, maxDist);\n            if (!closestControlPoint) {\n                return;\n            }\n            this._deleteControlPointByIndex(element, annotation, closestControlPoint.index);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit,\n                };\n            }\n            this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            return cachedStats;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { canvas: canvasPos } = currentPoints;\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        const annotation = this.createAnnotation(evt);\n        this.isDrawing = true;\n        this.addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n            lastCanvasPoint: canvasPos,\n            contourHoleProcessingEnabled,\n        };\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n        if (newAnnotation) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        super.cancelAnnotation(annotation);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper, annotationStyle } = renderContext;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { element } = viewport;\n        const annotation = renderContext.annotation;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const { points: controlPoints, activeHandleIndex } = handles;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color, locked: annotationLocked, } = annotationStyle;\n        const canvasCoordinates = controlPoints.map((p) => worldToCanvas(p));\n        const { drawPreviewEnabled } = this.configuration.spline;\n        const splineType = annotation.data.spline.type;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = annotation.data.spline.instance;\n        const childAnnotations = getChildAnnotations(annotation);\n        const missingAnnotation = childAnnotations.findIndex((it) => !it);\n        if (missingAnnotation !== -1) {\n            throw new Error(`Can't find annotation for child ${annotation.childAnnotationUIDs.join()}`);\n        }\n        const splineAnnotationsGroup = [annotation, ...childAnnotations].filter((annotation) => this._isSplineROIAnnotation(annotation));\n        splineAnnotationsGroup.forEach((annotation) => {\n            const spline = this._updateSplineInstance(element, annotation);\n            const splinePolylineCanvas = spline.getPolylinePoints();\n            this.updateContourPolyline(annotation, {\n                points: splinePolylineCanvas,\n                closed: data.contour.closed,\n                targetWindingDirection: ContourWindingDirection.Clockwise,\n            }, viewport, { updateWindingDirection: data.contour.closed });\n        });\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId].areaUnit == null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        let activeHandleCanvasCoords;\n        if (!annotationLocked && !this.editData && activeHandleIndex !== null) {\n            activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n        }\n        if (activeHandleCanvasCoords || newAnnotation || highlighted) {\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                color,\n                lineWidth,\n                handleRadius: '3',\n            });\n        }\n        if (drawPreviewEnabled &&\n            spline.numControlPoints > 1 &&\n            this.editData?.lastCanvasPoint &&\n            !spline.closed) {\n            const { lastCanvasPoint } = this.editData;\n            const previewPolylinePoints = spline.getPreviewPolylinePoints(lastCanvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                color: '#9EA0CA',\n                lineDash: lineDash,\n                lineWidth: 1,\n            });\n        }\n        if (splineConfig.showControlPointsConnectors) {\n            const controlPointsConnectors = [...canvasCoordinates];\n            if (spline.closed) {\n                controlPointsConnectors.push(canvasCoordinates[0]);\n            }\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'controlPointsConnectors', controlPointsConnectors, {\n                color: 'rgba(255, 255, 255, 0.5)',\n                lineWidth: 1,\n            });\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        if (this.fireChangeOnUpdate?.annotationUID === annotationUID) {\n            this.triggerChangeEvent(annotation, enabledElement, this.fireChangeOnUpdate.changeType, this.fireChangeOnUpdate.contourHoleProcessingEnabled);\n            this.fireChangeOnUpdate = null;\n        }\n        annotation.invalidated = false;\n        return true;\n    }\n    createInterpolatedSplineControl(annotation) {\n        if (annotation.data.handles.points?.length) {\n            return;\n        }\n        const { polyline } = annotation.data.contour;\n        if (!polyline || !polyline.length) {\n            return;\n        }\n        annotation.data.handles.points = [];\n        const { points } = annotation.data.handles;\n        const increment = Math.max(10, Math.floor(polyline.length / 20));\n        for (let i = 0; i < polyline.length - increment; i += increment) {\n            points.push(polyline[i]);\n        }\n        points.push(polyline[polyline.length - 1]);\n    }\n    createAnnotation(evt) {\n        const contourAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const { type: splineType } = this.configuration.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        const createSpline = () => ({\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        });\n        let onInterpolationComplete;\n        if (this.configuration.interpolation?.enabled) {\n            onInterpolationComplete = (annotation) => {\n                annotation.data.spline ||= createSpline();\n                this.createInterpolatedSplineControl(annotation);\n            };\n        }\n        return utilities.deepMerge(contourAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n                spline: createSpline(),\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n    }\n    _deleteControlPointByIndex(element, annotation, controlPointIndex) {\n        const enabledElement = getEnabledElement(element);\n        const { points: controlPoints } = annotation.data.handles;\n        if (controlPoints.length === 3) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        else {\n            controlPoints.splice(controlPointIndex, 1);\n        }\n        const { renderingEngine } = enabledElement;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        annotation.invalidated = true;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    _isSplineROIAnnotation(annotation) {\n        return !!annotation.data?.spline;\n    }\n    _getSplineConfig(type) {\n        const { configuration: config } = this;\n        const splineConfigs = config.spline.configuration;\n        return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);\n    }\n    _updateSplineInstance(element, annotation) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { data } = annotation;\n        const { type: splineType, instance: spline } = annotation.data.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const worldPoints = data.handles.points;\n        const canvasPoints = worldPoints.map(worldToCanvas);\n        const resolution = splineConfig.resolution !== undefined\n            ? parseInt(splineConfig.resolution)\n            : undefined;\n        const scale = splineConfig.scale !== undefined\n            ? parseFloat(splineConfig.scale)\n            : undefined;\n        spline.setControlPoints(canvasPoints);\n        spline.closed = !!data.contour.closed;\n        if (!spline.fixedResolution &&\n            resolution !== undefined &&\n            spline.resolution !== resolution) {\n            spline.resolution = resolution;\n            annotation.invalidated = true;\n        }\n        if (spline instanceof CardinalSpline &&\n            !spline.fixedScale &&\n            scale !== undefined &&\n            spline.scale !== scale) {\n            spline.scale = scale;\n            annotation.invalidated = true;\n        }\n        return spline;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, isEmptyArea, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${utilities.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\nSplineROITool.toolName = 'SplineROI';\nexport default SplineROITool;\n","import { utilities } from '@cornerstonejs/core';\nimport SplineROITool from './SplineROITool';\nclass SplineContourSegmentationTool extends SplineROITool {\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n            },\n        }, toolProps);\n        super(initialProps);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n}\nSplineContourSegmentationTool.toolName = 'SplineContourSegmentationTool';\nexport default SplineContourSegmentationTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, VolumeViewport, utilities, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { removeAnnotation } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, KeyboardBindings, ChangeTypes } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport * as math from '../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport findHandlePolylineIndex from '../../utilities/contours/findHandlePolylineIndex';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { triggerAnnotationModified, triggerContourAnnotationCompleted, } from '../../stateManagement/annotation/helpers/state';\nimport { LivewireScissors } from '../../utilities/livewire/LivewireScissors';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale, throttle } from '../../utilities';\nconst CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2;\nclass LivewireContourTool extends ContourSegmentationBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextLines: defaultGetTextLines,\n            calculateStats: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            snapHandleNearby: 2,\n            interpolation: {\n                enabled: false,\n                nearestEdge: 2,\n                showInterpolationPolyline: false,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const proximitySquared = proximity * proximity;\n            const canvasPoints = annotation.data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            let startPoint = canvasPoints[canvasPoints.length - 1];\n            for (let i = 0; i < canvasPoints.length; i++) {\n                const endPoint = canvasPoints[i];\n                const distanceToPointSquared = math.lineSegment.distanceToPointSquared(startPoint, endPoint, canvasCoords);\n                if (distanceToPointSquared <= proximitySquared) {\n                    return true;\n                }\n                startPoint = endPoint;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt, clearAnnotation = false) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            if ((this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) ||\n                clearAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n                this.clearEditData();\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                return;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            this.triggerChangeEvent(annotation, enabledElement, changeType, contourHoleProcessingEnabled);\n            this.clearEditData();\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled = false) => {\n            if (changeType === ChangeTypes.Completed) {\n                triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, changeType);\n            }\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld } = this.editData;\n            if (this.editData.closed) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const { canvas: canvasPos, world: worldPosOriginal } = currentPoints;\n            let worldPos = worldPosOriginal;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const controlPoints = this.editData.currentPath.getControlPoints();\n            let closePath = controlPoints.length >= 2 && doubleClick;\n            if (controlPoints.length >= 2) {\n                const closestHandlePoint = {\n                    index: -1,\n                    distSquared: Infinity,\n                };\n                for (let i = 0, len = controlPoints.length; i < len; i++) {\n                    const controlPoint = controlPoints[i];\n                    const worldControlPoint = sliceToWorld(controlPoint);\n                    const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);\n                    const distSquared = math.point.distanceToPointSquared(canvasPos, canvasControlPoint);\n                    if (distSquared <= CLICK_CLOSE_CURVE_SQR_DIST &&\n                        distSquared < closestHandlePoint.distSquared) {\n                        closestHandlePoint.distSquared = distSquared;\n                        closestHandlePoint.index = i;\n                    }\n                }\n                if (closestHandlePoint.index === 0) {\n                    closePath = true;\n                }\n            }\n            const { snapHandleNearby } = this.configuration;\n            if (snapHandleNearby && !this.editData.closed) {\n                const currentPath = new LivewirePath();\n                const snapPoint = this.scissors.findMinNearby(worldToSlice(worldPosOriginal), 1);\n                const pathPoints = this.scissors.findPathToPoint(snapPoint);\n                currentPath.addPoints(pathPoints);\n                currentPath.prependPath(this.editData.confirmedPath);\n                worldPos = sliceToWorld(snapPoint);\n                this.editData.currentPath = currentPath;\n            }\n            this.editData.closed = this.editData.closed || closePath;\n            this.editData.confirmedPath = this.editData.currentPath;\n            const lastPoint = this.editData.currentPath.getLastPoint();\n            this.editData.confirmedPath.addControlPoint(lastPoint);\n            annotation.data.handles.points.push(sliceToWorld(lastPoint));\n            this.scissors.startSearch(worldToSlice(worldPos));\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (this.editData.closed) {\n                this.updateAnnotation(this.editData.confirmedPath);\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { element, currentPoints } = evt.detail;\n            const { world: worldPos, canvas: canvasPos } = currentPoints;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = canvasPos;\n            const { width: imgWidth, height: imgHeight } = this.scissors;\n            const { worldToSlice } = this.editData;\n            const slicePoint = worldToSlice(worldPos);\n            if (slicePoint[0] < 0 ||\n                slicePoint[1] < 0 ||\n                slicePoint[0] >= imgWidth ||\n                slicePoint[1] >= imgHeight) {\n                return;\n            }\n            const pathPoints = this.scissors.findPathToPoint(slicePoint);\n            const currentPath = new LivewirePath();\n            currentPath.addPoints(pathPoints);\n            currentPath.prependPath(this.editData.confirmedPath);\n            this.editData.currentPath = currentPath;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                console.warn('Drag annotation not implemented');\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                this.editHandle(worldPos, element, annotation, handleIndex);\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            if (newAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.editData = null;\n            this.scissors = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit: areaUnit,\n                };\n            }\n            this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.contour.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    setupBaseEditData(worldPos, element, annotation, nextPos, contourHoleProcessingEnabled) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const viewportImageData = viewport.getImageData();\n        const { imageData: vtkImageData } = viewportImageData;\n        let worldToSlice;\n        let sliceToWorld;\n        let width;\n        let height;\n        let scalarData;\n        if (!(viewport instanceof VolumeViewport)) {\n            width = viewportImageData.dimensions[0];\n            height = viewportImageData.dimensions[1];\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                return [ijkPoint[0], ijkPoint[1]];\n            };\n            sliceToWorld = (point) => csUtils.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);\n            scalarData = viewportImageData.scalarData;\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const sliceImageData = csUtils.getCurrentVolumeViewportSlice(viewport);\n            const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                const slicePoint = vec3.transformMat4([0, 0, 0], ijkPoint, indexToSliceMatrix);\n                return [slicePoint[0], slicePoint[1]];\n            };\n            sliceToWorld = (point) => {\n                const ijkPoint = vec3.transformMat4([0, 0, 0], [point[0], point[1], 0], sliceToIndexMatrix);\n                return csUtils.transformIndexToWorld(vtkImageData, ijkPoint);\n            };\n            scalarData = sliceImageData.scalarData;\n            width = sliceImageData.width;\n            height = sliceImageData.height;\n        }\n        else {\n            throw new Error('Viewport not supported');\n        }\n        scalarData = csUtils.convertToGrayscale(scalarData, width, height);\n        const { voiRange } = viewport.getProperties();\n        const startPos = worldToSlice(worldPos);\n        this.scissors = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n        if (nextPos) {\n            this.scissorsNext = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n            this.scissorsNext.startSearch(worldToSlice(nextPos));\n        }\n        this.scissors.startSearch(startPos);\n        const newAnnotation = !nextPos;\n        const confirmedPath = new LivewirePath();\n        const currentPath = new LivewirePath();\n        const currentPathNext = newAnnotation ? undefined : new LivewirePath();\n        confirmedPath.addPoint(startPos);\n        confirmedPath.addControlPoint(startPos);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        const lastCanvasPoint = viewport.worldToCanvas(worldPos);\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            newAnnotation,\n            hasMoved: false,\n            lastCanvasPoint,\n            confirmedPath,\n            currentPath,\n            confirmedPathNext: currentPathNext,\n            closed: false,\n            handleIndex: this.editData?.handleIndex ?? annotation.handles?.activeHandleIndex,\n            worldToSlice,\n            sliceToWorld,\n            contourHoleProcessingEnabled,\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const annotation = this.createAnnotation(evt);\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        this.setupBaseEditData(worldPos, element, annotation, undefined, contourHoleProcessingEnabled);\n        this.addAnnotation(annotation, element);\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(this.editData.viewportIdsToRender);\n        return annotation;\n    }\n    clearEditData() {\n        this.editData = null;\n        this.scissors = null;\n        this.scissorsNext = null;\n        this.isDrawing = false;\n    }\n    editHandle(worldPos, element, annotation, handleIndex) {\n        const { data } = annotation;\n        const { points: handlePoints } = data.handles;\n        const { length: numHandles } = handlePoints;\n        const previousHandle = handlePoints[(handleIndex - 1 + numHandles) % numHandles];\n        const nextHandle = handlePoints[(handleIndex + 1) % numHandles];\n        if (!this.editData?.confirmedPathNext) {\n            this.setupBaseEditData(previousHandle, element, annotation, nextHandle);\n            const { polyline } = data.contour;\n            const confirmedPath = new LivewirePath();\n            const confirmedPathNext = new LivewirePath();\n            const { worldToSlice } = this.editData;\n            const previousIndex = findHandlePolylineIndex(annotation, handleIndex - 1);\n            const nextIndex = findHandlePolylineIndex(annotation, handleIndex + 1);\n            if (nextIndex === -1 || previousIndex === -1) {\n                throw new Error(`Can't find handle index ${nextIndex === -1 && nextHandle} ${previousIndex === -1 && previousHandle}`);\n            }\n            if (handleIndex === 0) {\n                confirmedPathNext.addPoints(polyline.slice(nextIndex + 1, previousIndex).map(worldToSlice));\n            }\n            else {\n                confirmedPath.addPoints(polyline.slice(0, previousIndex + 1).map(worldToSlice));\n                confirmedPathNext.addPoints(polyline.slice(nextIndex, polyline.length).map(worldToSlice));\n            }\n            this.editData.confirmedPath = confirmedPath;\n            this.editData.confirmedPathNext = confirmedPathNext;\n        }\n        const { editData, scissors } = this;\n        const { worldToSlice, sliceToWorld } = editData;\n        const { activeHandleIndex } = data.handles;\n        if (activeHandleIndex === null || activeHandleIndex === undefined) {\n            data.handles.activeHandleIndex = handleIndex;\n        }\n        else if (activeHandleIndex !== handleIndex) {\n            throw new Error(`Trying to edit a different handle than the one currently being edited ${handleIndex}!==${data.handles.activeHandleIndex}`);\n        }\n        const slicePos = worldToSlice(worldPos);\n        if (slicePos[0] < 0 ||\n            slicePos[0] >= scissors.width ||\n            slicePos[1] < 0 ||\n            slicePos[1] >= scissors.height) {\n            return;\n        }\n        handlePoints[handleIndex] = sliceToWorld(slicePos);\n        const pathPointsLeft = scissors.findPathToPoint(slicePos);\n        const pathPointsRight = this.scissorsNext.findPathToPoint(slicePos);\n        const currentPath = new LivewirePath();\n        currentPath.prependPath(editData.confirmedPath);\n        if (handleIndex !== 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        currentPath.addPoints(pathPointsRight.reverse());\n        currentPath.appendPath(editData.confirmedPathNext);\n        if (handleIndex === 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        editData.currentPath = currentPath;\n        annotation.invalidated = true;\n        editData.hasMoved = true;\n        editData.closed = true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        this.updateAnnotation(this.editData?.currentPath);\n        return super.renderAnnotation(enabledElement, svgDrawingHelper);\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const contourSegmentationAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const annotation = csUtils.deepMerge(contourSegmentationAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n            },\n        });\n        return annotation;\n    }\n    undo(element, config, evt) {\n        if (!this.editData) {\n            return;\n        }\n        this._endCallback(evt, true);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { annotation, enabledElement, svgDrawingHelper, annotationStyle, targetId, } = renderContext;\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const { worldToCanvas } = viewport;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color } = annotationStyle;\n        if (highlighted ||\n            (newAnnotation &&\n                annotation.annotationUID === this.editData?.annotation?.annotationUID)) {\n            const handleGroupUID = '0';\n            const canvasHandles = handles.points.map(worldToCanvas);\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasHandles, {\n                color,\n                lineDash,\n                lineWidth,\n            });\n        }\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId].areaUnit == null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        return true;\n    }\n    updateAnnotation(livewirePath) {\n        if (!this.editData || !livewirePath) {\n            return;\n        }\n        const { annotation, sliceToWorld, worldToSlice, closed, newAnnotation } = this.editData;\n        let { pointArray: imagePoints } = livewirePath;\n        if (imagePoints.length > 1) {\n            imagePoints = [...imagePoints, imagePoints[0]];\n        }\n        const targetWindingDirection = newAnnotation && closed ? ContourWindingDirection.Clockwise : undefined;\n        this.updateContourPolyline(annotation, {\n            points: imagePoints,\n            closed,\n            targetWindingDirection,\n        }, {\n            canvasToWorld: sliceToWorld,\n            worldToCanvas: worldToSlice,\n        });\n    }\n}\nLivewireContourTool.toolName = 'LivewireContour';\nexport default LivewireContourTool;\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport LivewireContourTool from './LivewireContourTool';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../../enums';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nclass LivewireContourSegmentationTool extends LivewireContourTool {\n    updateInterpolatedAnnotation(annotation, enabledElement) {\n        if (this.editData ||\n            !annotation.invalidated ||\n            !annotation.data.handles.interpolationSources) {\n            return;\n        }\n        annotation.data.contour.originalPolyline = annotation.data.contour.polyline;\n        queueMicrotask(() => {\n            if (!annotation.data.handles.interpolationSources) {\n                return;\n            }\n            const { points } = annotation.data.handles;\n            const { element } = enabledElement.viewport;\n            this.setupBaseEditData(points[0], element, annotation);\n            const { length: count } = points;\n            const { scissors } = this;\n            const { nearestEdge, repeatInterpolation } = this.configuration.interpolation;\n            annotation.data.handles.originalPoints = points;\n            const { worldToSlice, sliceToWorld } = this.editData;\n            const handleSmoothing = [];\n            if (nearestEdge) {\n                let lastPoint = worldToSlice(points[points.length - 1]);\n                points.forEach((point, hIndex) => {\n                    const testPoint = worldToSlice(point);\n                    lastPoint = testPoint;\n                    handleSmoothing.push(testPoint);\n                    scissors.startSearch(lastPoint);\n                    scissors.findPathToPoint(testPoint);\n                    scissors.findPathToPoint(worldToSlice(points[(hIndex + 3) % points.length]));\n                    const minPoint = scissors.findMinNearby(testPoint, nearestEdge);\n                    if (!csUtils.isEqual(testPoint, minPoint)) {\n                        handleSmoothing[hIndex] = minPoint;\n                        lastPoint = minPoint;\n                        points[hIndex] = sliceToWorld(minPoint);\n                    }\n                });\n            }\n            const acceptedPath = new LivewirePath();\n            for (let i = 0; i < count; i++) {\n                scissors.startSearch(worldToSlice(points[i]));\n                const path = scissors.findPathToPoint(worldToSlice(points[(i + 1) % count]));\n                acceptedPath.addPoints(path);\n            }\n            this.updateAnnotation(acceptedPath);\n            this.scissors = null;\n            this.scissorsNext = null;\n            this.editData = null;\n            annotation.data.handles.interpolationSources = null;\n            if (repeatInterpolation) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.InterpolationUpdated);\n            }\n        });\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        const { annotationUID } = annotation;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { showInterpolationPolyline } = this.configuration.interpolation || {};\n        this.updateInterpolatedAnnotation?.(annotation, enabledElement);\n        const { originalPolyline } = annotation.data.contour;\n        const rendered = super.renderAnnotationInstance(renderContext);\n        if (showInterpolationPolyline &&\n            originalPolyline &&\n            annotation.autoGenerated) {\n            const polylineCanvasPoints = originalPolyline.map(worldToCanvas);\n            polylineCanvasPoints.push(polylineCanvasPoints[0]);\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'interpolationContour-0', polylineCanvasPoints, {\n                color: '#70ffff',\n                lineWidth: 1,\n                fillOpacity: 0,\n            });\n        }\n        return rendered;\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n}\nLivewireContourSegmentationTool.toolName = 'LivewireContourSegmentationTool';\nexport default LivewireContourSegmentationTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawArrow as drawArrowSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nclass ArrowAnnotateTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n            arrowFirst: true,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const { arrowFirst } = this.configuration;\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        arrowFirst,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            if (newAnnotation) {\n                this.configuration.getTextCallback((text) => {\n                    if (!text) {\n                        removeAnnotation(annotation.annotationUID);\n                        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                        this.editData = null;\n                        this.isDrawing = false;\n                        return;\n                    }\n                    annotation.data.text = text;\n                    triggerAnnotationCompleted(annotation);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                });\n            }\n            else {\n                triggerAnnotationModified(annotation, element);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.touchTapCallback = (evt) => {\n            if (evt.detail.taps == 2) {\n                this.doubleClickCallback(evt);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.editData = null;\n            this.isDrawing = false;\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles, text } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineWidth,\n                    });\n                }\n                const arrowUID = '1';\n                if (this.configuration.arrowFirst) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[1], canvasCoordinates[0], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                    });\n                }\n                else {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                    });\n                }\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [text], textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const enabledElement = getEnabledElement(element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nArrowAnnotateTool.toolName = 'ArrowAnnotate';\nexport default ArrowAnnotateTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nclass AngleTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2, point3] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            if (!point3) {\n                return false;\n            }\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const line2 = {\n                start: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n                end: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n                this.editData.handleIndex = 2;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.angleStartedNotYetCompleted = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotation.annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                let lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length !== 3) {\n                    return renderStatus;\n                }\n                lineUID = '2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], canvasCoordinates[2], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 3) {\n            return;\n        }\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const worldPos3 = data.handles.points[2];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const angle = angleBetweenLines([worldPos1, worldPos2], [worldPos2, worldPos3]);\n            const { dimensions, imageData } = this.getTargetImageData(targetId);\n            this.isHandleOutsideImage = [worldPos1, worldPos2, worldPos3]\n                .map((worldPos) => csUtils.transformWorldToIndex(imageData, worldPos))\n                .some((index) => !csUtils.indexWithinDimensions(index, dimensions));\n            cachedStats[targetId] = {\n                angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n            };\n        }\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, element);\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    if (isNaN(angle)) {\n        return [`${angle}`];\n    }\n    const textLines = [\n        `${csUtils.roundNumber(angle)} ${String.fromCharCode(176)}`,\n    ];\n    return textLines;\n}\nAngleTool.toolName = 'Angle';\nexport default AngleTool;\n","import { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nclass CobbAngleTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            showArcLines: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n                viewport,\n                points: data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType, canvasCoords, proximity = 6) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n                viewport,\n                points: annotation.data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._mouseUpCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n                resetElementCursor(element);\n                this.editData.handleIndex = data.handles.points.length;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._mouseDownCallback = (evt) => {\n            const { annotation, handleIndex } = this.editData;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { data } = annotation;\n            if (handleIndex === 1) {\n                data.handles.points[1] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[1][0] !== data.handles.points[0][0] ||\n                        data.handles.points[1][1] !== data.handles.points[0][0];\n                return;\n            }\n            if (handleIndex === 3) {\n                data.handles.points[3] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[3][0] !== data.handles.points[2][0] ||\n                        data.handles.points[3][1] !== data.handles.points[2][0];\n                this.angleStartedNotYetCompleted = false;\n                return;\n            }\n            this.editData.hasMoved = false;\n            hideElementCursor(element);\n            data.handles.points[2] = data.handles.points[3] = worldPos;\n            this.editData.handleIndex = data.handles.points.length - 1;\n        };\n        this._mouseDragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, isNearFirstLine, isNearSecondLine, } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined &&\n                (isNearFirstLine || isNearSecondLine)) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                if (isNearFirstLine) {\n                    const firstLinePoints = [points[0], points[1]];\n                    firstLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                else if (isNearSecondLine) {\n                    const secondLinePoints = [points[2], points[3]];\n                    secondLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length < 4) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.angleStartedNotYetCompleted = false;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseDragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseDragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                        arc1Angle: null,\n                        arc2Angle: null,\n                        points: {\n                            world: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                            canvas: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                        },\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const firstLine = [canvasCoordinates[0], canvasCoordinates[1]];\n                const secondLine = [canvasCoordinates[2], canvasCoordinates[3]];\n                let lineUID = 'line1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, firstLine[0], firstLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length < 4) {\n                    return renderStatus;\n                }\n                lineUID = 'line2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, secondLine[0], secondLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                lineUID = 'linkLine';\n                const mid1 = midPoint2(firstLine[0], firstLine[1]);\n                const mid2 = midPoint2(secondLine[0], secondLine[1]);\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n                    color,\n                    lineWidth: '1',\n                    lineDash: '1,4',\n                });\n                const { arc1Start, arc1End, arc2End, arc2Start } = data.cachedStats[targetId].points.canvas;\n                const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n                if (this.configuration.showArcLines) {\n                    lineUID = 'arc1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc1Start, arc1End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                    lineUID = 'arc2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc2Start, arc2End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = 'cobbAngleText';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n                if (this.configuration.showArcLines) {\n                    const arc1TextBoxUID = 'arcAngle1';\n                    const arc1TextLine = [\n                        `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc1TextBoxUID, arc1TextLine, arch1TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                    const arc2TextBoxUID = 'arcAngle2';\n                    const arc2TextLine = [\n                        `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc2TextBoxUID, arc2TextLine, arch2TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                }\n            }\n            return renderStatus;\n        };\n        this.distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n            const [point1, point2, point3, point4] = points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const canvasPoint4 = viewport.worldToCanvas(point4);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const line2 = {\n                start: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n                end: {\n                    x: canvasPoint4[0],\n                    y: canvasPoint4[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            let isNearFirstLine = false;\n            let isNearSecondLine = false;\n            if (distanceToPoint <= proximity) {\n                isNearFirstLine = true;\n            }\n            else if (distanceToPoint2 <= proximity) {\n                isNearSecondLine = true;\n            }\n            return {\n                distanceToPoint,\n                distanceToPoint2,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n        };\n        this.getArcsStartEndPoints = ({ firstLine, secondLine, mid1, mid2, }) => {\n            const linkLine = [mid1, mid2];\n            const arc1Angle = angleBetweenLines(firstLine, linkLine);\n            const arc2Angle = angleBetweenLines(secondLine, linkLine);\n            const arc1Side = arc1Angle > 90 ? 1 : 0;\n            const arc2Side = arc2Angle > 90 ? 0 : 1;\n            const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n            const linkLineLength = Math.sqrt((linkLine[1][0] - linkLine[0][0]) ** 2 +\n                (linkLine[1][1] - linkLine[0][1]) ** 2);\n            const ratio = 0.1;\n            const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n            const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n            const directionVectorStartArc1 = [\n                firstLine[arc1Side][0] - midFirstLine[0],\n                firstLine[arc1Side][1] - midFirstLine[1],\n            ];\n            const magnitudeStartArc1 = Math.sqrt(directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2);\n            const normalizedDirectionStartArc1 = [\n                directionVectorStartArc1[0] / magnitudeStartArc1,\n                directionVectorStartArc1[1] / magnitudeStartArc1,\n            ];\n            const arc1Start = [\n                midFirstLine[0] +\n                    normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n                midFirstLine[1] +\n                    normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc1 = [\n                midLinkLine[0] - mid1[0],\n                midLinkLine[1] - mid1[1],\n            ];\n            const magnitudeEndArc1 = Math.sqrt(directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2);\n            const normalizedDirectionEndArc1 = [\n                directionVectorEndArc1[0] / magnitudeEndArc1,\n                directionVectorEndArc1[1] / magnitudeEndArc1,\n            ];\n            const arc1End = [\n                mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n                mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorStartArc2 = [\n                secondLine[arc2Side][0] - midSecondLine[0],\n                secondLine[arc2Side][1] - midSecondLine[1],\n            ];\n            const magnitudeStartArc2 = Math.sqrt(directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2);\n            const normalizedDirectionStartArc2 = [\n                directionVectorStartArc2[0] / magnitudeStartArc2,\n                directionVectorStartArc2[1] / magnitudeStartArc2,\n            ];\n            const arc2Start = [\n                midSecondLine[0] +\n                    normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n                midSecondLine[1] +\n                    normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc2 = [\n                midLinkLine[0] - mid2[0],\n                midLinkLine[1] - mid2[1],\n            ];\n            const magnitudeEndArc2 = Math.sqrt(directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2);\n            const normalizedDirectionEndArc2 = [\n                directionVectorEndArc2[0] / magnitudeEndArc2,\n                directionVectorEndArc2[1] / magnitudeEndArc2,\n            ];\n            const arc2End = [\n                mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n                mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n            ];\n            return {\n                arc1Start,\n                arc1End,\n                arc2Start,\n                arc2End,\n                arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n                arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n            };\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 25, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType = 'mouse') {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        if (data.handles.points.length !== 4) {\n            return;\n        }\n        const seg1 = [null, null];\n        const seg2 = [null, null];\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < 2; i += 1) {\n            for (let j = 2; j < 4; j += 1) {\n                const dist = vec3.distance(data.handles.points[i], data.handles.points[j]);\n                if (dist < minDist) {\n                    minDist = dist;\n                    seg1[1] = data.handles.points[i];\n                    seg1[0] = data.handles.points[(i + 1) % 2];\n                    seg2[0] = data.handles.points[j];\n                    seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n                }\n            }\n        }\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const canvasPoints = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const firstLine = [canvasPoints[0], canvasPoints[1]];\n        const secondLine = [canvasPoints[2], canvasPoints[3]];\n        const mid1 = midPoint2(firstLine[0], firstLine[1]);\n        const mid2 = midPoint2(secondLine[0], secondLine[1]);\n        const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } = this.getArcsStartEndPoints({\n            firstLine,\n            secondLine,\n            mid1,\n            mid2,\n        });\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            cachedStats[targetId] = {\n                angle: angleBetweenLines(seg1, seg2),\n                arc1Angle,\n                arc2Angle,\n                points: {\n                    canvas: {\n                        arc1Start,\n                        arc1End,\n                        arc2End,\n                        arc2Start,\n                    },\n                    world: {\n                        arc1Start: viewport.canvasToWorld(arc1Start),\n                        arc1End: viewport.canvasToWorld(arc1End),\n                        arc2End: viewport.canvasToWorld(arc2End),\n                        arc2Start: viewport.canvasToWorld(arc2Start),\n                    },\n                },\n            };\n        }\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, element);\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n    return textLines;\n}\nCobbAngleTool.toolName = 'CobbAngle';\nexport default CobbAngleTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, StackViewport, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandle as drawHandleSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { distanceToPoint } from '../../utilities/math/point';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nconst { transformWorldToIndex } = csUtils;\nclass UltrasoundDirectionalTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            displayBothAxesDistances: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.startedDrawing) {\n                return;\n            }\n            this.startedDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('UltrasoundDirectionalTool can only be used on a StackViewport');\n            }\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            return false;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.startedDrawing && data.handles.points.length === 1) {\n                this.editData.handleIndex = 1;\n                return;\n            }\n            this.startedDrawing = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.startedDrawing = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].xValues == null) {\n                    data.cachedStats[targetId] = {\n                        xValues: [0, 0],\n                        yValues: [0, 0],\n                        isHorizontal: false,\n                        units: [''],\n                        isUnitless: false,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let handleGroupUID = '0';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[0], {\n                    color,\n                }, 0);\n                renderStatus = true;\n                if (canvasCoordinates.length !== 2) {\n                    return renderStatus;\n                }\n                handleGroupUID = '1';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[1], {\n                    color,\n                }, 1);\n                const isUnitless = data.cachedStats[targetId].isUnitless;\n                if (!isUnitless) {\n                    const canvasPoint1 = canvasCoordinates[0];\n                    const canvasPoint2 = canvasCoordinates[1];\n                    const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                    const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                    const isHorizontal = data.cachedStats[targetId].isHorizontal;\n                    let projectedPointCanvas = [0, 0];\n                    if (isHorizontal) {\n                        projectedPointCanvas = [\n                            canvasPoint1[0] + canvasDeltaX,\n                            canvasPoint1[1],\n                        ];\n                    }\n                    else {\n                        projectedPointCanvas = [\n                            canvasPoint1[0],\n                            canvasPoint1[1] + canvasDeltaY,\n                        ];\n                    }\n                    let dataId = `${annotationUID}-line-1`;\n                    let lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                    dataId = `${annotationUID}-line-2`;\n                    lineUID = '2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        lineDash: [1, 1],\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                else {\n                    const dataId = `${annotationUID}-line-1`;\n                    const lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId, this.configuration);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    toolSelectedCallback(evt, annotation, interactionType, canvasCoords) {\n        return;\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        this.editData = {\n            handleIndex,\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 2) {\n            return;\n        }\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData } = image;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const imageIndex1 = transformWorldToIndex(imageData, worldPos1);\n            const imageIndex2 = transformWorldToIndex(imageData, worldPos2);\n            const { values: values1, units: units1 } = getCalibratedProbeUnitsAndValue(image, [imageIndex1]);\n            const { values: values2, units: units2 } = getCalibratedProbeUnitsAndValue(image, [imageIndex2]);\n            let xValues, yValues, units, isHorizontal;\n            let isUnitless = false;\n            if (units1[0] !== units2[0] ||\n                units1[1] !== units2[1] ||\n                (units1[0] === 'raw' && units2[0] === 'raw')) {\n                const value = distanceToPoint(worldPos1, worldPos2);\n                xValues = [value, 0];\n                yValues = [value, 0];\n                units = ['px'];\n                isUnitless = true;\n            }\n            else {\n                const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);\n                const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);\n                const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);\n                xValues = [values1[0], values2[0]];\n                yValues = [values1[1], values2[1]];\n                units = [units1[0], units1[1]];\n            }\n            cachedStats[targetId] = {\n                xValues,\n                yValues,\n                isHorizontal,\n                units,\n                isUnitless,\n            };\n        }\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, element);\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId, configuration) {\n    const cachedStats = data.cachedStats[targetId];\n    const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;\n    if (isUnitless) {\n        return [`${csUtils.roundNumber(xValues[0])} px`];\n    }\n    if (configuration.displayBothAxesDistances) {\n        const dist1 = Math.abs(xValues[1] - xValues[0]);\n        const dist2 = Math.abs(yValues[1] - yValues[0]);\n        return [\n            `${csUtils.roundNumber(dist1)} ${units[0]}`,\n            `${csUtils.roundNumber(dist2)} ${units[1]}`,\n        ];\n    }\n    if (isHorizontal) {\n        const dist = Math.abs(xValues[1] - xValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[0]}`];\n    }\n    else {\n        const dist = Math.abs(yValues[1] - yValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[1]}`];\n    }\n}\nUltrasoundDirectionalTool.toolName = 'UltrasoundDirectionalTool';\nexport default UltrasoundDirectionalTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawArrow as drawArrowSvg } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nclass KeyImageTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextCallback,\n            changeTextCallback,\n            canvasPosition: [10, 10],\n            canvasSize: 10,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = KeyImageTool.createAnnotation({\n                metadata: { ...viewport.getViewReference(), referencedImageId },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { canvasPosition, canvasSize } = this.configuration;\n            if (!canvasPosition?.length) {\n                return false;\n            }\n            if (Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n                canvasSize / 2 &&\n                Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n                    canvasSize / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            annotation.highlighted = true;\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.isDrawing = false;\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID } = annotation;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { canvasPosition, canvasSize } = this.configuration;\n                if (canvasPosition?.length) {\n                    const arrowUID = '1';\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasPosition.map((it) => it + canvasSize), canvasPosition, {\n                        color,\n                        width: 1,\n                    });\n                }\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n            }\n            return renderStatus;\n        };\n    }\n    cancel() {\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nKeyImageTool.toolName = 'KeyImage';\nexport default KeyImageTool;\n","import { BaseTool } from './base';\nimport { getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { setAnnotationSelected } from '../stateManagement/annotation/annotationSelection';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass AnnotationEraserTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'mouse');\n        };\n        this.preTouchStartCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'touch');\n        };\n    }\n    _deleteNearbyAnnotations(evt, interactionType) {\n        const { renderingEngineId, viewportId, element, currentPoints } = evt.detail;\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        if (!toolGroup) {\n            return false;\n        }\n        const tools = toolGroup._toolInstances;\n        const annotationsToRemove = [];\n        for (const toolName in tools) {\n            const toolInstance = tools[toolName];\n            if (typeof toolInstance.isPointNearTool !== 'function' ||\n                typeof toolInstance.filterInteractableAnnotationsForElement !==\n                    'function') {\n                continue;\n            }\n            const annotations = getAnnotations(toolName, element);\n            if (!annotations.length) {\n                continue;\n            }\n            const interactableAnnotations = toolInstance.filterInteractableAnnotationsForElement(element, annotations) || [];\n            for (const annotation of interactableAnnotations) {\n                if (toolInstance.isPointNearTool(element, annotation, currentPoints.canvas, 10, interactionType)) {\n                    annotationsToRemove.push(annotation.annotationUID);\n                }\n            }\n        }\n        for (const annotationUID of annotationsToRemove) {\n            setAnnotationSelected(annotationUID);\n            removeAnnotation(annotationUID);\n        }\n        evt.preventDefault();\n        return true;\n    }\n}\nAnnotationEraserTool.toolName = 'Eraser';\nexport default AnnotationEraserTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, getStackSegmentationImageIdsForViewport, } from '../../stateManagement/segmentation/segmentationState';\nclass RectangleScissorsTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideRectangle,\n                ERASE_INSIDE: eraseInsideRectangle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            points[handleIndex] = [...worldPos];\n            let bottomLeftCanvas;\n            let bottomRightCanvas;\n            let topLeftCanvas;\n            let topRightCanvas;\n            let bottomLeftWorld;\n            let bottomRightWorld;\n            let topLeftWorld;\n            let topRightWorld;\n            switch (handleIndex) {\n                case 0:\n                case 3:\n                    bottomLeftCanvas = worldToCanvas(points[0]);\n                    topRightCanvas = worldToCanvas(points[3]);\n                    bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                    topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                    bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                    topLeftWorld = canvasToWorld(topLeftCanvas);\n                    points[1] = bottomRightWorld;\n                    points[2] = topLeftWorld;\n                    break;\n                case 1:\n                case 2:\n                    bottomRightCanvas = worldToCanvas(points[1]);\n                    topLeftCanvas = worldToCanvas(points[2]);\n                    bottomLeftCanvas = [\n                        topLeftCanvas[0],\n                        bottomRightCanvas[1],\n                    ];\n                    topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];\n                    bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                    topRightWorld = canvasToWorld(topRightCanvas);\n                    points[0] = bottomLeftWorld;\n                    points[3] = topRightWorld;\n                    break;\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const rectangleUID = '0';\n            drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, config as segmentationConfig, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nclass CircleScissorsTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideCircle,\n                ERASE_INSIDE: eraseInsideCircle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData.Labelmap;\n            if (!labelmapData) {\n                throw new Error('No labelmap data found for the active segmentation, create one before using scissors tool');\n            }\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    isDrawing: true,\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                viewPlaneNormal,\n                viewUp,\n                strategySpecificConfiguration: {},\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nclass SphereScissorsTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideSphere,\n                ERASE_INSIDE: eraseInsideSphere,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            this.isDrawing = true;\n            const annotation = {\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    invalidated: true,\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    highlighted: true,\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                toolGroupId: this.toolGroupId,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                this.editData = {\n                    ...this.editData,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved, segmentIndex, segmentsLocked, } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                segmentIndex,\n                segmentsLocked,\n                viewPlaneNormal,\n                viewUp,\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import { StackViewport, cache, getEnabledElement, utilities as csUtils, utilities as coreUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, removeAnnotation, getAnnotations, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport throttle from '../../utilities/throttle';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport CircleROITool from '../annotation/CircleROITool';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, } from '../../utilities/getCalibratedUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROIStartEndThresholdTool extends CircleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: false,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    volumeId,\n                    spacingInNormal,\n                    enabledElement,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        statistics: [],\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            if (this.configuration.calculatePointsInsideVolume) {\n                this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius(canvasCoordinates);\n                const { centerPointRadius } = this.configuration;\n                const canvasCorners = getCanvasCircleCorners(canvasCoordinates);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let tempStartCoordinate = startCoordinate;\n                let tempEndCoordinate = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    tempStartCoordinate = this._getCoordinateForViewplaneNormal(tempStartCoordinate, viewplaneNormal);\n                    data.startCoordinate = tempStartCoordinate;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    tempEndCoordinate = this._getCoordinateForViewplaneNormal(tempEndCoordinate, viewplaneNormal);\n                    data.endCoordinate = tempEndCoordinate;\n                }\n                const roundedStartCoordinate = coreUtils.roundToPrecision(data.startCoordinate);\n                const roundedEndCoordinate = coreUtils.roundToPrecision(data.endCoordinate);\n                const cameraCoordinate = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCameraCoordinate = coreUtils.roundToPrecision(cameraCoordinate);\n                if (roundedCameraCoordinate <\n                    Math.min(roundedStartCoordinate, roundedEndCoordinate) ||\n                    roundedCameraCoordinate >\n                        Math.max(roundedStartCoordinate, roundedEndCoordinate)) {\n                    continue;\n                }\n                const middleCoordinate = coreUtils.roundToPrecision((data.startCoordinate + data.endCoordinate) / 2);\n                let isMiddleSlice = false;\n                if (roundedCameraCoordinate === middleCoordinate) {\n                    isMiddleSlice = true;\n                }\n                data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = middleCoordinate;\n                if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    isMiddleSlice) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineWidthToUse = lineWidth;\n                let lineDashToUse = lineDash;\n                if (isMiddleSlice) {\n                    lineWidthToUse = lineWidth;\n                    lineDashToUse = [];\n                }\n                else {\n                    lineDashToUse = [5, 5];\n                }\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth: lineWidthToUse,\n                });\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.showTextBox == true &&\n                    this.configuration.calculatePointsInsideVolume == true) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data);\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, 100, { trailing: true });\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { imageData } = imageVolume;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const startIJK = transformWorldToIndex(imageData, points[0]);\n        const endIJK = transformWorldToIndex(imageData, points[0]);\n        const handlesToStart = csUtils.deepClone(points);\n        const startWorld = vec3.create();\n        imageData.indexToWorldVec3(startIJK, startWorld);\n        const endWorld = vec3.create();\n        imageData.indexToWorldVec3(endIJK, endWorld);\n        if (this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) == 2) {\n            startWorld[2] = startCoordinate;\n            endWorld[2] = endCoordinate;\n            handlesToStart[0][2] = startCoordinate;\n            handlesToStart[1][2] = startCoordinate;\n        }\n        else if (this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) == 0) {\n            startWorld[0] = startCoordinate;\n            endWorld[0] = endCoordinate;\n            handlesToStart[0][0] = startCoordinate;\n            handlesToStart[1][0] = startCoordinate;\n        }\n        else if (this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) == 1) {\n            startWorld[1] = startCoordinate;\n            endWorld[1] = endCoordinate;\n            handlesToStart[0][1] = startCoordinate;\n            handlesToStart[1][1] = startCoordinate;\n        }\n        const distance = vec3.distance(startWorld, endWorld);\n        const newProjectionPoints = [];\n        for (let dist = 0; dist < distance; dist += spacingInNormal) {\n            newProjectionPoints.push(handlesToStart.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners(canvasCoordinates));\n        const pos1 = viewport.canvasToWorld(topLeftCanvas);\n        const pos2 = viewport.canvasToWorld(bottomRightCanvas);\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, pos1, pos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.handles);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(Math.PI *\n            (worldWidth / measureInfo.scale / 2) *\n            (worldHeight / aspect / measureInfo.scale / 2));\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const centerWorld = projectionPoints[i][0];\n            const canvasCoordinates = projectionPoints[i].map((p) => viewport.worldToCanvas(p));\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, centerWorld);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = centerWorld;\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS),\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n        }\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);\n        const startPos = vec3.create();\n        vec3.scaleAndAdd(startPos, worldPos, viewPlaneNormal, numSlicesToPropagateFromStart * -spacingInNormal);\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateToEnd = numSlicesToPropagate - Math.round(numSlicesToPropagate / 2);\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagateToEnd * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nCircleROIStartEndThresholdTool.toolName = 'CircleROIStartEndThreshold';\nexport default CircleROIStartEndThresholdTool;\n","import { cache, getEnabledElement, utilities as csUtils, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, } from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nconst { transformWorldToIndex, isEqual } = csUtils;\nclass PaintFillTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const { representationData } = getSegmentation(segmentationId);\n            let dimensions;\n            let direction;\n            let scalarData;\n            let index;\n            let voxelManager;\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n                const segmentation = cache.getVolume(volumeId);\n                ({ dimensions, direction } = segmentation);\n                voxelManager = segmentation.voxelManager;\n                index = transformWorldToIndex(segmentation.imageData, worldPos);\n            }\n            else {\n                const currentSegmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                if (!currentSegmentationImageId) {\n                    throw new Error('No active segmentation imageId detected, create one before using scissors tool');\n                }\n                const { imageData } = viewport.getImageData();\n                dimensions = imageData.getDimensions();\n                direction = imageData.getDirection();\n                const image = cache.getImage(currentSegmentationImageId);\n                voxelManager = image.voxelManager;\n                index = transformWorldToIndex(imageData, worldPos);\n            }\n            const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n            if (fixedDimension === undefined) {\n                console.warn('Oblique paint fill not yet supported');\n                return;\n            }\n            const { floodFillGetter, getLabelValue, getScalarDataPositionFromPlane, inPlaneSeedPoint, fixedDimensionValue, } = this.generateHelpers(voxelManager, dimensions, index, fixedDimension);\n            if (index[0] < 0 ||\n                index[0] >= dimensions[0] ||\n                index[1] < 0 ||\n                index[1] >= dimensions[1] ||\n                index[2] < 0 ||\n                index[2] >= dimensions[2]) {\n                return;\n            }\n            const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n            if (segmentsLocked.includes(clickedLabelValue)) {\n                return;\n            }\n            const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n            const { flooded } = floodFillResult;\n            flooded.forEach((index) => {\n                const scalarDataIndex = getScalarDataPositionFromPlane(index[0], index[1]);\n                voxelManager.setAtIndex(scalarDataIndex, segmentIndex);\n            });\n            const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);\n            triggerSegmentationDataModified(segmentationId, framesModified);\n            return true;\n        };\n        this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {\n            const { boundaries } = floodFillResult;\n            if (fixedDimension === 2) {\n                return [fixedDimensionValue];\n            }\n            let minJ = Infinity;\n            let maxJ = -Infinity;\n            for (let b = 0; b < boundaries.length; b++) {\n                const j = boundaries[b][1];\n                if (j < minJ) {\n                    minJ = j;\n                }\n                if (j > maxJ) {\n                    maxJ = j;\n                }\n            }\n            const framesModified = [];\n            for (let frame = minJ; frame <= maxJ; frame++) {\n                framesModified.push(frame);\n            }\n            return framesModified;\n        };\n        this.generateHelpers = (voxelManager, dimensions, seedIndex3D, fixedDimension = 2) => {\n            let fixedDimensionValue;\n            let inPlaneSeedPoint;\n            switch (fixedDimension) {\n                case 0:\n                    fixedDimensionValue = seedIndex3D[0];\n                    inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];\n                    break;\n                case 1:\n                    fixedDimensionValue = seedIndex3D[1];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];\n                    break;\n                case 2:\n                    fixedDimensionValue = seedIndex3D[2];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            const getScalarDataPosition = (x, y, z) => {\n                return voxelManager.toIndex([x, y, z]);\n            };\n            const getLabelValue = (x, y, z) => {\n                return voxelManager.getAtIJK(x, y, z);\n            };\n            const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);\n            const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);\n            return {\n                getScalarDataPositionFromPlane,\n                getLabelValue,\n                floodFillGetter,\n                inPlaneSeedPoint,\n                fixedDimensionValue,\n            };\n        };\n        this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {\n            let floodFillGetter;\n            switch (fixedDimension) {\n                case 0:\n                    floodFillGetter = (y, z) => {\n                        if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    floodFillGetter = (x, z) => {\n                        if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    floodFillGetter = (x, y) => {\n                        if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return floodFillGetter;\n        };\n        this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {\n            let getScalarDataPositionFromPlane;\n            switch (fixedDimension) {\n                case 0:\n                    getScalarDataPositionFromPlane = (y, z) => {\n                        return getScalarDataPosition(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    getScalarDataPositionFromPlane = (x, z) => {\n                        return getScalarDataPosition(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    getScalarDataPositionFromPlane = (x, y) => {\n                        return getScalarDataPosition(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return getScalarDataPositionFromPlane;\n        };\n    }\n    getFixedDimension(viewPlaneNormal, direction) {\n        const xDirection = direction.slice(0, 3);\n        const yDirection = direction.slice(3, 6);\n        const zDirection = direction.slice(6, 9);\n        const absoluteOfViewPlaneNormal = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const absoluteOfXDirection = [\n            Math.abs(xDirection[0]),\n            Math.abs(xDirection[1]),\n            Math.abs(xDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n            return 0;\n        }\n        const absoluteOfYDirection = [\n            Math.abs(yDirection[0]),\n            Math.abs(yDirection[1]),\n            Math.abs(yDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n            return 1;\n        }\n        const absoluteOfZDirection = [\n            Math.abs(zDirection[0]),\n            Math.abs(zDirection[1]),\n            Math.abs(zDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n            return 2;\n        }\n    }\n}\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { BaseTool } from './base';\nimport { Enums, eventTarget, getEnabledElementByIds, getRenderingEngines, } from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nvar OverlayMarkerType;\n(function (OverlayMarkerType) {\n    OverlayMarkerType[OverlayMarkerType[\"ANNOTATED_CUBE\"] = 1] = \"ANNOTATED_CUBE\";\n    OverlayMarkerType[OverlayMarkerType[\"AXES\"] = 2] = \"AXES\";\n    OverlayMarkerType[OverlayMarkerType[\"CUSTOM\"] = 3] = \"CUSTOM\";\n})(OverlayMarkerType || (OverlayMarkerType = {}));\nclass OrientationMarkerTool extends BaseTool {\n    static { this.CUBE = 1; }\n    static { this.AXIS = 2; }\n    static { this.VTPFILE = 3; }\n    static { this.OVERLAY_MARKER_TYPES = OverlayMarkerType; }\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            orientationWidget: {\n                enabled: true,\n                viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n                viewportSize: 0.15,\n                minPixelSize: 100,\n                maxPixelSize: 300,\n            },\n            overlayMarkerType: OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n            overlayConfiguration: {\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n                    faceProperties: {\n                        xPlus: { text: 'L', faceColor: '#ffff00', faceRotation: 90 },\n                        xMinus: { text: 'R', faceColor: '#ffff00', faceRotation: 270 },\n                        yPlus: {\n                            text: 'P',\n                            faceColor: '#00ffff',\n                            fontColor: 'white',\n                            faceRotation: 180,\n                        },\n                        yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n                        zPlus: { text: 'S' },\n                        zMinus: { text: 'I' },\n                    },\n                    defaultStyle: {\n                        fontStyle: 'bold',\n                        fontFamily: 'Arial',\n                        fontColor: 'black',\n                        fontSizeScale: (res) => res / 2,\n                        faceColor: '#0000ff',\n                        edgeThickness: 0.1,\n                        edgeColor: 'black',\n                        resolution: 400,\n                    },\n                },\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n                    polyDataURL: 'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this.onSetToolEnabled = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolActive = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolDisabled = () => {\n            this.cleanUpData();\n            this._unsubscribeToViewportNewVolumeSet();\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resize = (viewportId) => {\n            const orientationMarker = this.orientationMarkers[viewportId];\n            if (!orientationMarker) {\n                return;\n            }\n            const { orientationWidget } = orientationMarker;\n            orientationWidget.updateViewport();\n        };\n        this.orientationMarkers = {};\n        this.updatingOrientationMarker = {};\n    }\n    _unsubscribeToViewportNewVolumeSet() {\n        const unsubscribe = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = this._resizeObservers.get(viewportId);\n                resizeObserver.unobserve(element);\n            });\n        };\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            unsubscribe();\n            this.initViewports();\n        });\n    }\n    _subscribeToViewportEvents() {\n        const subscribeToElementResize = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                this.initViewports();\n                element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => {\n                        const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                        if (!element) {\n                            return;\n                        }\n                        const { viewport } = element;\n                        this.resize(viewportId);\n                        viewport.render();\n                    }, 100);\n                });\n                resizeObserver.observe(element);\n                this._resizeObservers.set(viewportId, resizeObserver);\n            });\n        };\n        subscribeToElementResize();\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            subscribeToElementResize();\n            this.initViewports();\n        });\n    }\n    cleanUpData() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        const viewports = renderingEngine.getViewports();\n        viewports.forEach((viewport) => {\n            const orientationMarker = this.orientationMarkers[viewport.id];\n            if (!orientationMarker) {\n                return;\n            }\n            const { actor, orientationWidget } = orientationMarker;\n            orientationWidget?.setEnabled(false);\n            orientationWidget?.delete();\n            actor?.delete();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .offscreenMultiRenderWindow.getRenderWindow();\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            delete this.orientationMarkers[viewport.id];\n        });\n    }\n    initViewports() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        if (!renderingEngine) {\n            return;\n        }\n        let viewports = renderingEngine.getViewports();\n        viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n        viewports.forEach((viewport) => {\n            const widget = viewport.getWidget(this.getToolName());\n            if (!widget || widget.isDeleted()) {\n                this.addAxisActorInViewport(viewport);\n            }\n        });\n    }\n    async addAxisActorInViewport(viewport) {\n        const viewportId = viewport.id;\n        if (!this.updatingOrientationMarker[viewportId]) {\n            this.updatingOrientationMarker[viewportId] = true;\n            const type = this.configuration.overlayMarkerType;\n            const overlayConfiguration = this.configuration.overlayConfiguration[type];\n            if (this.orientationMarkers[viewportId]) {\n                const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n                viewport.getRenderer().removeActor(actor);\n                orientationWidget.setEnabled(false);\n            }\n            let actor;\n            if (type === 1) {\n                actor = this.createAnnotationCube(overlayConfiguration);\n            }\n            else if (type === 2) {\n                actor = vtkAxesActor.newInstance();\n            }\n            else if (type === 3) {\n                actor = await this.createCustomActor();\n            }\n            const renderer = viewport.getRenderer();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .offscreenMultiRenderWindow.getRenderWindow();\n            const { enabled, viewportCorner, viewportSize, minPixelSize, maxPixelSize, } = this.configuration.orientationWidget;\n            const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n                actor,\n                interactor: renderWindow.getInteractor(),\n                parentRenderer: renderer,\n            });\n            orientationWidget.setEnabled(enabled);\n            orientationWidget.setViewportCorner(viewportCorner);\n            orientationWidget.setViewportSize(viewportSize);\n            orientationWidget.setMinPixelSize(minPixelSize);\n            orientationWidget.setMaxPixelSize(maxPixelSize);\n            orientationWidget.updateMarkerOrientation();\n            this.orientationMarkers[viewportId] = {\n                orientationWidget,\n                actor,\n            };\n            viewport.addWidget(this.getToolName(), orientationWidget);\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            this.updatingOrientationMarker[viewportId] = false;\n        }\n    }\n    async createCustomActor() {\n        const url = this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n            .polyDataURL;\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const vtpReader = vtkXMLPolyDataReader.newInstance();\n        vtpReader.parseAsArrayBuffer(arrayBuffer);\n        vtpReader.update();\n        const polyData = vtkPolyData.newInstance();\n        polyData.shallowCopy(vtpReader.getOutputData());\n        polyData.getPointData().setActiveScalars('Color');\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        mapper.setColorModeToDirectScalars();\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.rotateZ(180);\n        return actor;\n    }\n    createAnnotationCube(overlayConfiguration) {\n        const actor = vtkAnnotatedCubeActor.newInstance();\n        actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n        actor.setXPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.xPlus,\n        });\n        actor.setXMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.xMinus,\n        });\n        actor.setYPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.yPlus,\n        });\n        actor.setYMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.yMinus,\n        });\n        actor.setZPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.zPlus,\n        });\n        actor.setZMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.zMinus,\n        });\n        return actor;\n    }\n    async createAnnotatedCubeActor() {\n        const axes = vtkAnnotatedCubeActor.newInstance();\n        const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n        axes.setDefaultStyle(defaultStyle);\n        Object.keys(faceProperties).forEach((key) => {\n            const methodName = `set${key.charAt(0).toUpperCase() + key.slice(1)}FaceProperty`;\n            axes[methodName](faceProperties[key]);\n        });\n        return axes;\n    }\n}\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport RepresentationTypes from '../../enums/SegmentationRepresentations';\nimport { setActiveSegmentIndex } from '../../stateManagement/segmentation/segmentIndex';\nimport { getHoveredContourSegmentationAnnotation, getSegmentIndexAtLabelmapBorder, getSegmentIndexAtWorldPoint, } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nclass SegmentSelectTool extends BaseTool {\n    static { this.SelectMode = {\n        Inside: 'Inside',\n        Border: 'Border',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            mode: SegmentSelectTool.SelectMode.Border,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setActiveSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.hoverTimer = null;\n    }\n    _setActiveSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setActiveSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setActiveSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId, representationData } = activeSegmentation;\n        let hoveredSegmentIndex;\n        if (this.configuration.mode === SegmentSelectTool.SelectMode.Inside) {\n            hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n                viewport,\n            });\n        }\n        else {\n            if (representationData.Labelmap) {\n                hoveredSegmentIndex = getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, {\n                    viewport,\n                    searchRadius: this.configuration.searchRadius,\n                });\n            }\n            else if (representationData.Contour) {\n                hoveredSegmentIndex =\n                    getHoveredContourSegmentationAnnotation(segmentationId);\n            }\n            else if (representationData.Surface) {\n            }\n        }\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        setActiveSegmentIndex(segmentationId, hoveredSegmentIndex);\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n}\nSegmentSelectTool.toolName = 'SegmentSelectTool';\nexport default SegmentSelectTool;\n","import { vec3, vec2 } from 'gl-matrix';\nimport { getEnabledElement, triggerEvent, eventTarget, utilities as csUtils, cache, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { drawHandles as drawHandlesSvg, drawRedactionRect as drawRedactionRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nclass VideoRedactionTool extends AnnotationTool {\n    constructor(toolConfiguration = {}) {\n        super(toolConfiguration, {\n            supportedInteractionTypes: ['Mouse', 'Touch'],\n            configuration: { shadow: true, preventHandleOutsideImage: false },\n        });\n        this.addNewAnnotation = (evt) => {\n            const eventData = evt.detail;\n            const { currentPoints, element } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                metadata: {\n                    viewPlaneNormal: [0, 0, 1],\n                    viewUp: [0, 1, 0],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId,\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    invalidated: true,\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    active: true,\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            return annotation;\n        };\n        this.getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i];\n                const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n                const near = vec2.distance(canvasCoords, toolDataCanvasCoordinate) < proximity;\n                if (near === true) {\n                    data.handles.activeHandleIndex = i;\n                    return point;\n                }\n            }\n            data.handles.activeHandleIndex = null;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this._mouseUpCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.active = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._mouseDragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventData;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                data.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventData;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                data.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseDragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n            element.addEventListener(Events.TOUCH_END, this._mouseUpCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseDragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n            element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n            element.addEventListener(Events.TOUCH_END, this._mouseUpCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n            element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID } = annotation;\n                const toolMetadata = annotation.metadata;\n                const data = annotation.data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return;\n                }\n                let activeHandleCanvasCoords;\n                if (!this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRedactionRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color: 'black',\n                    lineDash,\n                    lineWidth,\n                });\n            }\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetUIDs = Object.keys(cachedStats);\n            for (let i = 0; i < targetUIDs.length; i++) {\n                const targetUID = targetUIDs[i];\n                const { imageVolume } = this._getImageVolumeFromTargetUID(targetUID, renderingEngine);\n                const { dimensions, scalarData, vtkImageData: imageData, metadata, } = imageVolume;\n                const worldPos1Index = vec3.fromValues(0, 0, 0);\n                const worldPos2Index = vec3.fromValues(0, 0, 0);\n                imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n                worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n                worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n                worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n                imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n                worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n                worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n                worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const area = worldWidth * worldHeight;\n                    let count = 0;\n                    let mean = 0;\n                    let stdDev = 0;\n                    const yMultiple = dimensions[0];\n                    const zMultiple = dimensions[0] * dimensions[1];\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                count++;\n                                mean += value;\n                            }\n                        }\n                    }\n                    mean /= count;\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                const valueMinusMean = value - mean;\n                                stdDev += valueMinusMean * valueMinusMean;\n                            }\n                        }\n                    }\n                    stdDev /= count;\n                    stdDev = Math.sqrt(stdDev);\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean,\n                        stdDev,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            data.invalidated = false;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportUID,\n                renderingEngineUID,\n                sceneUID: sceneUID,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._getTargetVolumeUID = (scene) => {\n            if (this.configuration.volumeUID) {\n                return this.configuration.volumeUID;\n            }\n            const volumeActors = scene.getVolumeActors();\n            if (!volumeActors && !volumeActors.length) {\n                return;\n            }\n            return volumeActors[0].uid;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportUIDsToRender } = this.editData;\n        const { data } = annotation;\n        data.active = false;\n        data.handles.activeHandleIndex = null;\n        triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        this.editData = null;\n        return annotation.metadata.annotationUID;\n    }\n    _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n        let imageVolume, viewport;\n        if (targetUID.startsWith('stackTarget')) {\n            const coloneIndex = targetUID.indexOf(':');\n            const viewportUID = targetUID.substring(coloneIndex + 1);\n            const viewport = renderingEngine.getViewport(viewportUID);\n            imageVolume = viewport.getImageData();\n        }\n        else {\n            imageVolume = cache.getVolume(targetUID);\n        }\n        return { imageVolume, viewport };\n    }\n    _getTargetStackUID(viewport) {\n        return `stackTarget:${viewport.uid}`;\n    }\n}\nVideoRedactionTool.toolName = 'VideoRedaction';\nexport default VideoRedactionTool;\n","import { getEnabledElement, triggerEvent, getRenderingEngine, } from '@cornerstonejs/core';\nimport { Events, ToolModes } from '../../enums';\nimport { draw as drawSvg } from '../../drawingSvg';\nimport getToolsWithModesForElement from '../../utilities/getToolsWithModesForElement';\nconst { Active, Passive, Enabled } = ToolModes;\nclass AnnotationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._renderFlaggedViewports = () => {\n            this._throwIfDestroyed();\n            const elements = Array.from(this._viewportElements.values());\n            for (let i = 0; i < elements.length; i++) {\n                const element = elements[i];\n                if (this._needsRender.has(element)) {\n                    this._triggerRender(element);\n                    this._needsRender.delete(element);\n                    if (this._needsRender.size === 0) {\n                        break;\n                    }\n                }\n            }\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n            this._render();\n        };\n        this._viewportElements = new Map();\n    }\n    addViewportElement(viewportId, element) {\n        this._viewportElements.set(viewportId, element);\n    }\n    removeViewportElement(viewportId, element) {\n        this._viewportElements.delete(viewportId);\n        this._needsRender.delete(element);\n        this._reset();\n    }\n    renderViewport(element) {\n        this._setViewportsToBeRenderedNextFrame([element]);\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setAllViewportsToBeRenderedNextFrame() {\n        const elements = [...this._viewportElements.values()];\n        elements.forEach((element) => {\n            this._needsRender.add(element);\n        });\n        this._renderFlaggedViewports();\n    }\n    _setViewportsToBeRenderedNextFrame(elements) {\n        const elementsEnabled = [...this._viewportElements.values()];\n        elements.forEach((element) => {\n            if (elementsEnabled.indexOf(element) !== -1) {\n                this._needsRender.add(element);\n            }\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedViewports);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(element) {\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const renderingEngine = getRenderingEngine(enabledElement.renderingEngineId);\n        if (!renderingEngine) {\n            console.warn('rendering Engine has been destroyed');\n            return;\n        }\n        const enabledTools = getToolsWithModesForElement(element, [\n            Active,\n            Passive,\n            Enabled,\n        ]);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const eventDetail = {\n            element,\n            renderingEngineId,\n            viewportId,\n        };\n        drawSvg(element, (svgDrawingHelper) => {\n            let anyRendered = false;\n            const handleDrawSvg = (tool) => {\n                if (tool.renderAnnotation) {\n                    const rendered = tool.renderAnnotation(enabledElement, svgDrawingHelper);\n                    anyRendered = anyRendered || rendered;\n                }\n            };\n            enabledTools.forEach(handleDrawSvg);\n            if (anyRendered) {\n                triggerEvent(element, Events.ANNOTATION_RENDERED, { ...eventDetail });\n            }\n        });\n    }\n    _reset() {\n        window.cancelAnimationFrame(this._animationFrameHandle);\n        this._needsRender.clear();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._setAllViewportsToBeRenderedNextFrame();\n    }\n}\nconst annotationRenderingEngine = new AnnotationRenderingEngine();\nexport { annotationRenderingEngine };\n","import { Enums, eventTarget, getEnabledElement, utilities, } from '@cornerstonejs/core';\nclass FrameOfReferenceSpecificAnnotationManager {\n    constructor(uid) {\n        this.getGroupKey = (annotationGroupSelector) => {\n            if (typeof annotationGroupSelector === 'string') {\n                return annotationGroupSelector;\n            }\n            const element = annotationGroupSelector;\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('Element not enabled, you must have an enabled element if you are not providing a FrameOfReferenceUID');\n            }\n            return enabledElement.FrameOfReferenceUID;\n        };\n        this._imageVolumeModifiedHandler = (evt) => {\n            const eventDetail = evt.detail;\n            const { FrameOfReferenceUID } = eventDetail;\n            const annotations = this.annotations;\n            const frameOfReferenceSpecificAnnotations = annotations[FrameOfReferenceUID];\n            if (!frameOfReferenceSpecificAnnotations) {\n                return;\n            }\n            Object.keys(frameOfReferenceSpecificAnnotations).forEach((toolName) => {\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                toolSpecificAnnotations.forEach((annotation) => {\n                    const invalidated = annotation.invalidated;\n                    if (invalidated !== undefined) {\n                        annotation.invalidated = true;\n                    }\n                });\n            });\n        };\n        this.getFramesOfReference = () => {\n            return Object.keys(this.annotations);\n        };\n        this.getAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (!annotations[groupKey]) {\n                return [];\n            }\n            if (toolName) {\n                return annotations[groupKey][toolName]\n                    ? annotations[groupKey][toolName]\n                    : [];\n            }\n            return annotations[groupKey];\n        };\n        this.getAnnotation = (annotationUID) => {\n            const annotations = this.annotations;\n            for (const frameOfReferenceUID in annotations) {\n                const frameOfReferenceAnnotations = annotations[frameOfReferenceUID];\n                for (const toolName in frameOfReferenceAnnotations) {\n                    const toolSpecificAnnotations = frameOfReferenceAnnotations[toolName];\n                    for (const annotation of toolSpecificAnnotations) {\n                        if (annotationUID === annotation.annotationUID) {\n                            return annotation;\n                        }\n                    }\n                }\n            }\n        };\n        this.getNumberOfAnnotations = (groupKey, toolName) => {\n            const annotations = this.getAnnotations(groupKey, toolName);\n            if (!annotations.length) {\n                return 0;\n            }\n            if (toolName) {\n                return annotations.length;\n            }\n            let total = 0;\n            for (const toolName in annotations) {\n                total += annotations[toolName].length;\n            }\n            return total;\n        };\n        this.addAnnotation = (annotation, groupKey) => {\n            const { metadata } = annotation;\n            const { FrameOfReferenceUID, toolName } = metadata;\n            groupKey = groupKey || FrameOfReferenceUID;\n            const annotations = this.annotations;\n            let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n            if (!frameOfReferenceSpecificAnnotations) {\n                annotations[groupKey] = {};\n                frameOfReferenceSpecificAnnotations = annotations[groupKey];\n            }\n            let toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n            if (!toolSpecificAnnotations) {\n                frameOfReferenceSpecificAnnotations[toolName] = [];\n                toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n            }\n            if (this.preprocessingFn) {\n                annotation = this.preprocessingFn(annotation);\n            }\n            toolSpecificAnnotations.push(annotation);\n        };\n        this.removeAnnotation = (annotationUID) => {\n            const { annotations } = this;\n            for (const groupKey in annotations) {\n                const groupAnnotations = annotations[groupKey];\n                for (const toolName in groupAnnotations) {\n                    const toolAnnotations = groupAnnotations[toolName];\n                    const index = toolAnnotations.findIndex((annotation) => annotation.annotationUID === annotationUID);\n                    if (index !== -1) {\n                        toolAnnotations.splice(index, 1);\n                        if (toolAnnotations.length === 0) {\n                            delete groupAnnotations[toolName];\n                        }\n                    }\n                }\n                if (Object.keys(groupAnnotations).length === 0) {\n                    delete annotations[groupKey];\n                }\n            }\n        };\n        this.removeAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            const removedAnnotations = [];\n            if (!annotations[groupKey]) {\n                return removedAnnotations;\n            }\n            if (toolName) {\n                const annotationsForTool = annotations[groupKey][toolName];\n                for (const annotation of annotationsForTool) {\n                    this.removeAnnotation(annotation.annotationUID);\n                    removedAnnotations.push(annotation);\n                }\n            }\n            else {\n                for (const toolName in annotations[groupKey]) {\n                    const annotationsForTool = annotations[groupKey][toolName];\n                    for (const annotation of annotationsForTool) {\n                        this.removeAnnotation(annotation.annotationUID);\n                        removedAnnotations.push(annotation);\n                    }\n                }\n            }\n            return removedAnnotations;\n        };\n        this.saveAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (groupKey && toolName) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                if (!frameOfReferenceSpecificAnnotations) {\n                    return;\n                }\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                return structuredClone(toolSpecificAnnotations);\n            }\n            else if (groupKey) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                return structuredClone(frameOfReferenceSpecificAnnotations);\n            }\n            return structuredClone(annotations);\n        };\n        this.restoreAnnotations = (state, groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (groupKey && toolName) {\n                let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                if (!frameOfReferenceSpecificAnnotations) {\n                    annotations[groupKey] = {};\n                    frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                }\n                frameOfReferenceSpecificAnnotations[toolName] = state;\n            }\n            else if (groupKey) {\n                annotations[groupKey] = state;\n            }\n            else {\n                this.annotations = structuredClone(state);\n            }\n        };\n        this.getAllAnnotations = () => {\n            return Object.values(this.annotations)\n                .map((frameOfReferenceSpecificAnnotations) => Object.values(frameOfReferenceSpecificAnnotations))\n                .flat(2);\n        };\n        this.getNumberOfAllAnnotations = () => {\n            let count = 0;\n            const annotations = this.annotations;\n            for (const groupKey in annotations) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                for (const toolName in frameOfReferenceSpecificAnnotations) {\n                    const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                    count += toolSpecificAnnotations.length;\n                }\n            }\n            return count;\n        };\n        this.removeAllAnnotations = () => {\n            const removedAnnotations = [];\n            for (const annotation of this.getAllAnnotations()) {\n                this.removeAnnotation(annotation.annotationUID);\n                removedAnnotations.push(annotation);\n            }\n            return removedAnnotations;\n        };\n        if (!uid) {\n            uid = utilities.uuidv4();\n        }\n        this.annotations = {};\n        this.uid = uid;\n        eventTarget.addEventListener(Enums.Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedHandler);\n    }\n    setPreprocessingFn(preprocessingFn) {\n        this.preprocessingFn = preprocessingFn;\n    }\n}\nconst defaultFrameOfReferenceSpecificAnnotationManager = new FrameOfReferenceSpecificAnnotationManager('DEFAULT');\nexport { defaultFrameOfReferenceSpecificAnnotationManager };\nexport default FrameOfReferenceSpecificAnnotationManager;\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { getAnnotation } from './getAnnotation';\nconst globalLockedAnnotationUIDsSet = new Set();\nfunction setAnnotationLocked(annotationUID, locked = true) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (locked) {\n            lock(annotationUID, globalLockedAnnotationUIDsSet, detail);\n        }\n        else {\n            unlock(annotationUID, globalLockedAnnotationUIDsSet, detail);\n        }\n    }\n    publish(detail, globalLockedAnnotationUIDsSet);\n}\nfunction unlockAllAnnotations() {\n    const detail = makeEventDetail();\n    clearLockedAnnotationsSet(globalLockedAnnotationUIDsSet, detail);\n    publish(detail, globalLockedAnnotationUIDsSet);\n}\nfunction getAnnotationsLocked() {\n    return Array.from(globalLockedAnnotationUIDsSet);\n}\nfunction isAnnotationLocked(annotationUID) {\n    return globalLockedAnnotationUIDsSet.has(annotationUID);\n}\nfunction getAnnotationsLockedCount() {\n    return globalLockedAnnotationUIDsSet.size;\n}\nfunction checkAndSetAnnotationLocked(annotationUID) {\n    const isLocked = isAnnotationLocked(annotationUID);\n    setAnnotationLocked(annotationUID, isLocked);\n    return isLocked;\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        added: [],\n        removed: [],\n        locked: [],\n    });\n}\nfunction lock(annotationUID, lockedAnnotationUIDsSet, detail) {\n    if (!lockedAnnotationUIDsSet.has(annotationUID)) {\n        lockedAnnotationUIDsSet.add(annotationUID);\n        detail.added.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isLocked = true;\n        }\n    }\n}\nfunction unlock(annotationUID, lockedAnnotationUIDsSet, detail) {\n    if (lockedAnnotationUIDsSet.delete(annotationUID)) {\n        detail.removed.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isLocked = false;\n        }\n    }\n}\nfunction clearLockedAnnotationsSet(lockedAnnotationUIDsSet, detail) {\n    lockedAnnotationUIDsSet.forEach((annotationUID) => {\n        unlock(annotationUID, lockedAnnotationUIDsSet, detail);\n    });\n}\nfunction publish(detail, lockedAnnotationUIDsSet) {\n    if (detail.added.length > 0 || detail.removed.length > 0) {\n        lockedAnnotationUIDsSet.forEach((item) => void detail.locked.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_LOCK_CHANGE, detail);\n    }\n}\nexport { setAnnotationLocked, getAnnotationsLocked, getAnnotationsLockedCount, unlockAllAnnotations, isAnnotationLocked, checkAndSetAnnotationLocked, };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { getAnnotation } from './getAnnotation';\nconst selectedAnnotationUIDs = new Set();\nfunction setAnnotationSelected(annotationUID, selected = true, preserveSelected = false) {\n    if (selected) {\n        selectAnnotation(annotationUID, preserveSelected);\n    }\n    else {\n        deselectAnnotation(annotationUID);\n    }\n}\nfunction selectAnnotation(annotationUID, preserveSelected = false) {\n    const detail = makeEventDetail();\n    if (!preserveSelected) {\n        clearSelectionSet(selectedAnnotationUIDs, detail);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isSelected = true;\n        }\n    }\n    if (annotationUID && !selectedAnnotationUIDs.has(annotationUID)) {\n        selectedAnnotationUIDs.add(annotationUID);\n        detail.added.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isSelected = true;\n        }\n    }\n    publish(detail, selectedAnnotationUIDs);\n}\nfunction deselectAnnotation(annotationUID) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (selectedAnnotationUIDs.delete(annotationUID)) {\n            detail.removed.push(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            annotation.isSelected = false;\n        }\n    }\n    else {\n        clearSelectionSet(selectedAnnotationUIDs, detail);\n    }\n    publish(detail, selectedAnnotationUIDs);\n}\nfunction getAnnotationsSelected() {\n    return Array.from(selectedAnnotationUIDs);\n}\nfunction getAnnotationsSelectedByToolName(toolName) {\n    return getAnnotationsSelected().filter((annotationUID) => {\n        const annotation = getAnnotation(annotationUID);\n        return annotation?.metadata?.toolName === toolName;\n    });\n}\nfunction isAnnotationSelected(annotationUID) {\n    return selectedAnnotationUIDs.has(annotationUID);\n}\nfunction getAnnotationsSelectedCount() {\n    return selectedAnnotationUIDs.size;\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        added: [],\n        removed: [],\n        selection: [],\n    });\n}\nfunction clearSelectionSet(selectionSet, detail) {\n    selectionSet.forEach((value) => {\n        if (selectionSet.delete(value)) {\n            detail.removed.push(value);\n            const annotation = getAnnotation(value);\n            if (annotation) {\n                annotation.isSelected = false;\n            }\n        }\n    });\n}\nfunction publish(detail, selectionSet) {\n    if (detail.added.length > 0 || detail.removed.length > 0) {\n        selectionSet.forEach((item) => void detail.selection.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_SELECTION_CHANGE, detail);\n    }\n}\nexport { setAnnotationSelected, getAnnotationsSelected, getAnnotationsSelectedByToolName, getAnnotationsSelectedCount, deselectAnnotation, isAnnotationSelected, };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { defaultFrameOfReferenceSpecificAnnotationManager } from './FrameOfReferenceSpecificAnnotationManager';\nimport { getAnnotation } from './getAnnotation';\nimport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR, triggerAnnotationRemoved, } from './helpers/state';\nimport { checkAndSetAnnotationLocked } from './annotationLocking';\nimport { checkAndDefineCachedStatsProperty, checkAndDefineTextBoxProperty, } from './utilities/defineProperties';\nimport { checkAndSetAnnotationVisibility } from './annotationVisibility';\nlet defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\nconst preprocessingFn = (annotation) => {\n    annotation = checkAndDefineTextBoxProperty(annotation);\n    annotation = checkAndDefineCachedStatsProperty(annotation);\n    const uid = annotation.annotationUID;\n    const isLocked = checkAndSetAnnotationLocked(uid);\n    annotation.isLocked = isLocked;\n    const isVisible = checkAndSetAnnotationVisibility(uid);\n    annotation.isVisible = isVisible;\n    return annotation;\n};\ndefaultManager.setPreprocessingFn(preprocessingFn);\nfunction getAnnotationManager() {\n    return defaultManager;\n}\nfunction setAnnotationManager(annotationManager) {\n    defaultManager = annotationManager;\n}\nfunction resetAnnotationManager() {\n    defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\n}\nfunction getAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    return manager.getAnnotations(groupKey, toolName);\n}\nfunction getAllAnnotations() {\n    const manager = getAnnotationManager();\n    return manager.getAllAnnotations();\n}\nfunction clearParentAnnotation(annotation) {\n    const { annotationUID: childUID, parentAnnotationUID } = annotation;\n    if (!parentAnnotationUID) {\n        return;\n    }\n    const parentAnnotation = getAnnotation(parentAnnotationUID);\n    const childUIDIndex = parentAnnotation.childAnnotationUIDs.indexOf(childUID);\n    parentAnnotation.childAnnotationUIDs.splice(childUIDIndex, 1);\n    annotation.parentAnnotationUID = undefined;\n}\nfunction addChildAnnotation(parentAnnotation, childAnnotation) {\n    const { annotationUID: parentUID } = parentAnnotation;\n    const { annotationUID: childUID } = childAnnotation;\n    clearParentAnnotation(childAnnotation);\n    if (!parentAnnotation.childAnnotationUIDs) {\n        parentAnnotation.childAnnotationUIDs = [];\n    }\n    if (parentAnnotation.childAnnotationUIDs.includes(childUID)) {\n        return;\n    }\n    parentAnnotation.childAnnotationUIDs.push(childUID);\n    childAnnotation.parentAnnotationUID = parentUID;\n}\nfunction getParentAnnotation(annotation) {\n    return annotation.parentAnnotationUID\n        ? getAnnotation(annotation.parentAnnotationUID)\n        : undefined;\n}\nfunction getChildAnnotations(annotation) {\n    return (annotation.childAnnotationUIDs?.map((childAnnotationUID) => getAnnotation(childAnnotationUID)) ?? []);\n}\nfunction addAnnotation(annotation, annotationGroupSelector) {\n    if (!annotation.annotationUID) {\n        annotation.annotationUID = csUtils.uuidv4();\n    }\n    const manager = getAnnotationManager();\n    if (annotationGroupSelector instanceof HTMLDivElement) {\n        const groupKey = manager.getGroupKey(annotationGroupSelector);\n        manager.addAnnotation(annotation, groupKey);\n        triggerAnnotationAddedForElement(annotation, annotationGroupSelector);\n    }\n    else {\n        manager.addAnnotation(annotation, undefined);\n        triggerAnnotationAddedForFOR(annotation);\n    }\n    return annotation.annotationUID;\n}\nfunction getNumberOfAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    return manager.getNumberOfAnnotations(groupKey, toolName);\n}\nfunction removeAnnotation(annotationUID) {\n    if (!annotationUID) {\n        return;\n    }\n    const manager = getAnnotationManager();\n    const annotation = manager.getAnnotation(annotationUID);\n    if (!annotation) {\n        return;\n    }\n    annotation.childAnnotationUIDs?.forEach((childAnnotationUID) => removeAnnotation(childAnnotationUID));\n    manager.removeAnnotation(annotationUID);\n    triggerAnnotationRemoved({ annotation, annotationManagerUID: manager.uid });\n}\nfunction removeAllAnnotations() {\n    const manager = getAnnotationManager();\n    const removedAnnotations = manager.removeAllAnnotations();\n    for (const annotation of removedAnnotations) {\n        triggerAnnotationRemoved({\n            annotation,\n            annotationManagerUID: manager.uid,\n        });\n    }\n}\nfunction removeAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    const removedAnnotations = manager.removeAnnotations(groupKey, toolName);\n    for (const annotation of removedAnnotations) {\n        triggerAnnotationRemoved({\n            annotation,\n            annotationManagerUID: manager.uid,\n        });\n    }\n}\nfunction invalidateAnnotation(annotation) {\n    let currAnnotation = annotation;\n    while (currAnnotation) {\n        currAnnotation.invalidated = true;\n        currAnnotation = currAnnotation.parentAnnotationUID\n            ? getAnnotation(currAnnotation.parentAnnotationUID)\n            : undefined;\n    }\n}\nexport { getAllAnnotations, getAnnotations, getParentAnnotation, getChildAnnotations, clearParentAnnotation, addChildAnnotation, getNumberOfAnnotations, addAnnotation, removeAnnotation, removeAnnotations, removeAllAnnotations, setAnnotationManager, getAnnotationManager, resetAnnotationManager, invalidateAnnotation, getAnnotation, };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { isAnnotationSelected, deselectAnnotation, } from './annotationSelection';\nimport { getAnnotation } from './getAnnotation';\nconst globalHiddenAnnotationUIDsSet = new Set();\nfunction setAnnotationVisibility(annotationUID, visible = true) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (visible) {\n            show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n        }\n        else {\n            hide(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n        }\n    }\n    publish(detail);\n}\nfunction showAllAnnotations() {\n    const detail = makeEventDetail();\n    globalHiddenAnnotationUIDsSet.forEach((annotationUID) => {\n        show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    });\n    publish(detail);\n}\nfunction isAnnotationVisible(annotationUID) {\n    const annotation = getAnnotation(annotationUID);\n    if (annotation) {\n        return !globalHiddenAnnotationUIDsSet.has(annotationUID);\n    }\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        lastVisible: [],\n        lastHidden: [],\n        hidden: [],\n    });\n}\nfunction show(annotationUID, annotationUIDsSet, detail) {\n    if (annotationUIDsSet.delete(annotationUID)) {\n        detail.lastVisible.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        annotation.isVisible = true;\n    }\n}\nfunction hide(annotationUID, annotationUIDsSet, detail) {\n    if (!annotationUIDsSet.has(annotationUID)) {\n        annotationUIDsSet.add(annotationUID);\n        if (isAnnotationSelected(annotationUID)) {\n            deselectAnnotation(annotationUID);\n        }\n        detail.lastHidden.push(annotationUID);\n    }\n}\nfunction publish(detail) {\n    if (detail.lastHidden.length > 0 || detail.lastVisible.length > 0) {\n        globalHiddenAnnotationUIDsSet.forEach((item) => void detail.hidden.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_VISIBILITY_CHANGE, detail);\n    }\n}\nfunction checkAndSetAnnotationVisibility(annotationUID) {\n    const isVisible = !globalHiddenAnnotationUIDsSet.has(annotationUID);\n    setAnnotationVisibility(annotationUID, isVisible);\n    return isVisible;\n}\nexport { setAnnotationVisibility, showAllAnnotations, isAnnotationVisible, checkAndSetAnnotationVisibility, };\n","class ToolStyle {\n    constructor() {\n        const defaultConfig = {\n            color: 'rgb(255, 255, 0)',\n            colorHighlighted: 'rgb(0, 255, 0)',\n            colorSelected: 'rgb(0, 220, 0)',\n            colorLocked: 'rgb(209, 193, 90)',\n            lineWidth: '1',\n            lineDash: '',\n            shadow: true,\n            textBoxVisibility: true,\n            textBoxFontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            textBoxFontSize: '14px',\n            textBoxColor: 'rgb(255, 255, 0)',\n            textBoxColorHighlighted: 'rgb(0, 255, 0)',\n            textBoxColorSelected: 'rgb(0, 255, 0)',\n            textBoxColorLocked: 'rgb(209, 193, 90)',\n            textBoxBackground: '',\n            textBoxLinkLineWidth: '1',\n            textBoxLinkLineDash: '2,3',\n            textBoxShadow: true,\n        };\n        this._initializeConfig(defaultConfig);\n    }\n    getAnnotationToolStyles(annotationUID) {\n        return this.config.annotations && this.config.annotations[annotationUID];\n    }\n    getViewportToolStyles(viewportId) {\n        return this.config.viewports && this.config.viewports[viewportId];\n    }\n    getToolGroupToolStyles(toolGroupId) {\n        return this.config.toolGroups && this.config.toolGroups[toolGroupId];\n    }\n    getDefaultToolStyles() {\n        return this.config.default;\n    }\n    setAnnotationStyles(annotationUID, styles) {\n        let annotationSpecificStyles = this.config.annotations;\n        if (!annotationSpecificStyles) {\n            this.config = {\n                ...this.config,\n                annotations: {},\n            };\n            annotationSpecificStyles = this.config.annotations;\n        }\n        annotationSpecificStyles[annotationUID] = styles;\n    }\n    setViewportToolStyles(viewportId, styles) {\n        let viewportSpecificStyles = this.config.viewports;\n        if (!viewportSpecificStyles) {\n            this.config = {\n                ...this.config,\n                viewports: {},\n            };\n            viewportSpecificStyles = this.config.viewports;\n        }\n        viewportSpecificStyles[viewportId] = styles;\n    }\n    setToolGroupToolStyles(toolGroupId, styles) {\n        let toolGroupSpecificStyles = this.config.toolGroups;\n        if (!toolGroupSpecificStyles) {\n            this.config = {\n                ...this.config,\n                toolGroups: {},\n            };\n            toolGroupSpecificStyles = this.config.toolGroups;\n        }\n        toolGroupSpecificStyles[toolGroupId] = styles;\n    }\n    setDefaultToolStyles(styles) {\n        this.config.default = styles;\n    }\n    getStyleProperty(toolStyle, specifications) {\n        const { annotationUID, viewportId, toolGroupId, toolName } = specifications;\n        return this._getToolStyle(toolStyle, annotationUID, viewportId, toolGroupId, toolName);\n    }\n    _getToolStyle(property, annotationUID, viewportId, toolGroupId, toolName) {\n        if (annotationUID) {\n            const annotationToolStyles = this.getAnnotationToolStyles(annotationUID);\n            if (annotationToolStyles) {\n                if (annotationToolStyles[property] !== undefined) {\n                    return annotationToolStyles[property];\n                }\n            }\n        }\n        if (viewportId) {\n            const viewportToolStyles = this.getViewportToolStyles(viewportId);\n            if (viewportToolStyles) {\n                if (viewportToolStyles[toolName] &&\n                    viewportToolStyles[toolName][property] !== undefined) {\n                    return viewportToolStyles[toolName][property];\n                }\n                if (viewportToolStyles.global &&\n                    viewportToolStyles.global[property] !== undefined) {\n                    return viewportToolStyles.global[property];\n                }\n            }\n        }\n        if (toolGroupId) {\n            const toolGroupToolStyles = this.getToolGroupToolStyles(toolGroupId);\n            if (toolGroupToolStyles) {\n                if (toolGroupToolStyles[toolName] &&\n                    toolGroupToolStyles[toolName][property] !== undefined) {\n                    return toolGroupToolStyles[toolName][property];\n                }\n                if (toolGroupToolStyles.global &&\n                    toolGroupToolStyles.global[property] !== undefined) {\n                    return toolGroupToolStyles.global[property];\n                }\n            }\n        }\n        const globalStyles = this.getDefaultToolStyles();\n        if (globalStyles[toolName] &&\n            globalStyles[toolName][property] !== undefined) {\n            return globalStyles[toolName][property];\n        }\n        if (globalStyles.global && globalStyles.global[property] !== undefined) {\n            return globalStyles.global[property];\n        }\n    }\n    _initializeConfig(config) {\n        const toolStyles = {};\n        for (const name in config) {\n            toolStyles[name] = config[name];\n        }\n        this.config = {\n            default: {\n                global: toolStyles,\n            },\n        };\n    }\n}\nconst toolStyle = new ToolStyle();\nexport default toolStyle;\n","import toolStyle from './ToolStyle';\nfunction getHierarchalPropertyStyles(property, state, mode) {\n    const list = [`${property}`];\n    if (state) {\n        list.push(`${list[0]}${state}`);\n    }\n    if (mode) {\n        list.push(`${list[list.length - 1]}${mode}`);\n    }\n    return list;\n}\nfunction getStyleProperty(property, styleSpecifier, state, mode) {\n    const alternatives = getHierarchalPropertyStyles(property, state, mode);\n    for (let i = alternatives.length - 1; i >= 0; --i) {\n        const style = toolStyle.getStyleProperty(alternatives[i], styleSpecifier);\n        if (style !== undefined) {\n            return style;\n        }\n    }\n}\nexport { getStyleProperty };\n","import { isAnnotationLocked } from '../annotationLocking';\nimport { isAnnotationSelected } from '../annotationSelection';\nimport { AnnotationStyleStates } from '../../../enums';\nfunction getState(annotation) {\n    if (annotation) {\n        if (annotation.data && annotation.highlighted) {\n            return AnnotationStyleStates.Highlighted;\n        }\n        if (isAnnotationSelected(annotation.annotationUID)) {\n            return AnnotationStyleStates.Selected;\n        }\n        if (isAnnotationLocked(annotation.annotationUID)) {\n            return AnnotationStyleStates.Locked;\n        }\n        if (annotation.data && annotation.autoGenerated) {\n            return AnnotationStyleStates.AutoGenerated;\n        }\n    }\n    return AnnotationStyleStates.Default;\n}\nexport default getState;\n","import { defaultFrameOfReferenceSpecificAnnotationManager } from './FrameOfReferenceSpecificAnnotationManager';\nexport function getAnnotation(annotationUID) {\n    const manager = defaultFrameOfReferenceSpecificAnnotationManager;\n    const annotation = manager.getAnnotation(annotationUID);\n    return annotation;\n}\n","import { getEnabledElement, triggerEvent, eventTarget, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { Events, ChangeTypes } from '../../../enums';\nimport { getToolGroupsWithToolName } from '../../../store/ToolGroupManager';\nfunction triggerAnnotationAddedForElement(annotation, element) {\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewportId } = enabledElement;\n    const eventType = Events.ANNOTATION_ADDED;\n    const eventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId: renderingEngine.id,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationAddedForFOR(annotation) {\n    const { toolName } = annotation.metadata;\n    const toolGroups = getToolGroupsWithToolName(toolName);\n    if (!toolGroups.length) {\n        return;\n    }\n    const viewportsToRender = [];\n    toolGroups.forEach((toolGroup) => {\n        toolGroup.viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const { FrameOfReferenceUID } = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (annotation.metadata.FrameOfReferenceUID === FrameOfReferenceUID) {\n                viewportsToRender.push(viewportInfo);\n            }\n        });\n    });\n    const eventType = Events.ANNOTATION_ADDED;\n    const eventDetail = { annotation };\n    if (!viewportsToRender.length) {\n        triggerEvent(eventTarget, eventType, eventDetail);\n        return;\n    }\n    viewportsToRender.forEach(({ renderingEngineId, viewportId }) => {\n        eventDetail.viewportId = viewportId;\n        eventDetail.renderingEngineId = renderingEngineId;\n        triggerEvent(eventTarget, eventType, eventDetail);\n    });\n}\nfunction triggerAnnotationRemoved(eventDetail) {\n    const eventType = Events.ANNOTATION_REMOVED;\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationModified(annotation, element, changeType = ChangeTypes.HandlesUpdated) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId, renderingEngineId } = enabledElement;\n    const eventType = Events.ANNOTATION_MODIFIED;\n    const eventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n        changeType,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationCompleted(annotation) {\n    const eventDetail = {\n        annotation,\n    };\n    _triggerAnnotationCompleted(eventDetail);\n}\nfunction triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled = false) {\n    const eventDetail = {\n        annotation,\n        contourHoleProcessingEnabled,\n    };\n    _triggerAnnotationCompleted(eventDetail);\n}\nfunction _triggerAnnotationCompleted(eventDetail) {\n    const eventType = Events.ANNOTATION_COMPLETED;\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nexport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR, triggerAnnotationRemoved, triggerAnnotationModified, triggerAnnotationCompleted, triggerContourAnnotationCompleted, };\n","import { triggerEvent, eventTarget, Enums, getRenderingEngines, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations, Events as csToolsEvents, } from '../../enums';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport surfaceDisplay from '../../tools/displayTools/Surface/surfaceDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport { addTool } from '../../store/addTool';\nimport { state } from '../../store/state';\nimport PlanarFreehandContourSegmentationTool from '../../tools/annotation/PlanarFreehandContourSegmentationTool';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst renderers = {\n    [Representations.Labelmap]: labelmapDisplay,\n    [Representations.Contour]: contourDisplay,\n    [Representations.Surface]: surfaceDisplay,\n};\nconst planarContourToolName = PlanarFreehandContourSegmentationTool.toolName;\nclass SegmentationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._getAllViewports = () => {\n            const renderingEngine = getRenderingEngines();\n            return renderingEngine.flatMap((renderingEngine) => renderingEngine.getViewports());\n        };\n        this._renderFlaggedSegmentations = () => {\n            this._throwIfDestroyed();\n            const viewportIds = Array.from(this._needsRender);\n            viewportIds.forEach((viewportId) => {\n                this._triggerRender(viewportId);\n            });\n            this._needsRender.clear();\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n        };\n    }\n    renderSegmentationsForViewport(viewportId) {\n        const viewportIds = viewportId\n            ? [viewportId]\n            : this._getViewportIdsForSegmentation();\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderSegmentation(segmentationId) {\n        const viewportIds = this._getViewportIdsForSegmentation(segmentationId);\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    _getViewportIdsForSegmentation(segmentationId) {\n        const viewports = this._getAllViewports();\n        const viewportIds = [];\n        for (const viewport of viewports) {\n            const viewportId = viewport.id;\n            if (segmentationId) {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n            else {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n        }\n        return viewportIds;\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setViewportsToBeRenderedNextFrame(viewportIds) {\n        viewportIds.forEach((viewportId) => {\n            this._needsRender.add(viewportId);\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedSegmentations);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(viewportId) {\n        const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n        if (!segmentationRepresentations?.length) {\n            return;\n        }\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (!viewport) {\n            return;\n        }\n        const viewportRenderList = [];\n        const segmentationRenderList = segmentationRepresentations.map((representation) => {\n            if (representation.type === SegmentationRepresentations.Contour) {\n                this._addPlanarFreeHandToolIfAbsent(viewport);\n            }\n            const display = renderers[representation.type];\n            try {\n                const viewportId = display.render(viewport, representation);\n                viewportRenderList.push(viewportId);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            return Promise.resolve({\n                segmentationId: representation.segmentationId,\n                type: representation.type,\n            });\n        });\n        Promise.allSettled(segmentationRenderList).then((results) => {\n            const segmentationDetails = results\n                .filter((r) => r.status === 'fulfilled')\n                .map((r) => r.value);\n            function onSegmentationRender(evt) {\n                const { element, viewportId } = evt.detail;\n                element.removeEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n                segmentationDetails.forEach((detail) => {\n                    const eventDetail = {\n                        viewportId,\n                        segmentationId: detail.segmentationId,\n                        type: detail.type,\n                    };\n                    triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n                        ...eventDetail,\n                    });\n                });\n            }\n            const element = viewport.element;\n            element.addEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n            viewport.render();\n        });\n    }\n    _addPlanarFreeHandToolIfAbsent(viewport) {\n        if (!(planarContourToolName in state.tools)) {\n            addTool(PlanarFreehandContourSegmentationTool);\n        }\n        const toolGroup = getToolGroupForViewport(viewport.id);\n        if (!toolGroup.hasTool(planarContourToolName)) {\n            toolGroup.addTool(planarContourToolName);\n            toolGroup.setToolPassive(planarContourToolName);\n        }\n    }\n}\nfunction triggerSegmentationRender(viewportId) {\n    segmentationRenderingEngine.renderSegmentationsForViewport(viewportId);\n}\nfunction triggerSegmentationRenderBySegmentationId(segmentationId) {\n    segmentationRenderingEngine.renderSegmentation(segmentationId);\n}\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\nexport { triggerSegmentationRender, triggerSegmentationRenderBySegmentationId, segmentationRenderingEngine, };\n","import { BaseVolumeViewport, cache, utilities as csUtils, getEnabledElementByViewportId, volumeLoader, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, } from './triggerSegmentationEvents';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { triggerSegmentationAdded } from './events/triggerSegmentationAdded';\nconst initialDefaultState = {\n    colorLUT: [],\n    segmentations: [],\n    viewportSegRepresentations: {},\n};\nexport default class SegmentationStateManager {\n    constructor(uid) {\n        this._stackLabelmapImageIdReferenceMap = new Map();\n        uid ||= csUtils.uuidv4();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n        this.uid = uid;\n    }\n    getState() {\n        return this.state;\n    }\n    updateState(updater) {\n        const newState = csUtils.deepClone(this.state);\n        updater(newState);\n        this.state = Object.freeze(newState);\n    }\n    getColorLUT(lutIndex) {\n        return this.state.colorLUT[lutIndex];\n    }\n    getNextColorLUTIndex() {\n        return this.state.colorLUT.length;\n    }\n    resetState() {\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n    }\n    getSegmentation(segmentationId) {\n        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n    }\n    updateSegmentation(segmentationId, payload) {\n        this.updateState((draftState) => {\n            const segmentation = draftState.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n            if (!segmentation) {\n                console.warn(`Segmentation with id ${segmentationId} not found. Update aborted.`);\n                return;\n            }\n            Object.assign(segmentation, payload);\n        });\n        triggerSegmentationModified(segmentationId);\n    }\n    addSegmentation(segmentation) {\n        if (this.getSegmentation(segmentation.segmentationId)) {\n            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n        }\n        this.updateState((state) => {\n            const newSegmentation = csUtils.deepClone(segmentation);\n            if (newSegmentation.representationData.Labelmap &&\n                'volumeId' in newSegmentation.representationData.Labelmap &&\n                !('imageIds' in newSegmentation.representationData.Labelmap)) {\n                const imageIds = this.getLabelmapImageIds(newSegmentation.representationData);\n                newSegmentation.representationData\n                    .Labelmap.imageIds = imageIds;\n            }\n            state.segmentations.push(newSegmentation);\n        });\n        triggerSegmentationAdded(segmentation.segmentationId);\n    }\n    removeSegmentation(segmentationId) {\n        this.updateState((state) => {\n            const filteredSegmentations = state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);\n            state.segmentations.splice(0, state.segmentations.length, ...filteredSegmentations);\n        });\n        triggerSegmentationRemoved(segmentationId);\n    }\n    addSegmentationRepresentation(viewportId, segmentationId, type, renderingConfig) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const existingRepresentations = this.getSegmentationRepresentations(viewportId, {\n            type: type,\n            segmentationId,\n        });\n        if (existingRepresentations.length > 0) {\n            console.debug('A segmentation representation of type', type, 'already exists in viewport', viewportId, 'for segmentation', segmentationId);\n            return;\n        }\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                state.viewportSegRepresentations[viewportId] = [];\n                segmentationStyle.setRenderInactiveSegmentations(viewportId, true);\n            }\n            if (type !== SegmentationRepresentations.Labelmap) {\n                this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig);\n            }\n            else {\n                this.addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig);\n            }\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId, type);\n    }\n    addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig) {\n        const segmentation = state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const segmentReps = {};\n        Object.keys(segmentation.segments).forEach((segmentIndex) => {\n            segmentReps[Number(segmentIndex)] = {\n                visible: true,\n            };\n        });\n        state.viewportSegRepresentations[viewportId].push({\n            segmentationId,\n            type,\n            active: true,\n            visible: true,\n            colorLUTIndex: 0,\n            segments: segmentReps,\n            config: {\n                ...getDefaultRenderingConfig(type),\n                ...renderingConfig,\n            },\n        });\n        this._setActiveSegmentation(state, viewportId, segmentationId);\n    }\n    addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig = getDefaultRenderingConfig(SegmentationRepresentations.Labelmap)) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n        }\n        this.processLabelmapRepresentationAddition(viewportId, segmentationId);\n        this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n    }\n    async processLabelmapRepresentationAddition(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const volumeViewport = enabledElement.viewport instanceof BaseVolumeViewport;\n        const { representationData } = segmentation;\n        const isBaseVolumeSegmentation = 'volumeId' in representationData.Labelmap;\n        const viewport = enabledElement.viewport;\n        if (!volumeViewport && !isBaseVolumeSegmentation) {\n            !this.updateLabelmapSegmentationImageReferences(viewportId, segmentation.segmentationId);\n        }\n    }\n    _updateLabelmapSegmentationReferences(segmentationId, viewport, labelmapImageIds, updateCallback) {\n        const currentImageId = viewport.getCurrentImageId();\n        let viewableLabelmapImageIdFound = false;\n        for (const labelmapImageId of labelmapImageIds) {\n            const viewableImageId = viewport.isReferenceViewable({ referencedImageId: labelmapImageId }, { asOverlay: true });\n            if (viewableImageId) {\n                viewableLabelmapImageIdFound = true;\n                this._stackLabelmapImageIdReferenceMap\n                    .get(segmentationId)\n                    .set(currentImageId, labelmapImageId);\n            }\n        }\n        if (updateCallback) {\n            updateCallback(viewport, segmentationId, labelmapImageIds);\n        }\n        return viewableLabelmapImageIdFound\n            ? this._stackLabelmapImageIdReferenceMap\n                .get(segmentationId)\n                .get(currentImageId)\n            : undefined;\n    }\n    updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        return this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, null);\n    }\n    _updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, (stackViewport, segmentationId, labelmapImageIds) => {\n            const imageIds = stackViewport.getImageIds();\n            imageIds.forEach((imageId, index) => {\n                for (const labelmapImageId of labelmapImageIds) {\n                    const viewableImageId = stackViewport.isReferenceViewable({ referencedImageId: labelmapImageId, sliceIndex: index }, { asOverlay: true, withNavigation: true });\n                    if (viewableImageId) {\n                        this._stackLabelmapImageIdReferenceMap\n                            .get(segmentationId)\n                            .set(imageId, labelmapImageId);\n                    }\n                }\n            });\n        });\n    }\n    getLabelmapImageIds(representationData) {\n        const labelmapData = representationData.Labelmap;\n        let labelmapImageIds;\n        if (labelmapData.imageIds) {\n            labelmapImageIds = labelmapData\n                .imageIds;\n        }\n        else if (!labelmapImageIds &&\n            labelmapData.volumeId) {\n            const volumeId = labelmapData\n                .volumeId;\n            const volume = cache.getVolume(volumeId);\n            labelmapImageIds = volume.imageIds;\n        }\n        return labelmapImageIds;\n    }\n    getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const currentImageId = stackViewport.getCurrentImageId();\n        const imageIdReferenceMap = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIdReferenceMap.get(currentImageId);\n    }\n    getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return [];\n        }\n        this._updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId);\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        const imageIds = viewport.getImageIds();\n        const associatedReferenceImageAndLabelmapImageIds = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIds.map((imageId) => {\n            return associatedReferenceImageAndLabelmapImageIds.get(imageId);\n        });\n    }\n    removeSegmentationRepresentationsInternal(viewportId, specifier) {\n        const removedRepresentations = [];\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                return;\n            }\n            const currentRepresentations = state.viewportSegRepresentations[viewportId];\n            let activeRepresentationRemoved = false;\n            if (!specifier ||\n                Object.values(specifier).every((value) => value === undefined)) {\n                removedRepresentations.push(...currentRepresentations);\n                delete state.viewportSegRepresentations[viewportId];\n            }\n            else {\n                const { segmentationId, type } = specifier;\n                state.viewportSegRepresentations[viewportId] =\n                    currentRepresentations.filter((representation) => {\n                        const shouldRemove = (segmentationId &&\n                            type &&\n                            representation.segmentationId === segmentationId &&\n                            representation.type === type) ||\n                            (segmentationId &&\n                                !type &&\n                                representation.segmentationId === segmentationId) ||\n                            (!segmentationId && type && representation.type === type);\n                        if (shouldRemove) {\n                            removedRepresentations.push(representation);\n                            if (representation.active) {\n                                activeRepresentationRemoved = true;\n                            }\n                        }\n                        return !shouldRemove;\n                    });\n                if (state.viewportSegRepresentations[viewportId].length === 0) {\n                    delete state.viewportSegRepresentations[viewportId];\n                }\n                else if (activeRepresentationRemoved) {\n                    state.viewportSegRepresentations[viewportId][0].active = true;\n                }\n            }\n        });\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentations(viewportId, specifier) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        removedRepresentations.forEach((representation) => {\n            triggerSegmentationRepresentationRemoved(viewportId, representation.segmentationId, representation.type);\n        });\n        const remainingRepresentations = this.getSegmentationRepresentations(viewportId);\n        if (remainingRepresentations.length > 0 &&\n            remainingRepresentations[0].active) {\n            triggerSegmentationRepresentationModified(viewportId, remainingRepresentations[0].segmentationId, remainingRepresentations[0].type);\n        }\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentation(viewportId, specifier, suppressEvent) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        if (!suppressEvent) {\n            removedRepresentations.forEach(({ segmentationId, type }) => {\n                triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type);\n            });\n        }\n        return removedRepresentations;\n    }\n    _setActiveSegmentation(state, viewportId, segmentationId) {\n        const viewport = state.viewportSegRepresentations[viewportId];\n        if (!viewport) {\n            return;\n        }\n        viewport.forEach((value) => {\n            value.active = value.segmentationId === segmentationId;\n        });\n    }\n    setActiveSegmentation(viewportId, segmentationId) {\n        this.updateState((state) => {\n            const viewport = state.viewportSegRepresentations[viewportId];\n            if (!viewport) {\n                return;\n            }\n            viewport.forEach((value) => {\n                value.active = value.segmentationId === segmentationId;\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId);\n    }\n    getActiveSegmentation(viewportId) {\n        if (!this.state.viewportSegRepresentations[viewportId]) {\n            return;\n        }\n        const activeSegRep = this.state.viewportSegRepresentations[viewportId].find((segRep) => segRep.active);\n        if (!activeSegRep) {\n            return;\n        }\n        return this.getSegmentation(activeSegRep.segmentationId);\n    }\n    getSegmentationRepresentations(viewportId, specifier = {}) {\n        const viewportRepresentations = this.state.viewportSegRepresentations[viewportId];\n        if (!viewportRepresentations) {\n            return [];\n        }\n        if (!specifier.type && !specifier.segmentationId) {\n            return viewportRepresentations;\n        }\n        return viewportRepresentations.filter((representation) => {\n            const typeMatch = specifier.type\n                ? representation.type === specifier.type\n                : true;\n            const idMatch = specifier.segmentationId\n                ? representation.segmentationId === specifier.segmentationId\n                : true;\n            return typeMatch && idMatch;\n        });\n    }\n    getSegmentationRepresentation(viewportId, specifier) {\n        return this.getSegmentationRepresentations(viewportId, specifier)[0];\n    }\n    getSegmentationRepresentationVisibility(viewportId, specifier) {\n        const viewportRepresentation = this.getSegmentationRepresentation(viewportId, specifier);\n        return viewportRepresentation?.visible;\n    }\n    setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n        this.updateState((state) => {\n            const viewportRepresentations = this.getSegmentationRepresentations(viewportId, specifier);\n            if (!viewportRepresentations) {\n                return;\n            }\n            viewportRepresentations.forEach((representation) => {\n                representation.visible = visible;\n                Object.entries(representation.segments).forEach(([segmentIndex, segment]) => {\n                    segment.visible = visible;\n                });\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId, specifier.type);\n    }\n    addColorLUT(colorLUT, lutIndex) {\n        this.updateState((state) => {\n            if (state.colorLUT[lutIndex]) {\n                console.warn('Color LUT table already exists, overwriting');\n            }\n            state.colorLUT[lutIndex] = csUtils.deepClone(colorLUT);\n        });\n    }\n    removeColorLUT(colorLUTIndex) {\n        this.updateState((state) => {\n            delete state.colorLUT[colorLUTIndex];\n        });\n    }\n    _getStackIdForImageIds(imageIds) {\n        return imageIds\n            .map((imageId) => imageId.slice(-Math.round(imageId.length * 0.15)))\n            .join('_');\n    }\n    getAllViewportSegmentationRepresentations() {\n        return Object.entries(this.state.viewportSegRepresentations).map(([viewportId, representations]) => ({\n            viewportId,\n            representations,\n        }));\n    }\n    getSegmentationRepresentationsBySegmentationId(segmentationId) {\n        const result = [];\n        Object.entries(this.state.viewportSegRepresentations).forEach(([viewportId, viewportReps]) => {\n            const filteredReps = viewportReps.filter((representation) => representation.segmentationId === segmentationId);\n            if (filteredReps.length > 0) {\n                result.push({ viewportId, representations: filteredReps });\n            }\n        });\n        return result;\n    }\n}\nasync function internalComputeVolumeLabelmapFromStack({ imageIds, options, }) {\n    const segmentationImageIds = imageIds;\n    const volumeId = options?.volumeId || csUtils.uuidv4();\n    await volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds);\n    return { volumeId };\n}\nasync function internalConvertStackToVolumeLabelmap({ segmentationId, options, }) {\n    const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n    const data = segmentation.representationData\n        .Labelmap;\n    const { volumeId } = await internalComputeVolumeLabelmapFromStack({\n        imageIds: data.imageIds,\n        options,\n    });\n    segmentation.representationData.Labelmap.volumeId = volumeId;\n}\nfunction getDefaultRenderingConfig(type) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    ofun.addPoint(0, 0);\n    if (type === SegmentationRepresentations.Labelmap) {\n        return {\n            cfun,\n            ofun,\n        };\n    }\n    else {\n        return {};\n    }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { internalConvertStackToVolumeLabelmap, internalComputeVolumeLabelmapFromStack, defaultSegmentationStateManager, };\n","import getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport * as Enums from '../../enums';\nimport { utilities } from '@cornerstonejs/core';\nclass SegmentationStyle {\n    constructor() {\n        this.config = {\n            global: {},\n            segmentations: {},\n            viewportsStyle: {},\n        };\n    }\n    setStyle(specifier, styles) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        const currentStyles = this.getStyle(specifier);\n        let updatedStyles;\n        if (!viewportId && !segmentationId) {\n            updatedStyles = {\n                ...currentStyles,\n                ...styles,\n            };\n        }\n        else {\n            updatedStyles = this.copyActiveToInactiveIfNotProvided({\n                ...currentStyles,\n                ...styles,\n            }, type);\n        }\n        if (!type) {\n            throw new Error('Type is required to set a style');\n        }\n        if (viewportId) {\n            if (!this.config.viewportsStyle[viewportId]) {\n                this.config.viewportsStyle[viewportId] = {\n                    renderInactiveSegmentations: false,\n                    representations: {},\n                };\n            }\n            const representations = this.config.viewportsStyle[viewportId].representations;\n            if (segmentationId) {\n                if (!representations[segmentationId]) {\n                    representations[segmentationId] = {};\n                }\n                if (!representations[segmentationId][type]) {\n                    representations[segmentationId][type] = {};\n                }\n                const repConfig = representations[segmentationId][type];\n                if (segmentIndex !== undefined) {\n                    if (!repConfig.perSegment) {\n                        repConfig.perSegment = {};\n                    }\n                    repConfig.perSegment[segmentIndex] = updatedStyles;\n                }\n                else {\n                    repConfig.allSegments = updatedStyles;\n                }\n            }\n            else {\n                const ALL_SEGMENTATIONS_KEY = '__allSegmentations__';\n                if (!representations[ALL_SEGMENTATIONS_KEY]) {\n                    representations[ALL_SEGMENTATIONS_KEY] = {};\n                }\n                if (!representations[ALL_SEGMENTATIONS_KEY][type]) {\n                    representations[ALL_SEGMENTATIONS_KEY][type] = {};\n                }\n                representations[ALL_SEGMENTATIONS_KEY][type].allSegments =\n                    updatedStyles;\n            }\n        }\n        else if (segmentationId) {\n            if (!this.config.segmentations[segmentationId]) {\n                this.config.segmentations[segmentationId] = {};\n            }\n            if (!this.config.segmentations[segmentationId][type]) {\n                this.config.segmentations[segmentationId][type] = {};\n            }\n            const segConfig = this.config.segmentations[segmentationId][type];\n            if (segmentIndex !== undefined) {\n                if (!segConfig.perSegment) {\n                    segConfig.perSegment = {};\n                }\n                segConfig.perSegment[segmentIndex] = updatedStyles;\n            }\n            else {\n                segConfig.allSegments = updatedStyles;\n            }\n        }\n        else {\n            this.config.global[type] = updatedStyles;\n        }\n    }\n    copyActiveToInactiveIfNotProvided(styles, type) {\n        const processedStyles = { ...styles };\n        if (type === Enums.SegmentationRepresentations.Labelmap) {\n            const labelmapStyles = processedStyles;\n            labelmapStyles.renderOutlineInactive = labelmapStyles.renderOutline;\n            labelmapStyles.outlineWidthInactive = labelmapStyles.outlineWidth;\n            labelmapStyles.renderFillInactive = labelmapStyles.renderFill;\n            labelmapStyles.fillAlphaInactive = labelmapStyles.fillAlpha;\n            labelmapStyles.outlineOpacityInactive = labelmapStyles.outlineOpacity;\n        }\n        else if (type === Enums.SegmentationRepresentations.Contour) {\n            const contourStyles = processedStyles;\n            contourStyles.outlineWidthInactive = contourStyles.outlineWidth;\n            contourStyles.outlineOpacityInactive = contourStyles.outlineOpacity;\n            contourStyles.outlineDashInactive = contourStyles.outlineDash;\n            contourStyles.renderOutlineInactive = contourStyles.renderOutline;\n            contourStyles.renderFillInactive = contourStyles.renderFill;\n            contourStyles.fillAlphaInactive = contourStyles.fillAlpha;\n        }\n        return processedStyles;\n    }\n    getStyle(specifier) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        let combinedStyle = this.getDefaultStyle(type);\n        let renderInactiveSegmentations = false;\n        if (this.config.global[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.global[type],\n            };\n        }\n        if (this.config.segmentations[segmentationId]?.[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.segmentations[segmentationId][type].allSegments,\n            };\n            if (segmentIndex !== undefined &&\n                this.config.segmentations[segmentationId][type].perSegment?.[segmentIndex]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.segmentations[segmentationId][type].perSegment[segmentIndex],\n                };\n            }\n        }\n        if (viewportId && this.config.viewportsStyle[viewportId]) {\n            renderInactiveSegmentations =\n                this.config.viewportsStyle[viewportId].renderInactiveSegmentations;\n            const allSegmentationsKey = '__allSegmentations__';\n            if (this.config.viewportsStyle[viewportId].representations[allSegmentationsKey]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[allSegmentationsKey][type].allSegments,\n                };\n            }\n            if (segmentationId &&\n                this.config.viewportsStyle[viewportId].representations[segmentationId]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].allSegments,\n                };\n                if (segmentIndex !== undefined &&\n                    this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment?.[segmentIndex]) {\n                    combinedStyle = {\n                        ...combinedStyle,\n                        ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment[segmentIndex],\n                    };\n                }\n            }\n        }\n        return combinedStyle;\n    }\n    getRenderInactiveSegmentations(viewportId) {\n        return this.config.viewportsStyle[viewportId]?.renderInactiveSegmentations;\n    }\n    setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations) {\n        if (!this.config.viewportsStyle[viewportId]) {\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations: false,\n                representations: {},\n            };\n        }\n        this.config.viewportsStyle[viewportId].renderInactiveSegmentations =\n            renderInactiveSegmentations;\n    }\n    getDefaultStyle(type) {\n        switch (type) {\n            case Enums.SegmentationRepresentations.Labelmap:\n                return getDefaultLabelmapConfig();\n            case Enums.SegmentationRepresentations.Contour:\n                return getDefaultContourConfig();\n            case Enums.SegmentationRepresentations.Surface:\n                return {};\n            default:\n                throw new Error(`Unknown representation type: ${type}`);\n        }\n    }\n    clearSegmentationStyle(segmentationId) {\n        if (this.config.segmentations[segmentationId]) {\n            delete this.config.segmentations[segmentationId];\n        }\n    }\n    clearAllSegmentationStyles() {\n        this.config.segmentations = {};\n    }\n    clearViewportStyle(viewportId) {\n        if (this.config.viewportsStyle[viewportId]) {\n            delete this.config.viewportsStyle[viewportId];\n        }\n    }\n    clearAllViewportStyles() {\n        for (const viewportId in this.config.viewportsStyle) {\n            const viewportStyle = this.config.viewportsStyle[viewportId];\n            const renderInactiveSegmentations = viewportStyle.renderInactiveSegmentations;\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations,\n                representations: {},\n            };\n        }\n    }\n    resetToGlobalStyle() {\n        this.clearAllSegmentationStyles();\n        this.clearAllViewportStyles();\n    }\n    hasCustomStyle(specifier) {\n        const { type } = specifier;\n        const style = this.getStyle(specifier);\n        const defaultStyle = this.getDefaultStyle(type);\n        return !utilities.deepEqual(style, defaultStyle);\n    }\n}\nconst segmentationStyle = new SegmentationStyle();\nexport { segmentationStyle };\n","import { getActiveSegmentation as _getActiveSegmentation } from './getActiveSegmentation';\nimport { setActiveSegmentation as _setActiveSegmentation } from './setActiveSegmentation';\nfunction getActiveSegmentation(viewportId) {\n    return _getActiveSegmentation(viewportId);\n}\nfunction setActiveSegmentation(viewportId, segmentationId, suppressEvent = false) {\n    _setActiveSegmentation(viewportId, segmentationId);\n}\nexport { getActiveSegmentation, setActiveSegmentation, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setActiveSegmentation(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setActiveSegmentation(viewportId, segmentationId);\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nexport function addColorLUT(colorLUT, index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const indexToUse = index ?? getNextColorLUTIndex();\n    let colorLUTToUse = [...colorLUT];\n    if (!utilities.isEqual(colorLUTToUse[0], [0, 0, 0, 0])) {\n        console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');\n        colorLUTToUse = [[0, 0, 0, 0], ...colorLUTToUse];\n    }\n    colorLUTToUse = colorLUTToUse.map((color) => {\n        if (color.length === 3) {\n            return [color[0], color[1], color[2], 255];\n        }\n        return color;\n    });\n    if (colorLUTToUse.length < 255) {\n        const missingColorLUTs = CORNERSTONE_COLOR_LUT.slice(colorLUTToUse.length);\n        colorLUTToUse = [...colorLUTToUse, ...missingColorLUTs];\n    }\n    segmentationStateManager.addColorLUT(colorLUTToUse, indexToUse);\n    return indexToUse;\n}\n","import CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { addColorLUT } from './addColorLUT';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getColorLUT } from './getColorLUT';\nfunction internalAddSegmentationRepresentation(viewportId, representationInput) {\n    const { segmentationId, config } = representationInput;\n    const renderingConfig = {\n        colorLUTIndex: getColorLUTIndex(config),\n    };\n    defaultSegmentationStateManager.addSegmentationRepresentation(viewportId, segmentationId, representationInput.type, renderingConfig);\n    if (representationInput.type === SegmentationRepresentations.Contour) {\n        triggerAnnotationRenderForViewportIds([viewportId]);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getColorLUTIndex(config) {\n    const { colorLUTOrIndex } = config || {};\n    const isIndexProvided = typeof colorLUTOrIndex === 'number';\n    const selectedColorLUT = isIndexProvided\n        ? getColorLUT(colorLUTOrIndex)\n        : CORNERSTONE_COLOR_LUT;\n    const colorLUTIndex = isIndexProvided\n        ? colorLUTOrIndex\n        : getNextColorLUTIndex();\n    if (!isIndexProvided) {\n        addColorLUT(selectedColorLUT, colorLUTIndex);\n    }\n    return colorLUTIndex;\n}\nexport { internalAddSegmentationRepresentation };\n","import { SegmentationRepresentations } from '../../enums';\nimport { internalAddSegmentationRepresentation } from './internalAddSegmentationRepresentation';\nexport function addSegmentationRepresentations(viewportId, segmentationInputArray) {\n    segmentationInputArray.map((segmentationInput) => {\n        return internalAddSegmentationRepresentation(viewportId, segmentationInput);\n    });\n}\nfunction addContourRepresentationToViewport(viewportId, contourInputArray) {\n    return addSegmentationRepresentations(viewportId, contourInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Contour,\n    })));\n}\nfunction addContourRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addContourRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nfunction addLabelmapRepresentationToViewport(viewportId, labelmapInputArray) {\n    return addSegmentationRepresentations(viewportId, labelmapInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Labelmap,\n    })));\n}\nfunction addLabelmapRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addLabelmapRepresentationToViewport(viewportId, inputArray.map((input) => ({\n            ...input,\n            type: SegmentationRepresentations.Labelmap,\n        })));\n    }\n}\nfunction addSurfaceRepresentationToViewport(viewportId, surfaceInputArray) {\n    return addSegmentationRepresentations(viewportId, surfaceInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Surface,\n    })));\n}\nfunction addSurfaceRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addSurfaceRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nexport { addContourRepresentationToViewport, addLabelmapRepresentationToViewport, addSurfaceRepresentationToViewport, addContourRepresentationToViewportMap, addLabelmapRepresentationToViewportMap, addSurfaceRepresentationToViewportMap, };\n","import { addColorLUT as _addColorLUT } from '../addColorLUT';\nimport { getColorLUT as _getColorLUT } from '../getColorLUT';\nimport { getSegmentationRepresentations } from '../getSegmentationRepresentation';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n    if (!colorLUT) {\n        throw new Error('addColorLUT: colorLUT is required');\n    }\n    return _addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(viewportId, segmentationId, colorLUTsIndex) {\n    if (!_getColorLUT(colorLUTsIndex)) {\n        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTsIndex}`);\n    }\n    const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n    if (!segmentationRepresentations) {\n        throw new Error(`viewport specific state for viewport ${viewportId} does not exist`);\n    }\n    segmentationRepresentations.forEach((segmentationRepresentation) => {\n        segmentationRepresentation.colorLUTIndex = colorLUTsIndex;\n    });\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nfunction getSegmentIndexColor(viewportId, segmentationId, segmentIndex) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n    });\n    if (!representations || representations.length === 0) {\n        return null;\n    }\n    const representation = representations[0];\n    const { colorLUTIndex } = representation;\n    const colorLUT = _getColorLUT(colorLUTIndex);\n    let colorValue = colorLUT[segmentIndex];\n    if (!colorValue) {\n        if (typeof segmentIndex !== 'number') {\n            throw new Error(`Can't create colour for LUT index ${segmentIndex}`);\n        }\n        colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n    }\n    return colorValue;\n}\nfunction setSegmentIndexColor(viewportId, segmentationId, segmentIndex, color) {\n    const colorReference = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n    for (let i = 0; i < color.length; i++) {\n        colorReference[i] = color[i];\n    }\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nexport { getSegmentIndexColor, addColorLUT, setColorLUT, setSegmentIndexColor };\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { Events } from '../../../enums';\nimport { setSegmentationDirty } from '../../../utilities/segmentation/utilities';\nexport function triggerSegmentationDataModified(segmentationId, modifiedSlicesToUse) {\n    const eventDetail = {\n        segmentationId,\n        modifiedSlicesToUse,\n    };\n    setSegmentationDirty(segmentationId);\n    triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\n","import { getSegmentation } from './getSegmentation';\nexport function getActiveSegmentIndex(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (segmentation) {\n        const activeSegmentIndex = Object.keys(segmentation.segments).find((segmentIndex) => segmentation.segments[segmentIndex].active);\n        return activeSegmentIndex ? Number(activeSegmentIndex) : undefined;\n    }\n    return undefined;\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getActiveSegmentation(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getActiveSegmentation(viewportId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getColorLUT(index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getColorLUT(index);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getCurrentLabelmapImageIdForViewport(viewportId, segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getNextColorLUTIndex() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getNextColorLUTIndex();\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentations(viewportId, specifier = {}) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n}\nexport function getSegmentationRepresentation(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    if (!specifier.segmentationId || !specifier.type) {\n        throw new Error('getSegmentationRepresentation: No segmentationId or type provided, you need to provide at least one of them');\n    }\n    const representations = segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n    return representations?.[0];\n}\nexport function getSegmentationRepresentationsBySegmentationId(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationsBySegmentationId(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentationVisibility(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationVisibility(viewportId, specifier);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    return state.segmentations;\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportIdsWithSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportSegRepresentations = state.viewportSegRepresentations;\n    const viewportIdsWithSegmentation = Object.entries(viewportSegRepresentations)\n        .filter(([, viewportSegmentations]) => viewportSegmentations.some((segRep) => segRep.segmentationId === segmentationId))\n        .map(([viewportId]) => viewportId);\n    return viewportIdsWithSegmentation;\n}\n","import { internalComputeVolumeLabelmapFromStack } from '../SegmentationStateManager';\nexport async function computeVolumeLabelmapFromStack(args) {\n    return internalComputeVolumeLabelmapFromStack(args);\n}\n","import { removeContourRepresentation, removeLabelmapRepresentation, removeSegmentationRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, } from './addSegmentationRepresentationsToViewport';\nimport { addSegmentations } from './addSegmentations';\nimport { updateSegmentations } from './updateSegmentations';\nimport * as activeSegmentation from './activeSegmentation';\nimport * as segmentLocking from './segmentLocking';\nimport * as state from './segmentationState';\nimport * as config from './config';\nimport * as segmentIndex from './segmentIndex';\nimport * as triggerSegmentationEvents from './triggerSegmentationEvents';\nimport { convertStackToVolumeLabelmap } from './helpers/convertStackToVolumeLabelmap';\nimport { computeVolumeLabelmapFromStack } from './helpers/computeVolumeLabelmapFromStack';\nimport * as polySegManager from './polySeg';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { convertVolumeToStackLabelmap } from './helpers/computeStackLabelmapFromVolume';\nimport { removeSegment } from './removeSegment';\nimport { getLabelmapImageIds } from './getLabelmapImageIds';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nconst helpers = {\n    clearSegmentValue,\n    convertStackToVolumeLabelmap,\n    computeVolumeLabelmapFromStack,\n    convertVolumeToStackLabelmap,\n};\nexport { removeSegmentationRepresentation, removeContourRepresentation, removeLabelmapRepresentation, removeSurfaceRepresentation, removeAllSegmentations, removeSegmentation, removeSegmentationRepresentations, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, removeAllSegmentationRepresentations, addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addSegmentations, updateSegmentations, state, activeSegmentation, segmentLocking, config, segmentIndex, triggerSegmentationEvents, helpers, polySegManager as polySeg, removeSegment, getLabelmapImageIds, };\n","import { SegmentationRepresentations } from '../../../../enums';\nimport { computeAndAddRepresentation } from '../computeAndAddRepresentation';\nimport { computeContourData } from './contourComputationStrategies';\nexport function computeAndAddContourRepresentation(segmentationId, options = {}) {\n    return computeAndAddRepresentation(segmentationId, SegmentationRepresentations.Contour, () => computeContourData(segmentationId, options), () => undefined);\n}\n","import { SegmentationRepresentations } from '../../../../enums';\nimport { computeAndAddRepresentation } from '../computeAndAddRepresentation';\nimport { computeLabelmapData } from './labelmapComputationStrategies';\nimport { defaultSegmentationStateManager } from '../../SegmentationStateManager';\nimport { triggerSegmentationDataModified } from '../../triggerSegmentationEvents';\nexport async function computeAndAddLabelmapRepresentation(segmentationId, options = {}) {\n    return computeAndAddRepresentation(segmentationId, SegmentationRepresentations.Labelmap, () => computeLabelmapData(segmentationId, options), () => null, () => {\n        defaultSegmentationStateManager.processLabelmapRepresentationAddition(options.viewport.id, segmentationId);\n        setTimeout(() => {\n            triggerSegmentationDataModified(segmentationId);\n        }, 0);\n    });\n}\n","import { SegmentationRepresentations } from '../../../../enums';\nimport { computeAndAddRepresentation } from '../computeAndAddRepresentation';\nimport { computeSurfaceData } from './surfaceComputationStrategies';\nimport { updateSurfaceData } from './updateSurfaceData';\nexport function computeAndAddSurfaceRepresentation(segmentationId, options = {}) {\n    return computeAndAddRepresentation(segmentationId, SegmentationRepresentations.Surface, () => computeSurfaceData(segmentationId, options), () => updateSurfaceData(segmentationId));\n}\n","import { cache } from '@cornerstonejs/core';\nimport { getUniqueSegmentIndices } from '../../../../utilities/segmentation/getUniqueSegmentIndices';\nimport { getViewportIdsWithSegmentation } from '../../getViewportIdsWithSegmentation';\nimport { getSegmentation } from '../../getSegmentation';\nimport { triggerSegmentationModified } from '../../triggerSegmentationEvents';\nimport { getSegmentationRepresentation } from '../../getSegmentationRepresentation';\nimport { SegmentationRepresentations } from '../../../../enums';\nimport { computeSurfaceFromLabelmapSegmentation } from './surfaceComputationStrategies';\nimport { createAndCacheSurfacesFromRaw } from './createAndCacheSurfacesFromRaw';\nexport async function updateSurfaceData(segmentationId) {\n    const surfacesObj = await computeSurfaceFromLabelmapSegmentation(segmentationId);\n    if (!surfacesObj) {\n        return;\n    }\n    const segmentation = getSegmentation(segmentationId);\n    const indices = getUniqueSegmentIndices(segmentationId);\n    if (!indices.length) {\n        const geometryIds = segmentation.representationData.Surface.geometryIds;\n        geometryIds.forEach((geometryId) => {\n            const geometry = cache.getGeometry(geometryId);\n            const surface = geometry.data;\n            surface.points = [];\n            surface.polys = [];\n        });\n        triggerSegmentationModified(segmentationId);\n        return;\n    }\n    const promises = surfacesObj.map(({ data, segmentIndex }) => {\n        const geometryId = `segmentation_${segmentationId}_surface_${segmentIndex}`;\n        const geometry = cache.getGeometry(geometryId);\n        if (!geometry) {\n            const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n            return viewportIds.map((viewportId) => {\n                const surfaceRepresentation = getSegmentationRepresentation(viewportId, {\n                    segmentationId,\n                    type: SegmentationRepresentations.Surface,\n                });\n                return [surfaceRepresentation].map((surfaceRepresentation) => {\n                    segmentation.representationData.Surface.geometryIds.set(segmentIndex, geometryId);\n                    return createAndCacheSurfacesFromRaw(segmentationId, [{ segmentIndex, data }], {\n                        segmentationId: surfaceRepresentation.segmentationId,\n                    });\n                });\n            });\n        }\n        else if (indices.includes(segmentIndex)) {\n            const surface = geometry.data;\n            surface.points = data.points;\n            surface.polys = data.polys;\n        }\n        else {\n            const surface = geometry.data;\n            surface.points = [];\n            surface.polys = [];\n        }\n    });\n    await Promise.all(promises);\n    triggerSegmentationModified(segmentationId);\n}\n","import { Enums, geometryLoader } from '@cornerstonejs/core';\nimport { getSegmentIndexColor } from '../../config/segmentationColor';\nimport { getSegmentation } from '../../getSegmentation';\nexport async function createAndCacheSurfacesFromRaw(segmentationId, rawSurfacesData, options = {}) {\n    const segmentation = getSegmentation(segmentationId);\n    const geometryIds = new Map();\n    const promises = Object.keys(rawSurfacesData).map(async (index) => {\n        const rawSurfaceData = rawSurfacesData[index];\n        const segmentIndex = rawSurfaceData.segmentIndex;\n        const color = getSegmentIndexColor(options.viewport.id, segmentation.segmentationId, segmentIndex).slice(0, 3);\n        if (!color) {\n            throw new Error('No color found for segment index, unable to create surface');\n        }\n        const closedSurface = {\n            id: `segmentation_${segmentation.segmentationId}_surface_${segmentIndex}`,\n            color,\n            frameOfReferenceUID: 'test-frameOfReferenceUID',\n            points: rawSurfaceData.data.points,\n            polys: rawSurfaceData.data.polys,\n            segmentIndex,\n        };\n        const geometryId = closedSurface.id;\n        geometryIds.set(segmentIndex, geometryId);\n        return geometryLoader.createAndCacheGeometry(geometryId, {\n            type: Enums.GeometryType.SURFACE,\n            geometryData: closedSurface,\n        });\n    });\n    await Promise.all(promises);\n    return {\n        geometryIds,\n    };\n}\n","import { Enums, eventTarget, triggerEvent, getWebWorkerManager, } from '@cornerstonejs/core';\nimport { getAnnotation } from '../../../annotation/annotationState';\nimport { WorkerTypes } from '../../../../enums';\nconst workerManager = getWebWorkerManager();\nconst triggerWorkerProgress = (eventTarget, progress, id) => {\n    triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n        progress,\n        type: WorkerTypes.POLYSEG_CONTOUR_TO_SURFACE,\n        id,\n    });\n};\nexport async function convertContourToSurface(contourRepresentationData, segmentIndex) {\n    const { annotationUIDsMap } = contourRepresentationData;\n    const polylines = [];\n    const numPointsArray = [];\n    const annotationUIDs = annotationUIDsMap.get(segmentIndex);\n    for (const annotationUID of annotationUIDs) {\n        const annotation = getAnnotation(annotationUID);\n        const { polyline } = annotation.data\n            .contour;\n        numPointsArray.push(polyline.length);\n        polyline.forEach((polyline) => polylines.push(...polyline));\n    }\n    triggerWorkerProgress(eventTarget, 0, segmentIndex);\n    const results = await workerManager.executeTask('polySeg', 'convertContourToSurface', {\n        polylines,\n        numPointsArray,\n    }, {\n        callbacks: [\n            (progress) => {\n                triggerWorkerProgress(eventTarget, progress, segmentIndex);\n            },\n        ],\n    });\n    triggerWorkerProgress(eventTarget, 100, segmentIndex);\n    return results;\n}\n","import { cache, eventTarget, getWebWorkerManager, triggerEvent, Enums, } from '@cornerstonejs/core';\nimport { computeVolumeLabelmapFromStack } from '../../helpers/computeVolumeLabelmapFromStack';\nimport { WorkerTypes } from '../../../../enums';\nconst workerManager = getWebWorkerManager();\nconst triggerWorkerProgress = (eventTarget, progress, id) => {\n    triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n        progress,\n        type: WorkerTypes.POLYSEG_LABELMAP_TO_SURFACE,\n        id,\n    });\n};\nexport async function convertLabelmapToSurface(labelmapRepresentationData, segmentIndex) {\n    let volumeId;\n    if (labelmapRepresentationData.volumeId) {\n        volumeId = labelmapRepresentationData\n            .volumeId;\n    }\n    else {\n        const { imageIds } = labelmapRepresentationData;\n        ({ volumeId } = await computeVolumeLabelmapFromStack({\n            imageIds,\n        }));\n    }\n    const volume = cache.getVolume(volumeId);\n    const scalarData = volume.voxelManager.getCompleteScalarDataArray();\n    const { dimensions, spacing, origin, direction } = volume;\n    triggerWorkerProgress(eventTarget, 0, segmentIndex);\n    const results = await workerManager.executeTask('polySeg', 'convertLabelmapToSurface', {\n        scalarData,\n        dimensions,\n        spacing,\n        origin,\n        direction,\n        segmentIndex,\n    }, {\n        callbacks: [\n            (progress) => {\n                triggerWorkerProgress(eventTarget, progress, segmentIndex);\n            },\n        ],\n    });\n    triggerWorkerProgress(eventTarget, 100, segmentIndex);\n    return results;\n}\n","import { getUniqueSegmentIndices } from '../../../../utilities/segmentation/getUniqueSegmentIndices';\nimport { getSegmentation } from '../../getSegmentation';\nimport { convertContourToSurface } from './convertContourToSurface';\nimport { createAndCacheSurfacesFromRaw } from './createAndCacheSurfacesFromRaw';\nimport { convertLabelmapToSurface } from './convertLabelmapToSurface';\nexport async function computeSurfaceData(segmentationId, options = {}) {\n    const segmentIndices = options.segmentIndices?.length\n        ? options.segmentIndices\n        : getUniqueSegmentIndices(segmentationId);\n    let rawSurfacesData;\n    const segmentation = getSegmentation(segmentationId);\n    const representationData = segmentation.representationData;\n    try {\n        if (representationData.Contour) {\n            rawSurfacesData = await computeSurfaceFromContourSegmentation(segmentationId, {\n                segmentIndices,\n                ...options,\n            });\n        }\n        else if (representationData.Labelmap) {\n            rawSurfacesData = await computeSurfaceFromLabelmapSegmentation(segmentation.segmentationId, {\n                segmentIndices,\n                ...options,\n            });\n        }\n    }\n    catch (error) {\n        console.error(error);\n        throw error;\n    }\n    if (!rawSurfacesData) {\n        throw new Error('Not enough data to convert to surface, currently only support converting volume labelmap to surface if available');\n    }\n    const surfacesData = await createAndCacheSurfacesFromRaw(segmentationId, rawSurfacesData, options);\n    return surfacesData;\n}\nasync function computeSurfaceFromLabelmapSegmentation(segmentationId, options = {}) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation?.representationData?.Labelmap) {\n        console.warn('Only support surface update from labelmaps');\n        return;\n    }\n    const labelmapRepresentationData = segmentation.representationData.Labelmap;\n    const segmentIndices = options.segmentIndices || getUniqueSegmentIndices(segmentationId);\n    const promises = segmentIndices.map((index) => {\n        const surface = convertLabelmapToSurface(labelmapRepresentationData, index);\n        return surface;\n    });\n    const surfaces = await Promise.allSettled(promises);\n    const errors = surfaces.filter((p) => p.status === 'rejected');\n    if (errors.length > 0) {\n        console.error(errors);\n        throw new Error('Failed to convert labelmap to surface');\n    }\n    const rawSurfacesData = surfaces\n        .map((surface, index) => {\n        if (surface.status === 'fulfilled') {\n            return { segmentIndex: segmentIndices[index], data: surface.value };\n        }\n    })\n        .filter(Boolean);\n    return rawSurfacesData;\n}\nasync function computeSurfaceFromContourSegmentation(segmentationId, options = {}) {\n    const segmentation = getSegmentation(segmentationId);\n    const contourRepresentationData = segmentation.representationData.Contour;\n    const segmentIndices = options.segmentIndices || getUniqueSegmentIndices(segmentationId);\n    const promises = segmentIndices.map(async (index) => {\n        const surface = await convertContourToSurface(contourRepresentationData, index);\n        return { segmentIndex: index, data: surface };\n    });\n    const surfaces = await Promise.all(promises);\n    return surfaces;\n}\nexport { computeSurfaceFromContourSegmentation, computeSurfaceFromLabelmapSegmentation, };\n","import { SegmentationRepresentations } from '../../../enums';\nimport { getSegmentation } from '../getSegmentation';\nimport { validate as validateLabelmap } from '../../../tools/displayTools/Labelmap/validateLabelmap';\nconst conversionPaths = new Map([\n    [\n        SegmentationRepresentations.Labelmap,\n        new Set([\n            SegmentationRepresentations.Surface,\n            SegmentationRepresentations.Contour,\n        ]),\n    ],\n    [\n        SegmentationRepresentations.Contour,\n        new Set([\n            SegmentationRepresentations.Labelmap,\n            SegmentationRepresentations.Surface,\n        ]),\n    ],\n    [\n        SegmentationRepresentations.Surface,\n        new Set([SegmentationRepresentations.Labelmap]),\n    ],\n]);\nfunction canComputeRequestedRepresentation(segmentationId, type) {\n    const { representationData } = getSegmentation(segmentationId);\n    const existingRepresentationTypes = getExistingRepresentationTypes(representationData);\n    return existingRepresentationTypes.some((existingRepresentationType) => canConvertFromTo(existingRepresentationType, type));\n}\nfunction getExistingRepresentationTypes(representationData) {\n    const supportedTypes = [];\n    Object.keys(representationData).forEach((representationType) => {\n        const representationTypeData = representationData[representationType];\n        let validateFn;\n        switch (representationType) {\n            case SegmentationRepresentations.Labelmap:\n                validateFn = validateLabelmap;\n                break;\n        }\n        if (validateFn) {\n            try {\n                validateFn(representationTypeData);\n                supportedTypes.push(representationType);\n            }\n            catch (error) {\n                console.warn(`Validation failed for labelmap of type ${representationType}`);\n            }\n        }\n        else {\n            supportedTypes.push(representationType);\n        }\n    });\n    return supportedTypes;\n}\nasync function canConvertFromTo(fromRepresentationType, toRepresentationType) {\n    return (conversionPaths.get(fromRepresentationType)?.has(toRepresentationType) ||\n        false);\n}\nexport { canComputeRequestedRepresentation };\n","import { eventTarget } from '@cornerstonejs/core';\nimport { Events } from '../../../enums';\nimport addRepresentationData from '../internalAddRepresentationData';\nimport { triggerSegmentationModified } from '../triggerSegmentationEvents';\nimport debounce from '../../../utilities/debounce';\nimport { registerPolySegWorker } from './registerPolySegWorker';\nconst computedRepresentations = new Map();\nasync function computeAndAddRepresentation(segmentationId, type, computeFunction, updateFunction, onComputationComplete) {\n    registerPolySegWorker();\n    const data = await computeFunction();\n    addRepresentationData({\n        segmentationId,\n        type,\n        data,\n    });\n    onComputationComplete?.();\n    if (!computedRepresentations.has(segmentationId)) {\n        computedRepresentations.set(segmentationId, []);\n    }\n    const representations = computedRepresentations.get(segmentationId);\n    if (!representations.includes(type)) {\n        representations.push(type);\n    }\n    subscribeToSegmentationChanges(updateFunction);\n    triggerSegmentationModified(segmentationId);\n    return data;\n}\nfunction subscribeToSegmentationChanges(updateFunction) {\n    const debouncedUpdateFunction = (event) => {\n        _debouncedSegmentationModified(event, updateFunction);\n    };\n    updateFunction._debouncedUpdateFunction = debouncedUpdateFunction;\n    eventTarget.removeEventListener(Events.SEGMENTATION_DATA_MODIFIED, updateFunction._debouncedUpdateFunction);\n    eventTarget.addEventListener(Events.SEGMENTATION_DATA_MODIFIED, updateFunction._debouncedUpdateFunction);\n}\nconst _debouncedSegmentationModified = debounce((event, updateFunction) => {\n    const segmentationId = event.detail.segmentationId;\n    const representations = computedRepresentations.get(segmentationId);\n    if (!representations || !representations.length) {\n        return;\n    }\n    updateFunction(segmentationId);\n    if (representations.length) {\n        triggerSegmentationModified(segmentationId);\n    }\n}, 300);\nexport { computeAndAddRepresentation };\n","import { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { invalidateBrushCursor } from '../../utilities/segmentation/invalidateBrushCursor';\nimport { getSegmentation } from './getSegmentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nfunction setActiveSegmentIndex(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (typeof segmentIndex === 'string') {\n        console.warn('segmentIndex is a string, converting to number');\n        segmentIndex = Number(segmentIndex);\n    }\n    Object.values(segmentation.segments).forEach((segment) => {\n        segment.active = false;\n    });\n    if (!segmentation.segments[segmentIndex]) {\n        segmentation.segments[segmentIndex] = {\n            segmentIndex,\n            label: '',\n            locked: false,\n            cachedStats: {},\n            active: false,\n        };\n    }\n    if (segmentation.segments[segmentIndex].active !== true) {\n        segmentation.segments[segmentIndex].active = true;\n        triggerSegmentationModified(segmentationId);\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            if (!representation.segments[segmentIndex]) {\n                representation.segments[segmentIndex] = {\n                    visible: true,\n                };\n            }\n        });\n    });\n    viewportIds.forEach((viewportId) => {\n        const toolGroup = getToolGroupForViewport(viewportId);\n        invalidateBrushCursor(toolGroup.id);\n    });\n}\nexport { setActiveSegmentIndex, getActiveSegmentIndex };\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nfunction isSegmentIndexLocked(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    return segments[segmentIndex].locked;\n}\nfunction setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    segments[segmentIndex].locked = locked;\n    triggerSegmentationModified(segmentationId);\n}\nfunction getLockedSegmentIndices(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    const lockedSegmentIndices = Object.keys(segments).filter((segmentIndex) => segments[segmentIndex].locked);\n    return lockedSegmentIndices.map((segmentIndex) => parseInt(segmentIndex));\n}\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegmentIndices };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getStackSegmentationImageIdsForViewport(viewportId, segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n}\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { state } from '../state';\nfunction getToolGroupForViewport(viewportId, renderingEngineId) {\n    if (!renderingEngineId) {\n        renderingEngineId = getRenderingEngines().find((re) => re.getViewports().find((vp) => vp.id === viewportId))?.id;\n    }\n    const toolGroupFilteredByIds = state.toolGroups.filter((tg) => tg.viewportsInfo.some((vp) => vp.renderingEngineId === renderingEngineId &&\n        (!vp.viewportId || vp.viewportId === viewportId)));\n    if (!toolGroupFilteredByIds.length) {\n        return;\n    }\n    if (toolGroupFilteredByIds.length > 1) {\n        throw new Error(`Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only\n      have one tool group per viewport in a renderingEngine.`);\n    }\n    return toolGroupFilteredByIds[0];\n}\nexport default getToolGroupForViewport;\n","import { state } from '../state';\nfunction getToolGroup(toolGroupId) {\n    return state.toolGroups.find((s) => s.id === toolGroupId);\n}\nexport default getToolGroup;\n","import { MouseBindings, ToolModes, Events } from '../../enums';\nimport get from 'lodash.get';\nimport { triggerEvent, eventTarget, getRenderingEngine, getRenderingEngines, getEnabledElementByIds, Settings, } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { state } from '../state';\nimport { MouseCursor, SVGMouseCursor } from '../../cursors';\nimport { initElementCursor } from '../../cursors/elementCursor';\nimport getToolGroup from './getToolGroup';\nconst { Active, Passive, Enabled, Disabled } = ToolModes;\nconst PRIMARY_BINDINGS = [{ mouseButton: MouseBindings.Primary }];\nexport default class ToolGroup {\n    constructor(id) {\n        this.viewportsInfo = [];\n        this.toolOptions = {};\n        this.currentActivePrimaryToolName = null;\n        this.prevActivePrimaryToolName = null;\n        this.restoreToolOptions = {};\n        this._toolInstances = {};\n        this.id = id;\n    }\n    getViewportIds() {\n        return this.viewportsInfo.map(({ viewportId }) => viewportId);\n    }\n    getViewportsInfo() {\n        return this.viewportsInfo.slice();\n    }\n    getToolInstance(toolInstanceName) {\n        const toolInstance = this._toolInstances[toolInstanceName];\n        if (!toolInstance) {\n            console.warn(`'${toolInstanceName}' is not registered with this toolGroup (${this.id}).`);\n            return;\n        }\n        return toolInstance;\n    }\n    getToolInstances() {\n        return this._toolInstances;\n    }\n    hasTool(toolName) {\n        return !!this._toolInstances[toolName];\n    }\n    addTool(toolName, configuration = {}) {\n        const toolDefinition = state.tools[toolName];\n        const hasToolName = typeof toolName !== 'undefined' && toolName !== '';\n        const localToolInstance = this.toolOptions[toolName];\n        if (!hasToolName) {\n            console.warn('Tool with configuration did not produce a toolName: ', configuration);\n            return;\n        }\n        if (!toolDefinition) {\n            console.warn(`'${toolName}' is not registered with the library. You need to use cornerstoneTools.addTool to register it.`);\n            return;\n        }\n        if (localToolInstance) {\n            console.warn(`'${toolName}' is already registered for ToolGroup ${this.id}.`);\n            return;\n        }\n        const { toolClass: ToolClass } = toolDefinition;\n        const toolProps = {\n            name: toolName,\n            toolGroupId: this.id,\n            configuration,\n        };\n        const instantiatedTool = new ToolClass(toolProps);\n        this._toolInstances[toolName] = instantiatedTool;\n    }\n    addToolInstance(toolName, parentClassName, configuration = {}) {\n        let ToolClassToUse = state.tools[toolName]\n            ?.toolClass;\n        if (!ToolClassToUse) {\n            const ParentClass = state.tools[parentClassName]\n                .toolClass;\n            class ToolInstance extends ParentClass {\n            }\n            ToolInstance.toolName = toolName;\n            ToolClassToUse = ToolInstance;\n            state.tools[toolName] = {\n                toolClass: ToolInstance,\n            };\n        }\n        this.addTool(ToolClassToUse.toolName, configuration);\n    }\n    addViewport(viewportId, renderingEngineId) {\n        if (typeof viewportId !== 'string') {\n            throw new Error('viewportId must be defined and be a string');\n        }\n        const renderingEngineUIDToUse = this._findRenderingEngine(viewportId, renderingEngineId);\n        if (!this.viewportsInfo.some(({ viewportId: vpId }) => vpId === viewportId)) {\n            this.viewportsInfo.push({\n                viewportId,\n                renderingEngineId: renderingEngineUIDToUse,\n            });\n        }\n        const toolName = this.getActivePrimaryMouseButtonTool();\n        const runtimeSettings = Settings.getRuntimeSettings();\n        if (runtimeSettings.get('useCursors')) {\n            this.setViewportsCursorByToolName(toolName);\n        }\n        const eventDetail = {\n            toolGroupId: this.id,\n            viewportId,\n            renderingEngineId: renderingEngineUIDToUse,\n        };\n        triggerEvent(eventTarget, Events.TOOLGROUP_VIEWPORT_ADDED, eventDetail);\n    }\n    removeViewports(renderingEngineId, viewportId) {\n        const indices = [];\n        this.viewportsInfo.forEach((vpInfo, index) => {\n            let match = false;\n            if (vpInfo.renderingEngineId === renderingEngineId) {\n                match = true;\n                if (viewportId && vpInfo.viewportId !== viewportId) {\n                    match = false;\n                }\n            }\n            if (match) {\n                indices.push(index);\n            }\n        });\n        if (indices.length) {\n            for (let i = indices.length - 1; i >= 0; i--) {\n                this.viewportsInfo.splice(indices[i], 1);\n            }\n        }\n        const eventDetail = {\n            toolGroupId: this.id,\n            viewportId,\n            renderingEngineId,\n        };\n        triggerEvent(eventTarget, Events.TOOLGROUP_VIEWPORT_REMOVED, eventDetail);\n    }\n    setActiveStrategy(toolName, strategyName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool configuration.`);\n            return;\n        }\n        toolInstance.setActiveStrategy(strategyName);\n    }\n    setToolMode(toolName, mode, options = {}) {\n        if (!toolName) {\n            console.warn('setToolMode: toolName must be defined');\n            return;\n        }\n        if (mode === ToolModes.Active) {\n            this.setToolActive(toolName, options || this.restoreToolOptions[toolName]);\n            return;\n        }\n        if (mode === ToolModes.Passive) {\n            this.setToolPassive(toolName);\n            return;\n        }\n        if (mode === ToolModes.Enabled) {\n            this.setToolEnabled(toolName);\n            return;\n        }\n        if (mode === ToolModes.Disabled) {\n            this.setToolDisabled(toolName);\n            return;\n        }\n        console.warn('setToolMode: mode must be defined');\n    }\n    setToolActive(toolName, toolBindingsOptions = {}) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        if (!toolInstance) {\n            console.warn(`'${toolName}' instance ${toolInstance} is not registered with this toolGroup, can't set tool mode.`);\n            return;\n        }\n        const prevBindings = this.toolOptions[toolName]\n            ? this.toolOptions[toolName].bindings\n            : [];\n        const newBindings = toolBindingsOptions.bindings\n            ? toolBindingsOptions.bindings\n            : [];\n        const bindingsToUse = [...prevBindings, ...newBindings].reduce((unique, binding) => {\n            const TouchBinding = binding.numTouchPoints !== undefined;\n            const MouseBinding = binding.mouseButton !== undefined;\n            if (!unique.some((obj) => hasSameBinding(obj, binding)) &&\n                (TouchBinding || MouseBinding)) {\n                unique.push(binding);\n            }\n            return unique;\n        }, []);\n        const toolOptions = {\n            bindings: bindingsToUse,\n            mode: Active,\n        };\n        this.toolOptions[toolName] = toolOptions;\n        this._toolInstances[toolName].mode = Active;\n        const runtimeSettings = Settings.getRuntimeSettings();\n        const useCursor = runtimeSettings.get('useCursors');\n        if (this._hasMousePrimaryButtonBinding(toolBindingsOptions) && useCursor) {\n            this.setViewportsCursorByToolName(toolName);\n        }\n        else {\n            const activeToolIdentifier = this.getActivePrimaryMouseButtonTool();\n            if (!activeToolIdentifier && useCursor) {\n                const cursor = MouseCursor.getDefinedCursor('default');\n                this._setCursorForViewports(cursor);\n            }\n        }\n        if (this._hasMousePrimaryButtonBinding(toolBindingsOptions)) {\n            if (this.prevActivePrimaryToolName === null) {\n                this.prevActivePrimaryToolName = toolName;\n            }\n            else {\n                this.prevActivePrimaryToolName = this.currentActivePrimaryToolName;\n            }\n            this.currentActivePrimaryToolName = toolName;\n        }\n        if (typeof toolInstance.onSetToolActive === 'function') {\n            toolInstance.onSetToolActive();\n        }\n        this._renderViewports();\n        const eventDetail = {\n            toolGroupId: this.id,\n            toolName,\n            toolBindingsOptions,\n        };\n        triggerEvent(eventTarget, Events.TOOL_ACTIVATED, eventDetail);\n        this._triggerToolModeChangedEvent(toolName, Active, toolBindingsOptions);\n    }\n    setToolPassive(toolName, options) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const prevToolOptions = this.getToolOptions(toolName);\n        const toolOptions = Object.assign({\n            bindings: prevToolOptions ? prevToolOptions.bindings : [],\n        }, prevToolOptions, {\n            mode: Passive,\n        });\n        const matchBindings = Array.isArray(options?.removeAllBindings)\n            ? options.removeAllBindings\n            : this.getDefaultPrimaryBindings();\n        toolOptions.bindings = toolOptions.bindings.filter((binding) => options?.removeAllBindings !== true &&\n            !matchBindings.some((matchBinding) => hasSameBinding(binding, matchBinding)));\n        let mode = Passive;\n        if (toolOptions.bindings.length !== 0) {\n            mode = Active;\n            toolOptions.mode = mode;\n        }\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = mode;\n        if (typeof toolInstance.onSetToolPassive === 'function') {\n            toolInstance.onSetToolPassive();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Passive);\n    }\n    setToolEnabled(toolName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const toolOptions = {\n            bindings: [],\n            mode: Enabled,\n        };\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = Enabled;\n        if (typeof toolInstance.onSetToolEnabled === 'function') {\n            toolInstance.onSetToolEnabled();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Enabled);\n    }\n    setToolDisabled(toolName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const toolOptions = {\n            bindings: [],\n            mode: Disabled,\n        };\n        this.restoreToolOptions[toolName] = this.toolOptions[toolName];\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = Disabled;\n        if (typeof toolInstance.onSetToolDisabled === 'function') {\n            toolInstance.onSetToolDisabled();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Disabled);\n    }\n    getToolOptions(toolName) {\n        const toolOptionsForTool = this.toolOptions[toolName];\n        if (toolOptionsForTool === undefined) {\n            return;\n        }\n        return toolOptionsForTool;\n    }\n    getActivePrimaryMouseButtonTool() {\n        return Object.keys(this.toolOptions).find((toolName) => {\n            const toolOptions = this.toolOptions[toolName];\n            return (toolOptions.mode === Active &&\n                this._hasMousePrimaryButtonBinding(toolOptions));\n        });\n    }\n    setViewportsCursorByToolName(toolName, strategyName) {\n        const cursor = this._getCursor(toolName, strategyName);\n        this._setCursorForViewports(cursor);\n    }\n    _getCursor(toolName, strategyName) {\n        let cursorName;\n        let cursor;\n        if (strategyName) {\n            cursorName = `${toolName}.${strategyName}`;\n            cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n            if (cursor) {\n                return cursor;\n            }\n        }\n        cursorName = `${toolName}`;\n        cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n        if (cursor) {\n            return cursor;\n        }\n        cursorName = toolName;\n        cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n        if (cursor) {\n            return cursor;\n        }\n        return MouseCursor.getDefinedCursor('default');\n    }\n    _setCursorForViewports(cursor) {\n        this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            initElementCursor(viewport.element, cursor);\n        });\n    }\n    setToolConfiguration(toolName, configuration, overwrite) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not present, can't set tool configuration.`);\n            return false;\n        }\n        let _configuration;\n        if (overwrite) {\n            _configuration = configuration;\n        }\n        else {\n            _configuration = Object.assign(toolInstance.configuration, configuration);\n        }\n        toolInstance.configuration = _configuration;\n        if (typeof toolInstance.onSetToolConfiguration === 'function') {\n            toolInstance.onSetToolConfiguration();\n        }\n        this._renderViewports();\n        return true;\n    }\n    getDefaultMousePrimary() {\n        return MouseBindings.Primary;\n    }\n    getDefaultPrimaryBindings() {\n        return PRIMARY_BINDINGS;\n    }\n    getToolConfiguration(toolName, configurationPath) {\n        if (this._toolInstances[toolName] === undefined) {\n            console.warn(`Tool ${toolName} not present, can't set tool configuration.`);\n            return;\n        }\n        const _configuration = get(this._toolInstances[toolName].configuration, configurationPath) ||\n            this._toolInstances[toolName].configuration;\n        return utilities.deepClone(_configuration);\n    }\n    getPrevActivePrimaryToolName() {\n        return this.prevActivePrimaryToolName;\n    }\n    setActivePrimaryTool(toolName) {\n        const activeToolName = this.getCurrentActivePrimaryToolName();\n        this.setToolDisabled(activeToolName);\n        this.setToolActive(toolName, {\n            bindings: [{ mouseButton: MouseBindings.Primary }],\n        });\n    }\n    getCurrentActivePrimaryToolName() {\n        return this.currentActivePrimaryToolName;\n    }\n    clone(newToolGroupId, fnToolFilter = null) {\n        let toolGroup = getToolGroup(newToolGroupId);\n        if (toolGroup) {\n            console.debug(`ToolGroup ${newToolGroupId} already exists`);\n            return toolGroup;\n        }\n        toolGroup = new ToolGroup(newToolGroupId);\n        state.toolGroups.push(toolGroup);\n        fnToolFilter = fnToolFilter ?? (() => true);\n        Object.keys(this._toolInstances)\n            .filter(fnToolFilter)\n            .forEach((toolName) => {\n            const sourceToolInstance = this._toolInstances[toolName];\n            const sourceToolOptions = this.toolOptions[toolName];\n            const sourceToolMode = sourceToolInstance.mode;\n            toolGroup.addTool(toolName);\n            toolGroup.setToolMode(toolName, sourceToolMode, {\n                bindings: sourceToolOptions.bindings ?? [],\n            });\n        });\n        return toolGroup;\n    }\n    _hasMousePrimaryButtonBinding(toolOptions) {\n        const primaryBindings = this.getDefaultPrimaryBindings();\n        return toolOptions?.bindings?.some((binding) => primaryBindings.some((primary) => hasSameBinding(binding, primary)));\n    }\n    _renderViewports() {\n        this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            getRenderingEngine(renderingEngineId).renderViewport(viewportId);\n        });\n    }\n    _triggerToolModeChangedEvent(toolName, mode, toolBindingsOptions) {\n        const eventDetail = {\n            toolGroupId: this.id,\n            toolName,\n            mode,\n            toolBindingsOptions,\n        };\n        triggerEvent(eventTarget, Events.TOOL_MODE_CHANGED, eventDetail);\n    }\n    _findRenderingEngine(viewportId, renderingEngineId) {\n        const renderingEngines = getRenderingEngines();\n        if (renderingEngines?.length === 0) {\n            throw new Error('No rendering engines found.');\n        }\n        if (renderingEngineId) {\n            return renderingEngineId;\n        }\n        const matchingEngines = renderingEngines.filter((engine) => engine.getViewport(viewportId));\n        if (matchingEngines.length === 0) {\n            if (renderingEngines.length === 1) {\n                return renderingEngines[0].id;\n            }\n            throw new Error('No rendering engines found that contain the viewport with the same viewportId, you must specify a renderingEngineId.');\n        }\n        if (matchingEngines.length > 1) {\n            throw new Error('Multiple rendering engines found that contain the viewport with the same viewportId, you must specify a renderingEngineId.');\n        }\n        return matchingEngines[0].id;\n    }\n}\nfunction hasSameBinding(binding1, binding2) {\n    if (binding1.mouseButton !== binding2.mouseButton) {\n        return false;\n    }\n    if (binding1.numTouchPoints !== binding2.numTouchPoints) {\n        return false;\n    }\n    return binding1.modifierKey === binding2.modifierKey;\n}\n","import { state } from '../state';\nfunction getAllToolGroups() {\n    return state.toolGroups;\n}\nexport default getAllToolGroups;\n","import { state } from '../state';\nimport { ToolModes } from '../../enums';\nconst MODES = [ToolModes.Active, ToolModes.Passive, ToolModes.Enabled];\nfunction getToolGroupsWithToolName(toolName) {\n    return state.toolGroups.filter(({ toolOptions }) => {\n        const toolGroupToolNames = Object.keys(toolOptions);\n        for (let i = 0; i < toolGroupToolNames.length; i++) {\n            if (toolName !== toolGroupToolNames[i]) {\n                continue;\n            }\n            if (!toolOptions[toolName]) {\n                continue;\n            }\n            if (MODES.includes(toolOptions[toolName].mode)) {\n                return true;\n            }\n        }\n        return false;\n    });\n}\nexport default getToolGroupsWithToolName;\n","import { state } from './state';\nexport function addTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    const toolAlreadyAdded = state.tools[toolName] !== undefined;\n    if (!toolName) {\n        throw new Error(`No Tool Found for the ToolClass ${ToolClass.name}`);\n    }\n    state.tools[toolName] = {\n        toolClass: ToolClass,\n    };\n}\nexport function hasTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    return !!(toolName && state.tools[toolName]);\n}\nexport function hasToolByName(toolName) {\n    return !!(toolName && state.tools[toolName]);\n}\nexport function removeTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    if (!toolName) {\n        throw new Error(`No tool found for: ${ToolClass.name}`);\n    }\n    if (!state.tools[toolName] !== undefined) {\n        delete state.tools[toolName];\n    }\n    else {\n        throw new Error(`${toolName} cannot be removed because it has not been added`);\n    }\n}\nexport default addTool;\n","import svgNodeCache, { resetSvgNodeCache } from './svgNodeCache';\nconst defaultState = {\n    isInteractingWithTool: false,\n    isMultiPartToolActive: false,\n    tools: {},\n    toolGroups: [],\n    synchronizers: [],\n    svgNodeCache: svgNodeCache,\n    enabledElements: [],\n    handleRadius: 6,\n};\nlet state = {\n    isInteractingWithTool: false,\n    isMultiPartToolActive: false,\n    tools: {},\n    toolGroups: [],\n    synchronizers: [],\n    svgNodeCache: svgNodeCache,\n    enabledElements: [],\n    handleRadius: 6,\n};\nfunction resetCornerstoneToolsState() {\n    resetSvgNodeCache();\n    state = {\n        ...structuredClone({\n            ...defaultState,\n            svgNodeCache: {},\n        }),\n        svgNodeCache: {\n            ...defaultState.svgNodeCache,\n        },\n    };\n}\nexport { resetCornerstoneToolsState, state, state as default };\n","let svgNodeCache = {};\nexport function resetSvgNodeCache() {\n    svgNodeCache = {};\n}\nexport default svgNodeCache;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nconst { transformWorldToIndex } = csUtils;\nclass BidirectionalTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            let canvasPoint1 = viewport.worldToCanvas(points[0]);\n            let canvasPoint2 = viewport.worldToCanvas(points[1]);\n            let line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            let distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            canvasPoint1 = viewport.worldToCanvas(points[2]);\n            canvasPoint2 = viewport.worldToCanvas(points[3]);\n            line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const data = annotation.data;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            hideElementCursor(element);\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            if (this.editData.handleIndex !== undefined) {\n                const { points } = data.handles;\n                const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n                const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n                if (secondLineSegmentLength > firstLineSegmentLength) {\n                    const longAxis = [[...points[2]], [...points[3]]];\n                    const shortAxisPoint0 = [...points[0]];\n                    const shortAxisPoint1 = [...points[1]];\n                    const longAxisVector = vec2.create();\n                    vec2.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);\n                    const counterClockWisePerpendicularToLongAxis = vec2.create();\n                    vec2.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);\n                    const currentShortAxisVector = vec2.create();\n                    vec2.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);\n                    let shortAxis;\n                    if (vec2.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {\n                        shortAxis = [shortAxisPoint0, shortAxisPoint1];\n                    }\n                    else {\n                        shortAxis = [shortAxisPoint1, shortAxisPoint0];\n                    }\n                    data.handles.points = [\n                        longAxis[0],\n                        longAxis[1],\n                        shortAxis[0],\n                        shortAxis[1],\n                    ];\n                }\n            }\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { worldToCanvas } = viewport;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            data.handles.points[handleIndex] = [...worldPos];\n            const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n            const canvasCoords = {\n                longLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[0][0],\n                        y: canvasCoordPoints[0][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[1][0],\n                        y: canvasCoordPoints[1][1],\n                    },\n                },\n                shortLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[2][0],\n                        y: canvasCoordPoints[2][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[3][0],\n                        y: canvasCoordPoints[3][1],\n                    },\n                },\n            };\n            const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n            const shortAxisDistFromCenter = dist / 3;\n            const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n            const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const vectorX = dx / length;\n            const vectorY = dy / length;\n            const xMid = (canvasCoords.longLineSegment.start.x +\n                canvasCoords.longLineSegment.end.x) /\n                2;\n            const yMid = (canvasCoords.longLineSegment.start.y +\n                canvasCoords.longLineSegment.end.y) /\n                2;\n            const startX = xMid + shortAxisDistFromCenter * vectorY;\n            const startY = yMid - shortAxisDistFromCenter * vectorX;\n            const endX = xMid - shortAxisDistFromCenter * vectorY;\n            const endY = yMid + shortAxisDistFromCenter * vectorX;\n            data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n            data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.editData.hasMoved = true;\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragModifyHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotation, handleIndex: movingHandleIndex } = this.editData;\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            const canvasCoordHandlesCurrent = [\n                viewport.worldToCanvas(data.handles.points[0]),\n                viewport.worldToCanvas(data.handles.points[1]),\n                viewport.worldToCanvas(data.handles.points[2]),\n                viewport.worldToCanvas(data.handles.points[3]),\n            ];\n            const firstLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[0][0],\n                    y: canvasCoordHandlesCurrent[0][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[1][0],\n                    y: canvasCoordHandlesCurrent[1][1],\n                },\n            };\n            const secondLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[2][0],\n                    y: canvasCoordHandlesCurrent[2][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[3][0],\n                    y: canvasCoordHandlesCurrent[3][1],\n                },\n            };\n            const proposedPoint = [...worldPos];\n            const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n            if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n                const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n                const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];\n                const fixedHandleToProposedCoordVec = vec2.set(vec2.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);\n                const fixedHandleToOldCoordVec = vec2.set(vec2.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] -\n                    fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] -\n                    fixedHandleCanvasCoord[1]);\n                vec2.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);\n                vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n                const proposedFirstLineSegment = {\n                    start: {\n                        x: fixedHandleCanvasCoord[0],\n                        y: fixedHandleCanvasCoord[1],\n                    },\n                    end: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                };\n                if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {\n                    return;\n                }\n                const centerOfRotation = fixedHandleCanvasCoord;\n                const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);\n                let firstPointX = canvasCoordHandlesCurrent[2][0];\n                let firstPointY = canvasCoordHandlesCurrent[2][1];\n                let secondPointX = canvasCoordHandlesCurrent[3][0];\n                let secondPointY = canvasCoordHandlesCurrent[3][1];\n                firstPointX -= centerOfRotation[0];\n                firstPointY -= centerOfRotation[1];\n                secondPointX -= centerOfRotation[0];\n                secondPointY -= centerOfRotation[1];\n                const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n                const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n                const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n                const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n                firstPointX = rotatedFirstPoint + centerOfRotation[0];\n                firstPointY = rotatedFirstPointY + centerOfRotation[1];\n                secondPointX = rotatedSecondPoint + centerOfRotation[0];\n                secondPointY = rotatedSecondPointY + centerOfRotation[1];\n                const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n                const newSecondPoint = viewport.canvasToWorld([\n                    secondPointX,\n                    secondPointY,\n                ]);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n                data.handles.points[2] = newFirstPoint;\n                data.handles.points[3] = newSecondPoint;\n            }\n            else {\n                const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n                const canvasCoordsCurrent = {\n                    longLineSegment: {\n                        start: firstLineSegment.start,\n                        end: firstLineSegment.end,\n                    },\n                    shortLineSegment: {\n                        start: secondLineSegment.start,\n                        end: secondLineSegment.end,\n                    },\n                };\n                const longLineSegmentVec = vec2.subtract(vec2.create(), [\n                    canvasCoordsCurrent.longLineSegment.end.x,\n                    canvasCoordsCurrent.longLineSegment.end.y,\n                ], [\n                    canvasCoordsCurrent.longLineSegment.start.x,\n                    canvasCoordsCurrent.longLineSegment.start.y,\n                ]);\n                const longLineSegmentVecNormalized = vec2.normalize(vec2.create(), longLineSegmentVec);\n                const proposedToCurrentVec = vec2.subtract(vec2.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [\n                    canvasCoordHandlesCurrent[movingHandleIndex][0],\n                    canvasCoordHandlesCurrent[movingHandleIndex][1],\n                ]);\n                const movementLength = vec2.length(proposedToCurrentVec);\n                const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);\n                const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n                const newTranslatedPoint = vec2.scaleAndAdd(vec2.create(), [\n                    canvasCoordHandlesCurrent[translateHandleIndex][0],\n                    canvasCoordHandlesCurrent[translateHandleIndex][1],\n                ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);\n                if (this._movingLongAxisWouldPutItThroughShortAxis({\n                    start: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                    end: {\n                        x: newTranslatedPoint[0],\n                        y: newTranslatedPoint[1],\n                    },\n                }, {\n                    start: {\n                        x: canvasCoordsCurrent.longLineSegment.start.x,\n                        y: canvasCoordsCurrent.longLineSegment.start.y,\n                    },\n                    end: {\n                        x: canvasCoordsCurrent.longLineSegment.end.x,\n                        y: canvasCoordsCurrent.longLineSegment.end.y,\n                    },\n                })) {\n                    return;\n                }\n                const intersectionPoint = lineSegment.intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n                if (!intersectionPoint) {\n                    return;\n                }\n                data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {\n            const vectorInSecondLineDirection = vec2.create();\n            vec2.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);\n            vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n            const extendedSecondLineSegment = {\n                start: {\n                    x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n                },\n                end: {\n                    x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n                },\n            };\n            const proposedIntersectionPoint = lineSegment.intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n            const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n            return wouldPutThroughShortAxis;\n        };\n        this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { element } = enabledElement.viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const worldPos3 = data.handles.points[2];\n            const worldPos4 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, dimensions } = image;\n                const index1 = transformWorldToIndex(imageData, worldPos1);\n                const index2 = transformWorldToIndex(imageData, worldPos2);\n                const index3 = transformWorldToIndex(imageData, worldPos3);\n                const index4 = transformWorldToIndex(imageData, worldPos4);\n                const handles1 = [index1, index2];\n                const handles2 = [index3, index4];\n                const { scale: scale1, unit: units1 } = getCalibratedLengthUnitsAndScale(image, handles1);\n                const { scale: scale2, unit: units2 } = getCalibratedLengthUnitsAndScale(image, handles2);\n                const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;\n                const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;\n                const length = dist1 > dist2 ? dist1 : dist2;\n                const width = dist1 > dist2 ? dist2 : dist1;\n                const unit = dist1 > dist2 ? units1 : units2;\n                const widthUnit = dist1 > dist2 ? units2 : units1;\n                this._isInsideVolume(index1, index2, index3, index4, dimensions)\n                    ? (this.isHandleOutsideImage = false)\n                    : (this.isHandleOutsideImage = true);\n                cachedStats[targetId] = {\n                    length,\n                    width,\n                    unit,\n                    widthUnit,\n                };\n            }\n            annotation.invalidated = false;\n            triggerAnnotationModified(annotation, element);\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions) &&\n                csUtils.indexWithinDimensions(index3, dimensions) &&\n                csUtils.indexWithinDimensions(index4, dimensions));\n        };\n        this._getSignedAngle = (vector1, vector2) => {\n            return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const { cachedStats, label } = data;\n    const { length, width, unit } = cachedStats[targetId];\n    const textLines = [];\n    if (label) {\n        textLines.push(label);\n    }\n    if (length === undefined) {\n        return textLines;\n    }\n    textLines.push(`L: ${csUtils.roundNumber(length)} ${unit || unit}`, `W: ${csUtils.roundNumber(width)} ${unit}`);\n    return textLines;\n}\nBidirectionalTool.toolName = 'Bidirectional';\nexport default BidirectionalTool;\n","import { utilities } from '@cornerstonejs/core';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport PlanarFreehandROITool from './PlanarFreehandROITool';\nclass PlanarFreehandContourSegmentationTool extends PlanarFreehandROITool {\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    renderAnnotationInstance(renderContext) {\n        const annotation = renderContext.annotation;\n        const { invalidated } = annotation;\n        const renderResult = super.renderAnnotationInstance(renderContext);\n        if (invalidated) {\n            const { segmentationId } = annotation.data.segmentation;\n            triggerSegmentationDataModified(segmentationId);\n        }\n        return renderResult;\n    }\n}\nPlanarFreehandContourSegmentationTool.toolName =\n    'PlanarFreehandContourSegmentationTool';\nexport default PlanarFreehandContourSegmentationTool;\n","import { CONSTANTS, getEnabledElement, VolumeViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport * as math from '../../utilities/math';\nimport { polyline } from '../../utilities/math';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport registerDrawLoop from './planarFreehandROITool/drawLoop';\nimport registerEditLoopCommon from './planarFreehandROITool/editLoopCommon';\nimport registerClosedContourEditLoop from './planarFreehandROITool/closedContourEditLoop';\nimport registerOpenContourEditLoop from './planarFreehandROITool/openContourEditLoop';\nimport registerOpenContourEndEditLoop from './planarFreehandROITool/openContourEndEditLoop';\nimport registerRenderMethods from './planarFreehandROITool/renderMethods';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { drawLinkedTextBox } from '../../drawingSvg';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getLineSegmentIntersectionsCoordinates } from '../../utilities/math/polyline';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport calculatePerimeter from '../../utilities/contours/calculatePerimeter';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { KeyboardBindings, ChangeTypes } from '../../enums';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { pointCanProjectOnLine } = polyline;\nconst { EPSILON } = CONSTANTS;\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\nclass PlanarFreehandROITool extends ContourSegmentationBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            alwaysRenderOpenContourHandles: {\n                enabled: false,\n                radius: 2,\n            },\n            allowOpenContours: true,\n            closeContourProximity: 10,\n            checkCanvasEditFallbackProximity: 6,\n            makeClockWise: true,\n            subPixelResolution: 4,\n            smoothing: {\n                smoothOnAdd: false,\n                smoothOnEdit: false,\n                knotsRatioPercentageOnAdd: 40,\n                knotsRatioPercentageOnEdit: 40,\n            },\n            interpolation: {\n                enabled: false,\n                onInterpolationComplete: null,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            displayOnePointAsCrosshairs: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isEditingClosed = false;\n        this.isEditingOpen = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const annotation = this.createAnnotation(evt);\n            this.addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateDraw(evt, annotation, viewportIdsToRender);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, handle);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            if (annotation.data.contour.closed) {\n                this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            else {\n                this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { polyline: points } = annotation.data.contour;\n            let previousPoint = viewport.worldToCanvas(points[0]);\n            for (let i = 1; i < points.length; i++) {\n                const p1 = previousPoint;\n                const p2 = viewport.worldToCanvas(points[i]);\n                const canProject = pointCanProjectOnLine(canvasCoords, p1, p2, proximity);\n                if (canProject) {\n                    return true;\n                }\n                previousPoint = p2;\n            }\n            if (!annotation.data.contour.closed) {\n                return false;\n            }\n            const pStart = viewport.worldToCanvas(points[0]);\n            const pEnd = viewport.worldToCanvas(points[points.length - 1]);\n            return pointCanProjectOnLine(canvasCoords, pStart, pEnd, proximity);\n        };\n        this.cancel = (element) => {\n            const isDrawing = this.isDrawing;\n            const isEditingOpen = this.isEditingOpen;\n            const isEditingClosed = this.isEditingClosed;\n            if (isDrawing) {\n                this.cancelDrawing(element);\n            }\n            else if (isEditingOpen) {\n                this.cancelOpenContourEdit(element);\n            }\n            else if (isEditingClosed) {\n                this.cancelClosedContourEdit(element);\n            }\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { cachedStats } = data;\n            const { polyline: points, closed } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const modalityUnitOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n                const calibratedScale = getCalibratedLengthUnitsAndScale(image, () => {\n                    const polyline = data.contour.polyline;\n                    const numPoints = polyline.length;\n                    const projectedPolyline = new Array(numPoints);\n                    for (let i = 0; i < numPoints; i++) {\n                        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n                    }\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(projectedPolyline);\n                    const topLeftBBWorld = viewport.canvasToWorld([canvasMinX, canvasMinY]);\n                    const topLeftBBIndex = csUtils.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = csUtils.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                if (closed) {\n                    this.updateClosedCachedStats({\n                        targetId,\n                        viewport,\n                        canvasCoordinates,\n                        points,\n                        imageData,\n                        metadata,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                    });\n                }\n                else {\n                    this.updateOpenCachedStats({\n                        metadata,\n                        canvasCoordinates,\n                        targetId,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                    });\n                }\n            }\n            triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.StatsUpdated);\n            annotation.invalidated = false;\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {\n            const { data } = annotation;\n            const targetId = this.getTargetId(viewport);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n            if (!options.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = '1';\n            const boundingBox = drawLinkedTextBox(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        registerDrawLoop(this);\n        registerEditLoopCommon(this);\n        registerClosedContourEditLoop(this);\n        registerOpenContourEditLoop(this);\n        registerOpenContourEndEditLoop(this);\n        registerRenderMethods(this);\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!annotations || !annotations.length) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let annotationsToDisplay;\n        if (viewport instanceof VolumeViewport) {\n            const camera = viewport.getCamera();\n            const { spacingInNormalDirection } = csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n            annotationsToDisplay = this.filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection);\n        }\n        else {\n            annotationsToDisplay = filterAnnotationsForDisplay(viewport, annotations);\n        }\n        return annotationsToDisplay;\n    }\n    filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection) {\n        const { viewPlaneNormal } = camera;\n        const annotationsWithParallelNormals = annotations.filter((td) => {\n            const annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n            const isParallel = Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n                PARALLEL_THRESHOLD;\n            return annotationViewPlaneNormal && isParallel;\n        });\n        if (!annotationsWithParallelNormals.length) {\n            return [];\n        }\n        const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n        const { focalPoint } = camera;\n        const annotationsWithinSlice = [];\n        for (const annotation of annotationsWithParallelNormals) {\n            const data = annotation.data;\n            const point = data.contour.polyline[0];\n            if (!annotation.isVisible) {\n                continue;\n            }\n            const dir = vec3.create();\n            vec3.sub(dir, focalPoint, point);\n            const dot = vec3.dot(dir, viewPlaneNormal);\n            if (Math.abs(dot) < halfSpacingInNormalDirection) {\n                annotationsWithinSlice.push(annotation);\n            }\n        }\n        return annotationsWithinSlice;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const worldPos = evt.detail.currentPoints.world;\n        const contourAnnotation = super.createAnnotation(evt);\n        const onInterpolationComplete = (annotation) => {\n            annotation.data.handles.points.length = 0;\n        };\n        const annotation = csUtils.deepMerge(contourAnnotation, {\n            data: {\n                contour: {\n                    polyline: [[...worldPos]],\n                },\n                label: '',\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n        return annotation;\n    }\n    getAnnotationStyle(context) {\n        return super.getAnnotationStyle(context);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        let renderStatus = false;\n        const { viewport, renderingEngine } = enabledElement;\n        const isDrawing = this.isDrawing;\n        const isEditingOpen = this.isEditingOpen;\n        const isEditingClosed = this.isEditingClosed;\n        if (!(isDrawing || isEditingOpen || isEditingClosed)) {\n            if (this.configuration.displayOnePointAsCrosshairs &&\n                annotation.data.contour.polyline.length === 1) {\n                this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n            }\n            else {\n                this.renderContour(enabledElement, svgDrawingHelper, annotation);\n            }\n        }\n        else {\n            const activeAnnotationUID = this.commonData.annotation.annotationUID;\n            if (annotation.annotationUID === activeAnnotationUID) {\n                if (isDrawing) {\n                    this.renderContourBeingDrawn(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingClosed) {\n                    this.renderClosedContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingOpen) {\n                    this.renderOpenContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    throw new Error(`Unknown ${this.getToolName()} annotation rendering state`);\n                }\n            }\n            else {\n                if (this.configuration.displayOnePointAsCrosshairs &&\n                    annotation.data.contour.polyline.length === 1) {\n                    this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    this.renderContour(enabledElement, svgDrawingHelper, annotation);\n                }\n            }\n            renderStatus = true;\n        }\n        if (!this.configuration.calculateStats) {\n            return;\n        }\n        this._calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement);\n        this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);\n        return renderStatus;\n    }\n    _calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement) {\n        const activeAnnotationUID = this.commonData?.annotation.annotationUID;\n        if (annotation.annotationUID === activeAnnotationUID &&\n            !this.commonData?.movingTextBox) {\n            return;\n        }\n        if (!this.commonData?.movingTextBox) {\n            const { data } = annotation;\n            if (!data.cachedStats[targetId] ||\n                data.cachedStats[targetId].areaUnit == null) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    area: null,\n                    max: null,\n                    mean: null,\n                    stdDev: null,\n                    areaUnit: null,\n                };\n                this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n        }\n    }\n    updateClosedCachedStats({ viewport, points, imageData, metadata, cachedStats, targetId, modalityUnit, canvasCoordinates, calibratedScale, }) {\n        const { scale, areaUnit, units } = calibratedScale;\n        const { voxelManager } = viewport.getImageData();\n        const canvasPoint = canvasCoordinates[0];\n        const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n        const deltaXPoint = viewport.canvasToWorld([\n            canvasPoint[0] + 1,\n            canvasPoint[1],\n        ]);\n        const deltaYPoint = viewport.canvasToWorld([\n            canvasPoint[0],\n            canvasPoint[1] + 1,\n        ]);\n        const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n        const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n        const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[0]);\n        worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n        worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n        worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n        let iMin = worldPosIndex[0];\n        let iMax = worldPosIndex[0];\n        let jMin = worldPosIndex[1];\n        let jMax = worldPosIndex[1];\n        let kMin = worldPosIndex[2];\n        let kMax = worldPosIndex[2];\n        for (let j = 1; j < points.length; j++) {\n            const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[j]);\n            worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n            worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n            worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n            iMin = Math.min(iMin, worldPosIndex[0]);\n            iMax = Math.max(iMax, worldPosIndex[0]);\n            jMin = Math.min(jMin, worldPosIndex[1]);\n            jMax = Math.max(jMax, worldPosIndex[1]);\n            kMin = Math.min(kMin, worldPosIndex[2]);\n            kMax = Math.max(kMax, worldPosIndex[2]);\n        }\n        const worldPosIndex2 = csUtils.transformWorldToIndex(imageData, points[1]);\n        worldPosIndex2[0] = Math.floor(worldPosIndex2[0]);\n        worldPosIndex2[1] = Math.floor(worldPosIndex2[1]);\n        worldPosIndex2[2] = Math.floor(worldPosIndex2[2]);\n        let area = polyline.getArea(canvasCoordinates) / scale / scale;\n        area *= deltaInX * deltaInY;\n        const iDelta = 0.01 * (iMax - iMin);\n        const jDelta = 0.01 * (jMax - jMin);\n        const kDelta = 0.01 * (kMax - kMin);\n        iMin = Math.floor(iMin - iDelta);\n        iMax = Math.ceil(iMax + iDelta);\n        jMin = Math.floor(jMin - jDelta);\n        jMax = Math.ceil(jMax + jDelta);\n        kMin = Math.floor(kMin - kDelta);\n        kMax = Math.ceil(kMax + kDelta);\n        const boundsIJK = [\n            [iMin, iMax],\n            [jMin, jMax],\n            [kMin, kMax],\n        ];\n        const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);\n        const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);\n        let curRow = 0;\n        let intersections = [];\n        let intersectionCounter = 0;\n        const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n            imageData,\n            isInObject: (pointLPS, _pointIJK) => {\n                let result = true;\n                const point = viewport.worldToCanvas(pointLPS);\n                if (point[1] != curRow) {\n                    intersectionCounter = 0;\n                    curRow = point[1];\n                    intersections = getLineSegmentIntersectionsCoordinates(canvasCoordinates, point, [canvasPosEnd[0], point[1]]);\n                    intersections.sort((function (index) {\n                        return function (a, b) {\n                            return a[index] === b[index]\n                                ? 0\n                                : a[index] < b[index]\n                                    ? -1\n                                    : 1;\n                        };\n                    })(0));\n                }\n                if (intersections.length && point[0] > intersections[0][0]) {\n                    intersections.shift();\n                    intersectionCounter++;\n                }\n                if (intersectionCounter % 2 === 0) {\n                    result = false;\n                }\n                return result;\n            },\n            boundsIJK,\n            returnPoints: this.configuration.storePointData,\n        });\n        const stats = this.configuration.statsCalculator.getStatistics();\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            area,\n            perimeter: calculatePerimeter(canvasCoordinates, closed) / scale,\n            mean: stats.mean?.value,\n            max: stats.max?.value,\n            stdDev: stats.stdDev?.value,\n            statsArray: stats.array,\n            pointsInShape: pointsInShape,\n            areaUnit,\n            modalityUnit,\n            unit: units,\n        };\n    }\n    updateOpenCachedStats({ targetId, metadata, canvasCoordinates, cachedStats, modalityUnit, calibratedScale, }) {\n        const { scale, units } = calibratedScale;\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            length: calculatePerimeter(canvasCoordinates, false) / scale,\n            modalityUnit,\n            getPixelValueUnitunit: units,\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, length, perimeter, max, isEmptyArea, unit, areaUnit, modalityUnit, } = cachedVolumeStats || {};\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (mean) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (Number.isFinite(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (stdDev) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    if (perimeter) {\n        textLines.push(`Perimeter: ${csUtils.roundNumber(perimeter)} ${unit}`);\n    }\n    if (length) {\n        textLines.push(`${csUtils.roundNumber(length)} ${unit}`);\n    }\n    return textLines;\n}\nPlanarFreehandROITool.toolName = 'PlanarFreehandROI';\nexport default PlanarFreehandROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawRectByCoordinates as drawRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROITool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { viewPlaneNormal, viewUp } = viewport.getCamera();\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const area = Math.abs(worldWidth * worldHeight) / (scale * scale);\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                        boundsIJK,\n                        imageData,\n                        returnPoints: this.configuration.storePointData,\n                    });\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        stdDev: stats.stdDev?.value,\n                        max: stats.max?.value,\n                        statsArray: stats.array,\n                        pointsInShape: pointsInShape,\n                        areaUnit,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            annotation.invalidated = false;\n            triggerAnnotationModified(annotation, element);\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nRectangleROITool.toolName = 'RectangleROI';\nexport default RectangleROITool;\n","import { utilities, getEnabledElement, StackViewport, cache, VideoViewport, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport BaseTool from './BaseTool';\nimport { getAnnotationManager } from '../../stateManagement/annotation/annotationState';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport filterAnnotationsForDisplay from '../../utilities/planar/filterAnnotationsForDisplay';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nimport { getState } from '../../stateManagement/annotation/config';\nclass AnnotationDisplayTool extends BaseTool {\n    constructor() {\n        super(...arguments);\n        this.onImageSpacingCalibrated = (evt) => {\n            const { element, imageId } = evt.detail;\n            const imageURI = utilities.imageIdToURI(imageId);\n            const annotationManager = getAnnotationManager();\n            const framesOfReference = annotationManager.getFramesOfReference();\n            framesOfReference.forEach((frameOfReference) => {\n                const frameOfReferenceSpecificAnnotations = annotationManager.getAnnotations(frameOfReference);\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[this.getToolName()];\n                if (!toolSpecificAnnotations || !toolSpecificAnnotations.length) {\n                    return;\n                }\n                toolSpecificAnnotations.forEach((annotation) => {\n                    if (!annotation.metadata?.referencedImageId) {\n                        return;\n                    }\n                    const referencedImageURI = utilities.imageIdToURI(annotation.metadata.referencedImageId);\n                    if (referencedImageURI === imageURI) {\n                        annotation.invalidated = true;\n                        annotation.data.cachedStats = {};\n                    }\n                });\n                triggerAnnotationRender(element);\n            });\n        };\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!annotations || !annotations.length) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        return filterAnnotationsForDisplay(viewport, annotations);\n    }\n    getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId = targetId.split(/^[a-zA-Z]+:/)[1];\n        if (viewport instanceof BaseVolumeViewport) {\n            const volumeId = utilities.getVolumeId(targetId);\n            const imageVolume = cache.getVolume(volumeId);\n            referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n        }\n        return referencedImageId;\n    }\n    getStyle(property, specifications, annotation) {\n        return getStyleProperty(property, specifications, getState(annotation), this.mode);\n    }\n}\nAnnotationDisplayTool.toolName = 'AnnotationDisplayTool';\nexport default AnnotationDisplayTool;\n","import { utilities, BaseVolumeViewport } from '@cornerstonejs/core';\nimport ToolModes from '../../enums/ToolModes';\nclass BaseTool {\n    constructor(toolProps, defaultToolProps) {\n        const initialProps = utilities.deepMerge(defaultToolProps, toolProps);\n        const { configuration = {}, supportedInteractionTypes, toolGroupId, } = initialProps;\n        if (!configuration.strategies) {\n            configuration.strategies = {};\n            configuration.defaultStrategy = undefined;\n            configuration.activeStrategy = undefined;\n            configuration.strategyOptions = {};\n        }\n        this.toolGroupId = toolGroupId;\n        this.supportedInteractionTypes = supportedInteractionTypes || [];\n        this.configuration = Object.assign({}, configuration);\n        this.mode = ToolModes.Disabled;\n    }\n    getToolName() {\n        return this.constructor.toolName;\n    }\n    applyActiveStrategy(enabledElement, operationData) {\n        const { strategies, activeStrategy } = this.configuration;\n        return strategies[activeStrategy]?.call(this, enabledElement, operationData);\n    }\n    applyActiveStrategyCallback(enabledElement, operationData, callbackType) {\n        const { strategies, activeStrategy } = this.configuration;\n        if (!strategies[activeStrategy]) {\n            throw new Error(`applyActiveStrategyCallback: active strategy ${activeStrategy} not found, check tool configuration or spellings`);\n        }\n        return strategies[activeStrategy][callbackType]?.call(this, enabledElement, operationData);\n    }\n    setConfiguration(newConfiguration) {\n        this.configuration = utilities.deepMerge(this.configuration, newConfiguration);\n    }\n    setActiveStrategy(strategyName) {\n        this.setConfiguration({ activeStrategy: strategyName });\n    }\n    getTargetImageData(targetId) {\n        if (targetId.startsWith('imageId:')) {\n            const imageId = targetId.split('imageId:')[1];\n            const imageURI = utilities.imageIdToURI(imageId);\n            let viewports = utilities.getViewportsWithImageURI(imageURI);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            viewports = viewports.filter((viewport) => {\n                return viewport.getCurrentImageId() === imageId;\n            });\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else if (targetId.startsWith('volumeId:')) {\n            const volumeId = utilities.getVolumeId(targetId);\n            const viewports = utilities.getViewportsWithVolumeId(volumeId);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else if (targetId.startsWith('videoId:')) {\n            const imageURI = utilities.imageIdToURI(targetId);\n            const viewports = utilities.getViewportsWithImageURI(imageURI);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else {\n            throw new Error('getTargetIdImage: targetId must start with \"imageId:\" or \"volumeId:\"');\n        }\n    }\n    getTargetId(viewport) {\n        const targetId = viewport.getViewReferenceId?.();\n        if (targetId) {\n            return targetId;\n        }\n        throw new Error('getTargetId: viewport must have a getViewReferenceId method');\n    }\n}\nBaseTool.toolName = 'BaseTool';\nexport default BaseTool;\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport { handleContourSegmentation } from './contourHandler/handleContourSegmentation';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { canComputeRequestedRepresentation } from '../../../stateManagement/segmentation/polySeg/canComputeRequestedRepresentation';\nimport { computeAndAddContourRepresentation } from '../../../stateManagement/segmentation/polySeg/Contour/computeAndAddContourRepresentation';\nimport removeContourFromElement from './removeContourFromElement';\nlet polySegConversionInProgress = false;\nconst processedViewportSegmentations = new Map();\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (!renderImmediate) {\n        return;\n    }\n    removeContourFromElement(viewportId, segmentationId);\n    viewport.render();\n}\nasync function render(viewport, contourRepresentation) {\n    const { segmentationId } = contourRepresentation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    let contourData = segmentation.representationData[Representations.Contour];\n    if (!contourData &&\n        canComputeRequestedRepresentation(segmentationId, Representations.Contour) &&\n        !polySegConversionInProgress) {\n        polySegConversionInProgress = true;\n        contourData = await computeAndAddContourRepresentation(segmentationId, {\n            viewport,\n        });\n        polySegConversionInProgress = false;\n    }\n    if (!contourData) {\n        return;\n    }\n    if (!contourData.geometryIds?.length) {\n        return;\n    }\n    handleContourSegmentation(viewport, contourData.geometryIds, contourData.annotationUIDsMap, contourRepresentation);\n}\nexport default {\n    render,\n    removeRepresentation,\n};\n","import { getEnabledElementByViewportId, VolumeViewport, } from '@cornerstonejs/core';\nimport addLabelmapToElement from './addLabelmapToElement';\nimport removeLabelmapFromElement from './removeLabelmapFromElement';\nimport { getActiveSegmentation } from '../../../stateManagement/segmentation/activeSegmentation';\nimport { getColorLUT } from '../../../stateManagement/segmentation/getColorLUT';\nimport { getCurrentLabelmapImageIdForViewport } from '../../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { canComputeRequestedRepresentation } from '../../../stateManagement/segmentation/polySeg/canComputeRequestedRepresentation';\nimport { computeAndAddLabelmapRepresentation } from '../../../stateManagement/segmentation/polySeg/Labelmap/computeAndAddLabelmapRepresentation';\nimport { segmentationStyle } from '../../../stateManagement/segmentation/SegmentationStyle';\nimport SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\nimport { internalGetHiddenSegmentIndices } from '../../../stateManagement/segmentation/helpers/internalGetHiddenSegmentIndices';\nimport { getActiveSegmentIndex } from '../../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { getLabelmapActorEntry } from '../../../stateManagement/segmentation/helpers/getSegmentationActor';\nconst MAX_NUMBER_COLORS = 255;\nconst labelMapConfigCache = new Map();\nlet polySegConversionInProgress = false;\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    labelMapConfigCache.forEach((value, key) => {\n        if (key.includes(segmentationId)) {\n            labelMapConfigCache.delete(key);\n        }\n    });\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    removeLabelmapFromElement(viewport.element, segmentationId);\n    if (!renderImmediate) {\n        return;\n    }\n    viewport.render();\n}\nasync function render(viewport, representation) {\n    const { segmentationId } = representation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn('No segmentation found for segmentationId: ', segmentationId);\n        return;\n    }\n    let labelmapData = segmentation.representationData[SegmentationRepresentations.Labelmap];\n    let labelmapActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n    if (!labelmapData &&\n        canComputeRequestedRepresentation(segmentationId, SegmentationRepresentations.Labelmap) &&\n        !polySegConversionInProgress) {\n        polySegConversionInProgress = true;\n        labelmapData = await computeAndAddLabelmapRepresentation(segmentationId, {\n            viewport,\n        });\n        if (!labelmapData) {\n            throw new Error(`No labelmap data found for segmentationId ${segmentationId}.`);\n        }\n        polySegConversionInProgress = false;\n    }\n    if (!labelmapData) {\n        return;\n    }\n    if (viewport instanceof VolumeViewport) {\n        if (!labelmapActorEntry) {\n            await _addLabelmapToViewport(viewport, labelmapData, segmentationId);\n        }\n        labelmapActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n    }\n    else {\n        const labelmapImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n        if (!labelmapImageId) {\n            return;\n        }\n        if (!labelmapActorEntry) {\n            await _addLabelmapToViewport(viewport, labelmapData, segmentationId);\n        }\n        labelmapActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n    }\n    if (!labelmapActorEntry) {\n        return;\n    }\n    _setLabelmapColorAndOpacity(viewport.id, labelmapActorEntry, representation);\n}\nfunction _setLabelmapColorAndOpacity(viewportId, labelmapActorEntry, segmentationRepresentation) {\n    const { segmentationId } = segmentationRepresentation;\n    const { cfun, ofun } = segmentationRepresentation.config;\n    const { colorLUTIndex } = segmentationRepresentation;\n    const activeSegmentation = getActiveSegmentation(viewportId);\n    const isActiveLabelmap = activeSegmentation?.segmentationId === segmentationId;\n    const labelmapStyle = segmentationStyle.getStyle({\n        viewportId,\n        type: SegmentationRepresentations.Labelmap,\n        segmentationId,\n    });\n    const renderInactiveSegmentations = segmentationStyle.getRenderInactiveSegmentations(viewportId);\n    const colorLUT = getColorLUT(colorLUTIndex);\n    const numColors = Math.min(256, colorLUT.length);\n    const { outlineWidth, renderOutline, outlineOpacity, activeSegmentOutlineWidthDelta, } = _getLabelmapConfig(labelmapStyle, isActiveLabelmap);\n    const segmentsHidden = internalGetHiddenSegmentIndices(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    });\n    for (let i = 0; i < numColors; i++) {\n        const segmentIndex = i;\n        const segmentColor = colorLUT[segmentIndex];\n        const perSegmentStyle = segmentationStyle.getStyle({\n            viewportId,\n            type: SegmentationRepresentations.Labelmap,\n            segmentationId,\n            segmentIndex,\n        });\n        const segmentSpecificLabelmapConfig = perSegmentStyle;\n        const { fillAlpha, outlineWidth, renderFill, renderOutline } = _getLabelmapConfig(labelmapStyle, isActiveLabelmap, segmentSpecificLabelmapConfig);\n        const { forceOpacityUpdate, forceColorUpdate } = _needsTransferFunctionUpdate(viewportId, segmentationId, segmentIndex, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            segmentColor,\n            outlineWidth,\n            segmentsHidden: segmentsHidden,\n            cfun,\n            ofun,\n        });\n        if (forceColorUpdate) {\n            cfun.addRGBPoint(segmentIndex, segmentColor[0] / MAX_NUMBER_COLORS, segmentColor[1] / MAX_NUMBER_COLORS, segmentColor[2] / MAX_NUMBER_COLORS);\n        }\n        if (forceOpacityUpdate) {\n            if (renderFill) {\n                const segmentOpacity = segmentsHidden.has(segmentIndex)\n                    ? 0\n                    : (segmentColor[3] / 255) * fillAlpha;\n                ofun.removePoint(segmentIndex);\n                ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1.0);\n            }\n            else {\n                ofun.addPointLong(segmentIndex, 0.01, 0.5, 1.0);\n            }\n        }\n    }\n    const labelmapActor = labelmapActorEntry.actor;\n    labelmapActor.getProperty().setRGBTransferFunction(0, cfun);\n    ofun.setClamping(false);\n    labelmapActor.getProperty().setScalarOpacity(0, ofun);\n    labelmapActor.getProperty().setInterpolationTypeToNearest();\n    if (renderOutline) {\n        labelmapActor.getProperty().setUseLabelOutline(renderOutline);\n        labelmapActor.getProperty().setLabelOutlineOpacity(outlineOpacity);\n        const activeSegmentIndex = getActiveSegmentIndex(segmentationRepresentation.segmentationId);\n        const outlineWidths = new Array(numColors - 1);\n        for (let i = 1; i < numColors; i++) {\n            const isHidden = segmentsHidden.has(i);\n            if (isHidden) {\n                outlineWidths[i - 1] = 0;\n                continue;\n            }\n            outlineWidths[i - 1] =\n                i === activeSegmentIndex\n                    ? outlineWidth + activeSegmentOutlineWidthDelta\n                    : outlineWidth;\n        }\n        labelmapActor.getProperty().setLabelOutlineThickness(outlineWidths);\n    }\n    else {\n        labelmapActor\n            .getProperty()\n            .setLabelOutlineThickness(new Array(numColors - 1).fill(0));\n    }\n    const visible = isActiveLabelmap || renderInactiveSegmentations;\n    labelmapActor.setVisibility(visible);\n}\nfunction _getLabelmapConfig(labelmapConfig, isActiveLabelmap, segmentsLabelmapConfig) {\n    const segmentLabelmapConfig = segmentsLabelmapConfig || {};\n    const configToUse = {\n        ...labelmapConfig,\n        ...segmentLabelmapConfig,\n    };\n    const fillAlpha = isActiveLabelmap\n        ? configToUse.fillAlpha\n        : configToUse.fillAlphaInactive;\n    const outlineWidth = isActiveLabelmap\n        ? configToUse.outlineWidth\n        : configToUse.outlineWidthInactive;\n    const renderFill = isActiveLabelmap\n        ? configToUse.renderFill\n        : configToUse.renderFillInactive;\n    const renderOutline = isActiveLabelmap\n        ? configToUse.renderOutline\n        : configToUse.renderOutlineInactive;\n    const outlineOpacity = isActiveLabelmap\n        ? configToUse.outlineOpacity\n        : configToUse.outlineOpacityInactive;\n    const activeSegmentOutlineWidthDelta = configToUse.activeSegmentOutlineWidthDelta;\n    return {\n        fillAlpha,\n        outlineWidth,\n        renderFill,\n        renderOutline,\n        outlineOpacity,\n        activeSegmentOutlineWidthDelta,\n    };\n}\nfunction _needsTransferFunctionUpdate(viewportId, segmentationId, segmentIndex, { fillAlpha, renderFill, renderOutline, segmentColor, outlineWidth, segmentsHidden, cfun, ofun, }) {\n    const cacheUID = `${viewportId}-${segmentationId}-${segmentIndex}`;\n    const oldConfig = labelMapConfigCache.get(cacheUID);\n    if (!oldConfig) {\n        labelMapConfigCache.set(cacheUID, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            outlineWidth,\n            segmentColor: segmentColor.slice(),\n            segmentsHidden: new Set(segmentsHidden),\n            cfunMTime: cfun.getMTime(),\n            ofunMTime: ofun.getMTime(),\n        });\n        return {\n            forceOpacityUpdate: true,\n            forceColorUpdate: true,\n        };\n    }\n    const { fillAlpha: oldFillAlpha, renderFill: oldRenderFill, renderOutline: oldRenderOutline, outlineWidth: oldOutlineWidth, segmentColor: oldSegmentColor, segmentsHidden: oldSegmentsHidden, cfunMTime: oldCfunMTime, ofunMTime: oldOfunMTime, } = oldConfig;\n    const forceColorUpdate = oldSegmentColor[0] !== segmentColor[0] ||\n        oldSegmentColor[1] !== segmentColor[1] ||\n        oldSegmentColor[2] !== segmentColor[2];\n    const forceOpacityUpdate = oldSegmentColor[3] !== segmentColor[3] ||\n        oldFillAlpha !== fillAlpha ||\n        oldRenderFill !== renderFill ||\n        oldRenderOutline !== renderOutline ||\n        oldOutlineWidth !== outlineWidth ||\n        oldSegmentsHidden !== segmentsHidden;\n    if (forceOpacityUpdate || forceColorUpdate) {\n        labelMapConfigCache.set(cacheUID, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            outlineWidth,\n            segmentColor: segmentColor.slice(),\n            segmentsHidden: new Set(segmentsHidden),\n            cfunMTime: cfun.getMTime(),\n            ofunMTime: ofun.getMTime(),\n        });\n    }\n    return {\n        forceOpacityUpdate,\n        forceColorUpdate,\n    };\n}\nasync function _addLabelmapToViewport(viewport, labelmapData, segmentationId) {\n    await addLabelmapToElement(viewport.element, labelmapData, segmentationId);\n}\nexport default {\n    render,\n    removeRepresentation,\n};\nexport { render, removeRepresentation };\n","import { cache, getEnabledElementByViewportId, Enums, } from '@cornerstonejs/core';\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport removeSurfaceFromElement from './removeSurfaceFromElement';\nimport addOrUpdateSurfaceToElement from './addOrUpdateSurfaceToElement';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { getColorLUT } from '../../../stateManagement/segmentation/getColorLUT';\nimport { canComputeRequestedRepresentation } from '../../../stateManagement/segmentation/polySeg/canComputeRequestedRepresentation';\nimport { computeAndAddSurfaceRepresentation } from '../../../stateManagement/segmentation/polySeg/Surface/computeAndAddSurfaceRepresentation';\nconst { ViewportType } = Enums;\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    removeSurfaceFromElement(viewport.element, segmentationId);\n    if (!renderImmediate) {\n        return;\n    }\n    viewport.render();\n}\nasync function render(viewport, representation) {\n    const { segmentationId } = representation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    let SurfaceData = segmentation.representationData[Representations.Surface];\n    if (!SurfaceData &&\n        canComputeRequestedRepresentation(segmentationId, Representations.Surface)) {\n        SurfaceData = await computeAndAddSurfaceRepresentation(segmentationId, {\n            viewport,\n        });\n        if (!SurfaceData) {\n            throw new Error(`No Surface data found for segmentationId ${segmentationId}.`);\n        }\n    }\n    const { geometryIds } = SurfaceData;\n    if (!geometryIds?.size) {\n        console.warn(`No Surfaces found for segmentationId ${segmentationId}. Skipping render.`);\n    }\n    const { colorLUTIndex } = representation;\n    const colorLUT = getColorLUT(colorLUTIndex);\n    const surfaces = [];\n    geometryIds.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (!geometry?.data) {\n            console.warn(`No Surfaces found for geometryId ${geometryId}. Skipping render.`);\n            return;\n        }\n        const segmentIndex = geometry.data.segmentIndex;\n        const surface = geometry.data;\n        const color = colorLUT[segmentIndex];\n        surface.color = color.slice(0, 3);\n        surfaces.push(surface);\n        addOrUpdateSurfaceToElement(viewport.element, surface, segmentationId);\n    });\n    viewport.render();\n}\nexport default {\n    render,\n    removeRepresentation,\n};\nexport { render, removeRepresentation };\n","import { utilities as csUtils, cache, getEnabledElement, StackViewport, eventTarget, Enums, BaseVolumeViewport, volumeLoader, } from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { BaseTool } from '../base';\nimport { fillInsideSphere, thresholdInsideSphere, } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { thresholdInsideCircle, fillInsideCircle, } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events, ToolModes, SegmentationRepresentations, StrategyCallbacks, } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, getStackSegmentationImageIdsForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getLockedSegmentIndices } from '../../stateManagement/segmentation/segmentLocking';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/getActiveSegmentation';\nclass BrushTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE_CIRCLE: fillInsideCircle,\n                ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n                FILL_INSIDE_SPHERE: fillInsideSphere,\n                ERASE_INSIDE_SPHERE: eraseInsideSphere,\n                THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n                THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n            },\n            strategySpecificConfiguration: {\n                THRESHOLD: {\n                    threshold: [-150, -70],\n                },\n            },\n            defaultStrategy: 'FILL_INSIDE_CIRCLE',\n            activeStrategy: 'FILL_INSIDE_CIRCLE',\n            thresholdVolumeId: null,\n            brushSize: 25,\n            preview: {\n                enabled: false,\n                previewColors: {},\n                previewTimeMs: 250,\n                previewMoveDistance: 8,\n                dragMoveDistance: 4,\n                dragTimeMs: 500,\n            },\n            actions: {\n                [StrategyCallbacks.AcceptPreview]: {\n                    method: StrategyCallbacks.AcceptPreview,\n                    bindings: [\n                        {\n                            key: 'Enter',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.RejectPreview]: {\n                    method: StrategyCallbacks.RejectPreview,\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._previewData = {\n            preview: null,\n            element: null,\n            timerStart: 0,\n            timer: null,\n            startPoint: [NaN, NaN],\n            isDrag: false,\n        };\n        this.onSetToolPassive = (evt) => {\n            this.disableCursor();\n        };\n        this.onSetToolEnabled = () => {\n            this.disableCursor();\n        };\n        this.onSetToolDisabled = (evt) => {\n            this.disableCursor();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this._editData = this.createEditData(element);\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            this._previewData.isDrag = false;\n            this._previewData.timerStart = Date.now();\n            const hoverData = this._hoverData || this.createHoverData(element);\n            triggerAnnotationRenderForViewportUIDs(hoverData.viewportIdsToRender);\n            const operationData = this.getOperationData(element);\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionStart);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.updateCursor(evt);\n                if (!this.configuration.preview.enabled) {\n                    return;\n                }\n                const { previewTimeMs, previewMoveDistance, dragMoveDistance } = this.configuration.preview;\n                const { currentPoints, element } = evt.detail;\n                const { canvas } = currentPoints;\n                const { preview, startPoint, timer, timerStart, isDrag } = this._previewData;\n                const delta = vec2.distance(canvas, startPoint);\n                const time = Date.now() - timerStart;\n                if (delta > previewMoveDistance ||\n                    (time > previewTimeMs && delta > dragMoveDistance)) {\n                    if (timer) {\n                        window.clearTimeout(timer);\n                        this._previewData.timer = null;\n                    }\n                    if (preview && !isDrag) {\n                        this.rejectPreview(element);\n                    }\n                }\n                if (!this._previewData.timer) {\n                    const timer = window.setTimeout(this.previewCallback, 250);\n                    Object.assign(this._previewData, {\n                        timerStart: Date.now(),\n                        timer,\n                        startPoint: canvas,\n                        element,\n                    });\n                }\n            }\n        };\n        this.previewCallback = () => {\n            this._previewData.timer = null;\n            if (this._previewData.preview) {\n                return;\n            }\n            this._previewData.preview = this.applyActiveStrategyCallback(getEnabledElement(this._previewData.element), this.getOperationData(this._previewData.element), StrategyCallbacks.Preview);\n        };\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this.updateCursor(evt);\n            const { viewportIdsToRender } = this._hoverData;\n            triggerAnnotationRenderForViewportUIDs(viewportIdsToRender);\n            const delta = vec2.distance(currentPoints.canvas, this._previewData.startPoint);\n            const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n            if (!this._previewData.isDrag &&\n                this._previewData.preview &&\n                Date.now() - this._previewData.timerStart < dragTimeMs &&\n                delta < dragMoveDistance) {\n                return;\n            }\n            this._previewData.preview = this.applyActiveStrategy(enabledElement, this.getOperationData(element));\n            this._previewData.element = element;\n            this._previewData.timerStart = Date.now() + dragTimeMs;\n            this._previewData.isDrag = true;\n            this._previewData.startPoint = currentPoints.canvas;\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const operationData = this.getOperationData(element);\n            if (!this._previewData.preview && !this._previewData.isDrag) {\n                this.applyActiveStrategy(enabledElement, operationData);\n            }\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.updateCursor(evt);\n            this._editData = null;\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionEnd);\n            if (!this._previewData.isDrag) {\n                this.acceptPreview(element);\n            }\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    disableCursor() {\n        this._hoverData = undefined;\n        this.rejectPreview();\n    }\n    createEditData(element) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                detail: {\n                    type: 'Segmentation',\n                    message: 'No active segmentation detected, create a segmentation representation before using the brush tool',\n                },\n                cancelable: true,\n            });\n            eventTarget.dispatchEvent(event);\n            return null;\n        }\n        const { segmentationId } = activeSegmentation;\n        const segmentsLocked = getLockedSegmentIndices(segmentationId);\n        const { representationData } = getSegmentation(segmentationId);\n        if (viewport instanceof BaseVolumeViewport) {\n            const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n            const actors = viewport.getActors();\n            const isStackViewport = viewport instanceof StackViewport;\n            if (isStackViewport) {\n                const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                    detail: {\n                        type: 'Segmentation',\n                        message: 'Cannot perform brush operation on the selected viewport',\n                    },\n                    cancelable: true,\n                });\n                eventTarget.dispatchEvent(event);\n                return null;\n            }\n            const volumes = actors.map((actorEntry) => cache.getVolume(actorEntry.referencedId));\n            const segmentationVolume = cache.getVolume(volumeId);\n            const referencedVolumeIdToThreshold = volumes.find((volume) => csUtils.isEqual(volume.dimensions, segmentationVolume.dimensions))?.volumeId || volumes[0]?.volumeId;\n            return {\n                volumeId,\n                referencedVolumeId: this.configuration.thresholdVolumeId ?? referencedVolumeIdToThreshold,\n                segmentsLocked,\n            };\n        }\n        else {\n            const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n            if (!segmentationImageId) {\n                return;\n            }\n            if (this.configuration.activeStrategy.includes('SPHERE')) {\n                const referencedImageIds = viewport.getImageIds();\n                const isValidVolumeForSphere = csUtils.isValidVolume(referencedImageIds);\n                if (!isValidVolumeForSphere) {\n                    throw new Error('Volume is not reconstructable for sphere manipulation');\n                }\n                const volumeId = `${segmentationId}_${viewport.id}`;\n                const volume = cache.getVolume(volumeId);\n                if (volume) {\n                    return {\n                        imageId: segmentationImageId,\n                        segmentsLocked,\n                        override: {\n                            voxelManager: volume.voxelManager,\n                            imageData: volume.imageData,\n                        },\n                    };\n                }\n                else {\n                    const labelmapImageIds = getStackSegmentationImageIdsForViewport(viewport.id, segmentationId);\n                    if (!labelmapImageIds || labelmapImageIds.length === 1) {\n                        return {\n                            imageId: segmentationImageId,\n                            segmentsLocked,\n                        };\n                    }\n                    const volume = volumeLoader.createAndCacheVolumeFromImagesSync(volumeId, labelmapImageIds);\n                    return {\n                        imageId: segmentationImageId,\n                        segmentsLocked,\n                        override: {\n                            voxelManager: volume.voxelManager,\n                            imageData: volume.imageData,\n                        },\n                    };\n                }\n            }\n            else {\n                return {\n                    imageId: segmentationImageId,\n                    segmentsLocked,\n                };\n            }\n        }\n    }\n    createHoverData(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const viewportIdsToRender = [viewport.id];\n        const { segmentIndex, segmentationId, segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        const brushCursor = {\n            metadata: {\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                referencedImageId: '',\n                toolName: this.getToolName(),\n                segmentColor,\n            },\n            data: {},\n        };\n        return {\n            brushCursor,\n            centerCanvas,\n            segmentIndex,\n            viewport,\n            segmentationId,\n            segmentColor,\n            viewportIdsToRender,\n        };\n    }\n    getActiveSegmentationData(viewport) {\n        const viewportId = viewport.id;\n        const activeRepresentation = getActiveSegmentation(viewportId);\n        if (!activeRepresentation) {\n            return;\n        }\n        const { segmentationId } = activeRepresentation;\n        const segmentIndex = getActiveSegmentIndex(segmentationId);\n        if (!segmentIndex) {\n            return;\n        }\n        const segmentColor = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n        return {\n            segmentIndex,\n            segmentationId,\n            segmentColor,\n        };\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const { element } = eventData;\n        const { currentPoints } = eventData;\n        const centerCanvas = currentPoints.canvas;\n        this._hoverData = this.createHoverData(element, centerCanvas);\n        this._calculateCursor(element, centerCanvas);\n        if (!this._hoverData) {\n            return;\n        }\n        triggerAnnotationRenderForViewportUIDs(this._hoverData.viewportIdsToRender);\n    }\n    getOperationData(element) {\n        const editData = this._editData || this.createEditData(element);\n        const { segmentIndex, segmentationId, brushCursor } = this._hoverData || this.createHoverData(element);\n        const { data, metadata = {} } = brushCursor || {};\n        const { viewPlaneNormal, viewUp } = metadata;\n        const operationData = {\n            ...editData,\n            points: data?.handles?.points,\n            segmentIndex,\n            previewColors: this.configuration.preview.enabled\n                ? this.configuration.preview.previewColors\n                : null,\n            viewPlaneNormal,\n            toolGroupId: this.toolGroupId,\n            segmentationId,\n            viewUp,\n            strategySpecificConfiguration: this.configuration.strategySpecificConfiguration,\n            preview: this._previewData?.preview,\n        };\n        return operationData;\n    }\n    _calculateCursor(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvasToWorld } = viewport;\n        const camera = viewport.getCamera();\n        const { brushSize } = this.configuration;\n        const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n        const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, viewUp, viewPlaneNormal);\n        const centerCursorInWorld = canvasToWorld([\n            centerCanvas[0],\n            centerCanvas[1],\n        ]);\n        const bottomCursorInWorld = vec3.create();\n        const topCursorInWorld = vec3.create();\n        const leftCursorInWorld = vec3.create();\n        const rightCursorInWorld = vec3.create();\n        for (let i = 0; i <= 2; i++) {\n            bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n            topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n            leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n            rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n        }\n        if (!this._hoverData) {\n            return;\n        }\n        const { brushCursor } = this._hoverData;\n        const { data } = brushCursor;\n        if (data.handles === undefined) {\n            data.handles = {};\n        }\n        data.handles.points = [\n            bottomCursorInWorld,\n            topCursorInWorld,\n            leftCursorInWorld,\n            rightCursorInWorld,\n        ];\n        const activeStrategy = this.configuration.activeStrategy;\n        const strategy = this.configuration.strategies[activeStrategy];\n        if (typeof strategy.computeInnerCircleRadius === 'function') {\n            strategy.computeInnerCircleRadius({\n                configuration: this.configuration,\n                viewport,\n            });\n        }\n        data.invalidated = false;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element || !this._previewData.preview) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.AcceptPreview);\n        this._previewData.isDrag = false;\n        this._previewData.preview = null;\n    }\n    invalidateBrushCursor() {\n        if (this._hoverData === undefined) {\n            return;\n        }\n        const { data } = this._hoverData.brushCursor;\n        const { viewport } = this._hoverData;\n        data.invalidated = true;\n        const { segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        this._hoverData.brushCursor.metadata.segmentColor = segmentColor;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._hoverData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n        if (!viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const brushCursor = this._hoverData.brushCursor;\n        if (brushCursor.data.invalidated === true) {\n            const { centerCanvas } = this._hoverData;\n            const { element } = viewport;\n            this._calculateCursor(element, centerCanvas);\n        }\n        const toolMetadata = brushCursor.metadata;\n        if (!toolMetadata) {\n            return;\n        }\n        const annotationUID = toolMetadata.brushCursorUID;\n        const data = brushCursor.data;\n        const { points } = data.handles;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const bottom = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const center = [\n            Math.floor((bottom[0] + top[0]) / 2),\n            Math.floor((bottom[1] + top[1]) / 2),\n        ];\n        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n        const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;\n        if (!viewport.getRenderingEngine()) {\n            console.warn('Rendering Engine has been destroyed');\n            return;\n        }\n        const circleUID = '0';\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n            color,\n        });\n        const activeStrategy = this.configuration.activeStrategy;\n        const { dynamicRadiusInCanvas } = this.configuration\n            .strategySpecificConfiguration[activeStrategy] || {\n            dynamicRadiusInCanvas: 0,\n        };\n        if (dynamicRadiusInCanvas) {\n            const circleUID1 = '1';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID1, center, dynamicRadiusInCanvas, {\n                color,\n            });\n        }\n    }\n}\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { getEnabledElement, cache, StackViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawHandles as drawHandlesSvg, drawRect as drawRectSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport throttle from '../../utilities/throttle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROIStartEndThresholdTool extends RectangleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            computePointsInsideVolume: false,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    enabledElement,\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    toolName: this.getToolName(),\n                    volumeId,\n                    spacingInNormal,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        projectionPointsImageIds: [referencedImageId],\n                        statistics: [],\n                    },\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            if (this.configuration.calculatePointsInsideVolume) {\n                this._computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let startCoord = startCoordinate;\n                let endCoord = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    startCoord = this._getCoordinateForViewplaneNormal(startCoord, viewplaneNormal);\n                    data.startCoordinate = startCoord;\n                    data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = startCoord;\n                    data.startCoordinate = startCoord;\n                    data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = startCoord;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    endCoord = this._getCoordinateForViewplaneNormal(endCoord, viewplaneNormal);\n                    data.endCoordinate = endCoord;\n                    data.endCoordinate = endCoord;\n                }\n                const roundedStartCoord = csUtils.roundToPrecision(startCoord);\n                const roundedEndCoord = csUtils.roundToPrecision(endCoord);\n                const coord = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCoord = csUtils.roundToPrecision(coord);\n                if (roundedCoord < Math.min(roundedStartCoord, roundedEndCoord) ||\n                    roundedCoord > Math.max(roundedStartCoord, roundedEndCoord)) {\n                    continue;\n                }\n                if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, enabledElement);\n                }\n                let firstOrLastSlice = false;\n                if (roundedCoord === roundedStartCoord ||\n                    roundedCoord === roundedEndCoord) {\n                    firstOrLastSlice = true;\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    firstOrLastSlice) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineDashToUse = lineDash;\n                if (!firstOrLastSlice) {\n                    lineDashToUse = 2;\n                }\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth,\n                });\n                renderStatus = true;\n                if (this.configuration.showTextBox &&\n                    this.configuration.calculatePointsInsideVolume) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data);\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    if (!data.handles.textBox.hasMoved) {\n                        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, 100, { trailing: true });\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { imageData } = imageVolume;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const startIJK = transformWorldToIndex(imageData, points[0]);\n        const endIJK = transformWorldToIndex(imageData, points[0]);\n        const startWorld = vec3.create();\n        imageData.indexToWorldVec3(startIJK, startWorld);\n        const endWorld = vec3.create();\n        imageData.indexToWorldVec3(endIJK, endWorld);\n        if (this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) == 2) {\n            startWorld[2] = startCoordinate;\n            endWorld[2] = endCoordinate;\n        }\n        else if (this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) == 0) {\n            startWorld[0] = startCoordinate;\n            endWorld[0] = endCoordinate;\n        }\n        else if (this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) == 1) {\n            startWorld[1] = startCoordinate;\n            endWorld[1] = endCoordinate;\n        }\n        const distance = vec3.distance(startWorld, endWorld);\n        const newProjectionPoints = [];\n        for (let dist = 0; dist < distance; dist += spacingInNormal) {\n            newProjectionPoints.push(points.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[3];\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.habdles);\n        const area = Math.abs(worldWidth * worldHeight) /\n            (measureInfo.scale * measureInfo.scale);\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const projectionPoint = projectionPoints[i][0];\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, projectionPoint);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                this.isHandleOutsideImage = false;\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement);\n        }\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement);\n        }\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, viewPlaneNormal) {\n        const startPos = worldPos;\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagate * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nRectangleROIStartEndThresholdTool.toolName = 'RectangleROIStartEndThreshold';\nexport default RectangleROIStartEndThresholdTool;\n","import { getEnabledElement, cache, StackViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawHandles as drawHandlesSvg, drawRect as drawRectSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport RectangleROITool from '../annotation/RectangleROITool';\nclass RectangleROIThresholdTool extends RectangleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const targetId = this.getTargetId(viewport);\n            let referencedImageId, volumeId;\n            if (viewport instanceof StackViewport) {\n                referencedImageId = targetId.split('imageId:')[1];\n            }\n            else {\n                volumeId = csUtils.getVolumeId(targetId);\n                const imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    enabledElement,\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    toolName: this.getToolName(),\n                    volumeId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: null,\n                            worldBoundingBox: null,\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    segmentationId: null,\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                triggerAnnotationModified(annotation, element);\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n}\nRectangleROIThresholdTool.toolName = 'RectangleROIThreshold';\nexport default RectangleROIThresholdTool;\n","export var ContourWindingDirection;\n(function (ContourWindingDirection) {\n    ContourWindingDirection[ContourWindingDirection[\"CounterClockwise\"] = -1] = \"CounterClockwise\";\n    ContourWindingDirection[ContourWindingDirection[\"Unknown\"] = 0] = \"Unknown\";\n    ContourWindingDirection[ContourWindingDirection[\"Clockwise\"] = 1] = \"Clockwise\";\n})(ContourWindingDirection || (ContourWindingDirection = {}));\n","import { getEnabledElements, utilities as csUtils } from '@cornerstonejs/core';\nconst { isEqual } = csUtils;\nexport default function getViewportsForAnnotation(annotation) {\n    const { metadata } = annotation;\n    return getEnabledElements()\n        .filter((enabledElement) => {\n        if (enabledElement.FrameOfReferenceUID === metadata.FrameOfReferenceUID) {\n            const viewport = enabledElement.viewport;\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            return (isEqual(viewPlaneNormal, metadata.viewPlaneNormal) &&\n                (!metadata.viewUp || isEqual(viewUp, metadata.viewUp)));\n        }\n        return;\n    })\n        .map((enabledElement) => enabledElement.viewport);\n}\n","import { utilities, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement, } from './getAnnotationNearPoint';\nimport debounce from './debounce';\nimport throttle from './throttle';\nimport isObject from './isObject';\nimport calibrateImageSpacing from './calibrateImageSpacing';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, } from './getCalibratedUnits';\nimport triggerAnnotationRenderForViewportIds from './triggerAnnotationRenderForViewportIds';\nimport triggerAnnotationRenderForToolGroupIds from './triggerAnnotationRenderForToolGroupIds';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getSphereBoundsInfo } from './getSphereBoundsInfo';\nimport { pointToString } from './pointToString';\nimport annotationFrameRange from './annotationFrameRange';\nimport getViewportForAnnotation from './getViewportForAnnotation';\nimport { annotationHydration, getClosestImageIdForStackViewport, } from './annotationHydration';\nimport * as contours from './contours';\nimport * as segmentation from './segmentation';\nimport * as drawing from './drawing';\nimport * as math from './math';\nimport * as planar from './planar';\nimport * as viewportFilters from './viewportFilters';\nimport * as orientation from './orientation';\nimport * as cine from './cine';\nimport * as boundingBox from './boundingBox';\nimport * as planarFreehandROITool from './planarFreehandROITool';\nimport * as rectangleROITool from './rectangleROITool';\nimport { stackPrefetch, stackContextPrefetch } from './stackPrefetch';\nimport * as viewport from './viewport';\nimport * as touch from './touch';\nimport * as dynamicVolume from './dynamicVolume';\nimport * as polyDataUtils from './polyData/utils';\nimport * as voi from './voi';\nimport * as contourSegmentation from './contourSegmentation';\nimport { pointInSurroundingSphereCallback } from './pointInSurroundingSphereCallback';\nconst roundNumber = utilities.roundNumber;\nexport { math, planar, viewportFilters, drawing, debounce, dynamicVolume, throttle, orientation, isObject, touch, triggerEvent, calibrateImageSpacing, getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, segmentation, contours, triggerAnnotationRenderForViewportIds, triggerAnnotationRenderForToolGroupIds, triggerAnnotationRender, getSphereBoundsInfo, getAnnotationNearPoint, getViewportForAnnotation, getAnnotationNearPointOnEnabledElement, viewport, cine, boundingBox, rectangleROITool, planarFreehandROITool, stackPrefetch, stackContextPrefetch, roundNumber, pointToString, polyDataUtils, voi, annotationFrameRange, contourSegmentation, annotationHydration, getClosestImageIdForStackViewport, pointInSurroundingSphereCallback, };\n","export default function findClosestPoint(sourcePoints, targetPoint) {\n    let minPoint = [0, 0];\n    let minDistance = Number.MAX_SAFE_INTEGER;\n    sourcePoints.forEach(function (sourcePoint) {\n        const distance = _distanceBetween(targetPoint, sourcePoint);\n        if (distance < minDistance) {\n            minDistance = distance;\n            minPoint = [...sourcePoint];\n        }\n    });\n    return minPoint;\n}\nfunction _distanceBetween(p1, p2) {\n    const [x1, y1] = p1;\n    const [x2, y2] = p2;\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import { cache } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getCachedSegmentIndices, setCachedSegmentIndices } from './utilities';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nfunction getUniqueSegmentIndices(segmentationId) {\n    const cachedResult = getCachedSegmentIndices(segmentationId);\n    if (cachedResult) {\n        return cachedResult;\n    }\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation found for segmentationId ${segmentationId}`);\n    }\n    let indices;\n    if (segmentation.representationData.Labelmap) {\n        indices = handleLabelmapSegmentation(segmentation, segmentationId);\n    }\n    else if (segmentation.representationData.Contour) {\n        indices = handleContourSegmentation(segmentation);\n    }\n    else if (segmentation.representationData.Surface) {\n        indices = handleSurfaceSegmentation(segmentation);\n    }\n    else {\n        throw new Error(`Unsupported segmentation type: ${segmentation.representationData}`);\n    }\n    setCachedSegmentIndices(segmentationId, indices);\n    return indices;\n}\nfunction handleLabelmapSegmentation(segmentation, segmentationId) {\n    const labelmapData = segmentation.representationData[SegmentationRepresentations.Labelmap];\n    const keySet = new Set();\n    if (labelmapData.imageIds) {\n        addImageSegmentIndices(keySet, labelmapData.imageIds);\n    }\n    else {\n        addVolumeSegmentIndices(keySet, segmentationId);\n    }\n    return Array.from(keySet)\n        .map(Number)\n        .sort((a, b) => a - b);\n}\nfunction addVolumeSegmentIndices(keySet, segmentationId) {\n    const volume = cache.getVolume(segmentationId);\n    volume.voxelManager.forEach(({ value }) => {\n        if (value !== 0) {\n            keySet.add(value);\n        }\n    });\n}\nfunction addImageSegmentIndices(keySet, imageIds) {\n    imageIds.forEach((segmentationImageId) => {\n        const image = cache.getImage(segmentationImageId);\n        const scalarData = image.voxelManager.getScalarData();\n        scalarData.forEach((segmentIndex) => {\n            if (segmentIndex !== 0) {\n                keySet.add(segmentIndex);\n            }\n        });\n    });\n}\nfunction handleContourSegmentation(segmentation) {\n    const { annotationUIDsMap, geometryIds } = segmentation.representationData.Contour || {};\n    if (!geometryIds) {\n        throw new Error(`No geometryIds found for segmentationId ${segmentation.segmentationId}`);\n    }\n    const indices = new Set([...annotationUIDsMap.keys()]);\n    geometryIds.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        indices.add(geometry.data.segmentIndex);\n    });\n    return Array.from(indices).sort((a, b) => a - b);\n}\nfunction handleSurfaceSegmentation(segmentation) {\n    const geometryIds = segmentation.representationData.Surface?.geometryIds ?? [];\n    return Array.from(geometryIds.keys())\n        .map(Number)\n        .sort((a, b) => a - b);\n}\nexport { getUniqueSegmentIndices };\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function invalidateBrushCursor(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../boundingBox/getBoundingBoxAroundShape';\nconst equalsCheck = (a, b) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\nexport function getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter) {\n    const halfSpacingX = voxelSpacing[0] / 2;\n    const halfSpacingY = voxelSpacing[1] / 2;\n    const halfSpacingZ = voxelSpacing[2] / 2;\n    const voxelCornersIJK = new Array(8);\n    voxelCornersIJK[0] = csUtils.transformWorldToIndex(imageData, [\n        voxelCenter[0] - halfSpacingX,\n        voxelCenter[1] - halfSpacingY,\n        voxelCenter[2] - halfSpacingZ,\n    ]);\n    const offsets = [\n        [1, -1, -1],\n        [-1, 1, -1],\n        [1, 1, -1],\n        [-1, -1, 1],\n        [1, -1, 1],\n        [-1, 1, 1],\n        [1, 1, 1],\n    ];\n    for (let i = 0; i < 7; i++) {\n        const [xOff, yOff, zOff] = offsets[i];\n        voxelCornersIJK[i + 1] = csUtils.transformWorldToIndex(imageData, [\n            voxelCenter[0] + xOff * halfSpacingX,\n            voxelCenter[1] + yOff * halfSpacingY,\n            voxelCenter[2] + zOff * halfSpacingZ,\n        ]);\n    }\n    return getBoundingBoxAroundShapeIJK(voxelCornersIJK, dimensions);\n}\nexport function processVolumes(segmentationVolume, thresholdVolumeInformation) {\n    const { spacing: segmentationSpacing } = segmentationVolume;\n    const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();\n    const volumeInfoList = [];\n    let baseVolumeIdx = 0;\n    for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n        const { imageData, spacing, dimensions, voxelManager } = thresholdVolumeInformation[i].volume;\n        const volumeSize = thresholdVolumeInformation[i].volume.voxelManager.getScalarDataLength();\n        if (volumeSize === scalarDataLength &&\n            equalsCheck(spacing, segmentationSpacing)) {\n            baseVolumeIdx = i;\n        }\n        const lower = thresholdVolumeInformation[i].lower;\n        const upper = thresholdVolumeInformation[i].upper;\n        volumeInfoList.push({\n            imageData,\n            lower,\n            upper,\n            spacing,\n            dimensions,\n            volumeSize,\n            voxelManager,\n        });\n    }\n    return {\n        volumeInfoList,\n        baseVolumeIdx,\n    };\n}\nconst segmentIndicesCache = new Map();\nexport const setSegmentationDirty = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached) {\n        cached.isDirty = true;\n    }\n};\nexport const setSegmentationClean = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached) {\n        cached.isDirty = false;\n    }\n};\nexport const getCachedSegmentIndices = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached && !cached.isDirty) {\n        return cached.indices;\n    }\n    return null;\n};\nexport const setCachedSegmentIndices = (segmentationId, indices) => {\n    segmentIndicesCache.set(segmentationId, { indices, isDirty: false });\n};\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nexport function triggerAnnotationRenderForViewportIds(viewportIdsToRender) {\n    if (!viewportIdsToRender.length) {\n        return;\n    }\n    viewportIdsToRender.forEach((viewportId) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const { viewport } = enabledElement;\n        if (!viewport) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const element = viewport.element;\n        triggerAnnotationRender(element);\n    });\n}\nexport default triggerAnnotationRenderForViewportIds;\n","import { m as macro } from '../../macros2.js';\nimport vtkDataArray from './DataArray.js';\nimport { VtkDataTypes } from './DataArray/Constants.js';\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction extractCellSizes(cellArray) {\n  let currentIdx = 0;\n  return cellArray.filter((value, index) => {\n    if (index === currentIdx) {\n      currentIdx += value + 1;\n      return true;\n    }\n    return false;\n  });\n}\nfunction getNumberOfCells(cellArray) {\n  let cellId = 0;\n  for (let cellArrayIndex = 0; cellArrayIndex < cellArray.length;) {\n    cellArrayIndex += cellArray[cellArrayIndex] + 1;\n    cellId++;\n  }\n  return cellId;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  extractCellSizes,\n  getNumberOfCells\n};\n\n// ----------------------------------------------------------------------------\n// vtkCellArray methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCellArray(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCellArray');\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.getNumberOfCells = recompute => {\n    if (model.numberOfCells !== undefined && !recompute) {\n      return model.numberOfCells;\n    }\n    if (model.cellSizes) {\n      model.numberOfCells = model.cellSizes.length;\n    } else {\n      model.numberOfCells = getNumberOfCells(publicAPI.getData());\n    }\n    return model.numberOfCells;\n  };\n  publicAPI.getCellSizes = recompute => {\n    if (model.cellSizes !== undefined && !recompute) {\n      return model.cellSizes;\n    }\n    model.cellSizes = extractCellSizes(publicAPI.getData());\n    return model.cellSizes;\n  };\n\n  /**\n   * When `resize()` is being used, you then MUST use `insertNextCell()`.\n   */\n  publicAPI.resize = requestedNumTuples => {\n    const oldNumTuples = publicAPI.getNumberOfTuples();\n    superClass.resize(requestedNumTuples);\n    const newNumTuples = publicAPI.getNumberOfTuples();\n    if (newNumTuples < oldNumTuples) {\n      if (newNumTuples === 0) {\n        model.numberOfCells = 0;\n        model.cellSizes = [];\n      } else {\n        // We do not know how many cells are left.\n        // Set to undefined to ensure insertNextCell works correctly.\n        model.numberOfCells = undefined;\n        model.cellSizes = undefined;\n      }\n    }\n  };\n  publicAPI.setData = typedArray => {\n    superClass.setData(typedArray, 1);\n    model.numberOfCells = undefined;\n    model.cellSizes = undefined;\n  };\n  publicAPI.getCell = loc => {\n    let cellLoc = loc;\n    const numberOfPoints = model.values[cellLoc++];\n    return model.values.subarray(cellLoc, cellLoc + numberOfPoints);\n  };\n  publicAPI.insertNextCell = cellPointIds => {\n    const cellId = publicAPI.getNumberOfCells();\n    publicAPI.insertNextTuples([cellPointIds.length, ...cellPointIds]);\n    // By computing the number of cells earlier, we made sure that numberOfCells is defined\n    ++model.numberOfCells;\n    if (model.cellSizes != null) {\n      model.cellSizes.push(cellPointIds.length);\n    }\n    return cellId;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nfunction defaultValues(initialValues) {\n  return {\n    empty: true,\n    numberOfComponents: 1,\n    dataType: VtkDataTypes.UNSIGNED_INT,\n    ...initialValues\n  };\n}\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  vtkDataArray.extend(publicAPI, model, defaultValues(initialValues));\n  vtkCellArray(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCellArray');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCellArray$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\nexport { STATIC, vtkCellArray$1 as default, extend, newInstance };\n","const DataTypeByteSize = {\n  Int8Array: 1,\n  Uint8Array: 1,\n  Uint8ClampedArray: 1,\n  Int16Array: 2,\n  Uint16Array: 2,\n  Int32Array: 4,\n  Uint32Array: 4,\n  Float32Array: 4,\n  Float64Array: 8\n};\nconst VtkDataTypes = {\n  VOID: '',\n  // not sure to know what that should be\n  CHAR: 'Int8Array',\n  SIGNED_CHAR: 'Int8Array',\n  UNSIGNED_CHAR: 'Uint8Array',\n  UNSIGNED_CHAR_CLAMPED: 'Uint8ClampedArray',\n  // should be used for VTK.js internal purpose only\n  SHORT: 'Int16Array',\n  UNSIGNED_SHORT: 'Uint16Array',\n  INT: 'Int32Array',\n  UNSIGNED_INT: 'Uint32Array',\n  FLOAT: 'Float32Array',\n  DOUBLE: 'Float64Array'\n};\nconst DefaultDataType = VtkDataTypes.FLOAT;\nvar Constants = {\n  DefaultDataType,\n  DataTypeByteSize,\n  VtkDataTypes\n};\n\nexport { DataTypeByteSize, DefaultDataType, VtkDataTypes, Constants as default };\n","const AttributeTypes = {\n  SCALARS: 0,\n  VECTORS: 1,\n  NORMALS: 2,\n  TCOORDS: 3,\n  TENSORS: 4,\n  GLOBALIDS: 5,\n  PEDIGREEIDS: 6,\n  EDGEFLAG: 7,\n  NUM_ATTRIBUTES: 8\n};\nconst AttributeLimitTypes = {\n  MAX: 0,\n  EXACT: 1,\n  NOLIMIT: 2\n};\nconst CellGhostTypes = {\n  DUPLICATECELL: 1,\n  // the cell is present on multiple processors\n  HIGHCONNECTIVITYCELL: 2,\n  // the cell has more neighbors than in a regular mesh\n  LOWCONNECTIVITYCELL: 4,\n  // the cell has less neighbors than in a regular mesh\n  REFINEDCELL: 8,\n  // other cells are present that refines it.\n  EXTERIORCELL: 16,\n  // the cell is on the exterior of the data set\n  HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst PointGhostTypes = {\n  DUPLICATEPOINT: 1,\n  // the cell is present on multiple processors\n  HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst AttributeCopyOperations = {\n  COPYTUPLE: 0,\n  INTERPOLATE: 1,\n  PASSDATA: 2,\n  ALLCOPY: 3 // all of the above\n};\n\nconst ghostArrayName = 'vtkGhostType';\nconst DesiredOutputPrecision = {\n  DEFAULT: 0,\n  // use the point type that does not truncate any data\n  SINGLE: 1,\n  // use Float32Array\n  DOUBLE: 2 // use Float64Array\n};\n\nvar Constants = {\n  AttributeCopyOperations,\n  AttributeLimitTypes,\n  AttributeTypes,\n  CellGhostTypes,\n  DesiredOutputPrecision,\n  PointGhostTypes,\n  ghostArrayName\n};\n\nexport { AttributeCopyOperations, AttributeLimitTypes, AttributeTypes, CellGhostTypes, DesiredOutputPrecision, PointGhostTypes, Constants as default, ghostArrayName };\n","import { m as macro } from '../../macros2.js';\nimport { b as roundVector, c as clampVector } from '../Core/Math/index.js';\nimport vtkBoundingBox from './BoundingBox.js';\nimport vtkDataSet from './DataSet.js';\nimport vtkStructuredData from './StructuredData.js';\nimport { StructuredType } from './StructuredData/Constants.js';\nimport { mat3, mat4, vec3 } from 'gl-matrix';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkImageData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImageData(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkImageData');\n  publicAPI.setExtent = function () {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return false;\n    }\n    for (var _len = arguments.length, inExtent = new Array(_len), _key = 0; _key < _len; _key++) {\n      inExtent[_key] = arguments[_key];\n    }\n    const extentArray = inExtent.length === 1 ? inExtent[0] : inExtent;\n    if (extentArray.length !== 6) {\n      return false;\n    }\n    const changeDetected = model.extent.some((item, index) => item !== extentArray[index]);\n    if (changeDetected) {\n      model.extent = extentArray.slice();\n      model.dataDescription = vtkStructuredData.getDataDescriptionFromExtent(model.extent);\n      publicAPI.modified();\n    }\n    return changeDetected;\n  };\n  publicAPI.setDimensions = function () {\n    let i;\n    let j;\n    let k;\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    if (arguments.length === 1) {\n      const array = arguments.length <= 0 ? undefined : arguments[0];\n      i = array[0];\n      j = array[1];\n      k = array[2];\n    } else if (arguments.length === 3) {\n      i = arguments.length <= 0 ? undefined : arguments[0];\n      j = arguments.length <= 1 ? undefined : arguments[1];\n      k = arguments.length <= 2 ? undefined : arguments[2];\n    } else {\n      vtkErrorMacro('Bad dimension specification');\n      return;\n    }\n    publicAPI.setExtent(0, i - 1, 0, j - 1, 0, k - 1);\n  };\n  publicAPI.getDimensions = () => [model.extent[1] - model.extent[0] + 1, model.extent[3] - model.extent[2] + 1, model.extent[5] - model.extent[4] + 1];\n  publicAPI.getNumberOfCells = () => {\n    const dims = publicAPI.getDimensions();\n    let nCells = 1;\n    for (let i = 0; i < 3; i++) {\n      if (dims[i] === 0) {\n        return 0;\n      }\n      if (dims[i] > 1) {\n        nCells *= dims[i] - 1;\n      }\n    }\n    return nCells;\n  };\n  publicAPI.getNumberOfPoints = () => {\n    const dims = publicAPI.getDimensions();\n    return dims[0] * dims[1] * dims[2];\n  };\n  publicAPI.getPoint = index => {\n    const dims = publicAPI.getDimensions();\n    if (dims[0] === 0 || dims[1] === 0 || dims[2] === 0) {\n      vtkErrorMacro('Requesting a point from an empty image.');\n      return null;\n    }\n    const ijk = new Float64Array(3);\n    switch (model.dataDescription) {\n      case StructuredType.EMPTY:\n        return null;\n      case StructuredType.SINGLE_POINT:\n        break;\n      case StructuredType.X_LINE:\n        ijk[0] = index;\n        break;\n      case StructuredType.Y_LINE:\n        ijk[1] = index;\n        break;\n      case StructuredType.Z_LINE:\n        ijk[2] = index;\n        break;\n      case StructuredType.XY_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0];\n        break;\n      case StructuredType.YZ_PLANE:\n        ijk[1] = index % dims[1];\n        ijk[2] = index / dims[1];\n        break;\n      case StructuredType.XZ_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[2] = index / dims[0];\n        break;\n      case StructuredType.XYZ_GRID:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0] % dims[1];\n        ijk[2] = index / (dims[0] * dims[1]);\n        break;\n      default:\n        vtkErrorMacro('Invalid dataDescription');\n        break;\n    }\n    const coords = [0, 0, 0];\n    publicAPI.indexToWorld(ijk, coords);\n    return coords;\n  };\n\n  // vtkCell *GetCell(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCell(vtkIdType cellId, vtkGenericCell *cell) VTK_OVERRIDE;\n  // void GetCellBounds(vtkIdType cellId, double bounds[6]) VTK_OVERRIDE;\n  // virtual vtkIdType FindPoint(double x, double y, double z)\n  // {\n  //   return this->vtkDataSet::FindPoint(x, y, z);\n  // }\n  // vtkIdType FindPoint(double x[3]) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkIdType cellId, double tol2,\n  //   int& subId, double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkGenericCell *gencell,\n  //   vtkIdType cellId, double tol2, int& subId,\n  //   double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkCell *FindAndGetCell(double x[3], vtkCell *cell, vtkIdType cellId,\n  //                                 double tol2, int& subId, double pcoords[3],\n  //                                 double *weights) VTK_OVERRIDE;\n  // int GetCellType(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetCellPoints(cellId,ptIds,this->DataDescription,\n  //                                     this->GetDimensions());}\n  // void GetPointCells(vtkIdType ptId, vtkIdList *cellIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetPointCells(ptId,cellIds,this->GetDimensions());}\n  // void ComputeBounds() VTK_OVERRIDE;\n  // int GetMaxCellSize() VTK_OVERRIDE {return 8;}; //voxel is the largest\n\n  publicAPI.getBounds = () => publicAPI.extentToBounds(publicAPI.getSpatialExtent());\n  publicAPI.extentToBounds = ex => vtkBoundingBox.transformBounds(ex, model.indexToWorld);\n  publicAPI.getSpatialExtent = () => vtkBoundingBox.inflate([...model.extent], 0.5);\n\n  // Internal, shouldn't need to call this manually.\n  publicAPI.computeTransforms = () => {\n    mat4.fromTranslation(model.indexToWorld, model.origin);\n    model.indexToWorld[0] = model.direction[0];\n    model.indexToWorld[1] = model.direction[1];\n    model.indexToWorld[2] = model.direction[2];\n    model.indexToWorld[4] = model.direction[3];\n    model.indexToWorld[5] = model.direction[4];\n    model.indexToWorld[6] = model.direction[5];\n    model.indexToWorld[8] = model.direction[6];\n    model.indexToWorld[9] = model.direction[7];\n    model.indexToWorld[10] = model.direction[8];\n    mat4.scale(model.indexToWorld, model.indexToWorld, model.spacing);\n    mat4.invert(model.worldToIndex, model.indexToWorld);\n  };\n  publicAPI.indexToWorld = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.indexToWorld);\n    return aout;\n  };\n  publicAPI.indexToWorldVec3 = publicAPI.indexToWorld;\n  publicAPI.worldToIndex = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.worldToIndex);\n    return aout;\n  };\n  publicAPI.worldToIndexVec3 = publicAPI.worldToIndex;\n  publicAPI.indexToWorldBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.indexToWorld, bout);\n  };\n  publicAPI.worldToIndexBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.worldToIndex, bout);\n  };\n\n  // Make sure the transform is correct\n  publicAPI.onModified(publicAPI.computeTransforms);\n  publicAPI.computeTransforms();\n  publicAPI.getCenter = () => vtkBoundingBox.getCenter(publicAPI.getBounds());\n  publicAPI.computeHistogram = function (worldBounds) {\n    let voxelFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const bounds = [0, 0, 0, 0, 0, 0];\n    publicAPI.worldToIndexBounds(worldBounds, bounds);\n    const point1 = [0, 0, 0];\n    const point2 = [0, 0, 0];\n    vtkBoundingBox.computeCornerPoints(bounds, point1, point2);\n    roundVector(point1, point1);\n    roundVector(point2, point2);\n    const dimensions = publicAPI.getDimensions();\n    clampVector(point1, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point1);\n    clampVector(point2, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point2);\n    const yStride = dimensions[0];\n    const zStride = dimensions[0] * dimensions[1];\n    const pixels = publicAPI.getPointData().getScalars().getData();\n    let maximum = -Infinity;\n    let minimum = Infinity;\n    let sumOfSquares = 0;\n    let isum = 0;\n    let inum = 0;\n    for (let z = point1[2]; z <= point2[2]; z++) {\n      for (let y = point1[1]; y <= point2[1]; y++) {\n        let index = point1[0] + y * yStride + z * zStride;\n        for (let x = point1[0]; x <= point2[0]; x++) {\n          if (!voxelFunction || voxelFunction([x, y, z], bounds)) {\n            const pixel = pixels[index];\n            if (pixel > maximum) maximum = pixel;\n            if (pixel < minimum) minimum = pixel;\n            sumOfSquares += pixel * pixel;\n            isum += pixel;\n            inum += 1;\n          }\n          ++index;\n        }\n      }\n    }\n    const average = inum > 0 ? isum / inum : 0;\n    const variance = inum ? Math.abs(sumOfSquares / inum - average * average) : 0;\n    const sigma = Math.sqrt(variance);\n    return {\n      minimum,\n      maximum,\n      average,\n      variance,\n      sigma,\n      count: inum\n    };\n  };\n\n  // TODO: use the unimplemented `vtkDataSetAttributes` for scalar length, that is currently also a TODO (GetNumberOfComponents).\n  // Scalar data could be tuples for color information?\n  publicAPI.computeIncrements = function (extent) {\n    let numberOfComponents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const increments = [];\n    let incr = numberOfComponents;\n\n    // Calculate array increment offsets\n    // similar to c++ vtkImageData::ComputeIncrements\n    for (let idx = 0; idx < 3; ++idx) {\n      increments[idx] = incr;\n      incr *= extent[idx * 2 + 1] - extent[idx * 2] + 1;\n    }\n    return increments;\n  };\n\n  /**\n   * @param {Number[]} index the localized `[i,j,k]` pixel array position. Float values will be rounded.\n   * @return {Number} the corresponding flattened index in the scalar array\n   */\n  publicAPI.computeOffsetIndex = _ref => {\n    let [i, j, k] = _ref;\n    const extent = publicAPI.getExtent();\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    const increments = publicAPI.computeIncrements(extent, numberOfComponents);\n    // Use the array increments to find the pixel index\n    // similar to c++ vtkImageData::GetArrayPointer\n    // Math.floor to catch \"practically 0\" e^-15 scenarios.\n    return Math.floor((Math.round(i) - extent[0]) * increments[0] + (Math.round(j) - extent[2]) * increments[1] + (Math.round(k) - extent[4]) * increments[2]);\n  };\n\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @return {Number|NaN} the corresponding pixel's index in the scalar array\n   */\n  publicAPI.getOffsetIndexFromWorld = xyz => {\n    const extent = publicAPI.getExtent();\n    const index = publicAPI.worldToIndex(xyz);\n\n    // Confirm indexed i,j,k coords are within the bounds of the volume\n    for (let idx = 0; idx < 3; ++idx) {\n      if (index[idx] < extent[idx * 2] || index[idx] > extent[idx * 2 + 1]) {\n        vtkErrorMacro(`GetScalarPointer: Pixel ${index} is not in memory. Current extent = ${extent}`);\n        return NaN;\n      }\n    }\n\n    // Assumed the index here is within 0 <-> scalarData.length, but doesn't hurt to check upstream\n    return publicAPI.computeOffsetIndex(index);\n  };\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @param {Number?} comp the scalar component index for multi-component scalars\n   * @return {Number|NaN} the corresponding pixel's scalar value\n   */\n  publicAPI.getScalarValueFromWorld = function (xyz) {\n    let comp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    if (comp < 0 || comp >= numberOfComponents) {\n      vtkErrorMacro(`GetScalarPointer: Scalar Component ${comp} is not within bounds. Current Scalar numberOfComponents: ${numberOfComponents}`);\n      return NaN;\n    }\n    const offsetIndex = publicAPI.getOffsetIndexFromWorld(xyz);\n    if (Number.isNaN(offsetIndex)) {\n      // VTK Error Macro will have been tripped already, no need to do it again,\n      return offsetIndex;\n    }\n    return publicAPI.getPointData().getScalars().getComponent(offsetIndex, comp);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  direction: null,\n  // a mat3\n  indexToWorld: null,\n  // a mat4\n  worldToIndex: null,\n  // a mat4\n  spacing: [1.0, 1.0, 1.0],\n  origin: [0.0, 0.0, 0.0],\n  extent: [0, -1, 0, -1, 0, -1],\n  dataDescription: StructuredType.EMPTY\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkDataSet.extend(publicAPI, model, initialValues);\n  if (!model.direction) {\n    model.direction = mat3.identity(new Float64Array(9));\n  } else if (Array.isArray(model.direction)) {\n    model.direction = new Float64Array(model.direction.slice(0, 9));\n  }\n  model.indexToWorld = new Float64Array(16);\n  model.worldToIndex = new Float64Array(16);\n\n  // Set/Get methods\n  macro.get(publicAPI, model, ['indexToWorld', 'worldToIndex']);\n  macro.setGetArray(publicAPI, model, ['origin', 'spacing'], 3);\n  macro.setGetArray(publicAPI, model, ['direction'], 9);\n  macro.getArray(publicAPI, model, ['extent'], 6);\n\n  // Object specific methods\n  vtkImageData(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImageData');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageData$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkImageData$1 as default, extend, newInstance };\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","import min from \"./min.js\";\n\nexport default function transpose(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length(d) {\n  return d.length;\n}\n","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n"],"names":["enabledElement","invalidated","image","canvas","start","stats","lastGetPixelDataTime","lastStoredPixelDataToCanvasImageDataTime","lastPutImageDataTime","lastRenderTime","lastLutGenerateTime","render","viewport","colormap","color","renderTimeInMs","invalid","needsRedraw","scale","transform","displayedArea","translate","width","height","angle","rotation","rotate","Math","PI","widthScale","heightScale","brhc","x","tlhc","y","presentationSizeMode","rowPixelSpacing","columnPixelSpacing","verticalScale","horizontalScale","min","translation","undefined","hflip","vflip","modality","Error","scaleFactor","voi","isPreScaled","windowWidth","windowCenter","Array","isArray","invert","pixelReplication","modalityLUT","voiLUT","columns","rows","async","renderingEngine","volumeInputs","viewportIds","immediateRender","suppressEvents","viewportId","getViewport","BaseVolumeViewport","console","warn","addVolumePromises","map","addVolumes","Promise","all","stackInputs","getStackViewport","addImages","addStackPromises","DEFAULT_SETTINGS","Symbol","RUNTIME_SETTINGS","OBJECT_SETTINGS_MAP","DICTIONARY","Settings","constructor","base","dictionary","Object","create","seal","defineProperty","this","value","set","key","get","unset","name","endsWith","deleteCount","namespace","slice","deleteAll","length","prototype","hasOwnProperty","call","startsWith","forEach","callback","iterate","extend","import","root","isPlainObject","keys","dump","context","deepSet","assert","subject","getRuntimeSettings","getDefaultSettings","subfield","defaultSettings","settingObj","setting","split","runtimeSettings","getObjectSettings","from","settings","objectSettingsMap","WeakMap","extendRuntimeSettings","references","last","current","previous","indexOf","isValidKey","prefix","record","failCount","has","add","field","delete","setAll","WeakSet","getPrototypeOf","separator","subKey","subContext","subContextValue","props","points","type","data","id","_points","_type","_color","_segmentIndex","segmentIndex","sizeInBytes","_getSizeInBytes","flatPointsArray","point","flat","ContourSet","_contours","frameOfReferenceUID","_createEachContour","contourDataArray","contourData","contour","push","_updateContourSetCentroid","numberOfPoints","totalNumberOfPoints","sumOfPoints","reduce","acc","centroid","closestPoint","_getDistance","_centroid","pointA","pointB","sqrt","contours","flatMap","numberOfContours","numberOfPointsArray","getPointsInContour","contourIndex","getNumberOfPointsInAContour","Surface","_polys","polys","_updateCentroid","sumX","sumY","sumZ","i","BlendMode","BlendModes","COMPOSITE_BLEND","MAXIMUM_INTENSITY_BLEND","MINIMUM_INTENSITY_BLEND","AVERAGE_INTENSITY_BLEND","GeometryType","CalibrationTypes","GenerateImageType","getEnabledElement","element","viewportUid","renderingEngineUid","dataset","getEnabledElementByIds","renderingEngineId","hasBeenDestroyed","FrameOfReferenceUID","getFrameOfReferenceUID","getEnabledElementByViewportId","renderingEngines","getEnabledElements","enabledElements","getViewports","workerRegistry","workerPoolManager","R","registerWorker","workerName","workerFn","options","maxWorkerInstances","overwrite","autoTerminateOnIdle","enabled","idleTimeThreshold","idleCheckIntervalId","clearInterval","workerProperties","instances","loadCounters","lastActiveTime","nativeWorkers","fill","worker","getNextWorkerAPI","error","workerInstances","filter","instance","minLoadIndex","minLoadValue","currentLoadValue","api","index","executeTask","methodName","args","requestType","RequestType","Compute","priority","callbacks","resolve","reject","addRequest","finalCallbacks","cb","processing","results","Date","now","setInterval","terminateIdleWorkers","err","_","terminateWorkerInstance","terminate","workerInstance","csRenderInitialized","defaultConfig","gpuTier","tier","isMobile","rendering","useCPURendering","preferSizeOverAccuracy","strictZSpacingForVolumeViewport","peerImport","moduleId","config","isIOS","test","navigator","platform","maxTouchPoints","includes","canRenderFloatTextures","getShouldUseCPURendering","isCornerstoneInitialized","getConfiguration","getWebWorkerManager","geometryLoaders","unknownGeometryLoader","loadGeometryFromGeometryLoader","geometryId","colonIndex","scheme","substring","loader","geometryLoadObject","promise","then","geometry","GEOMETRY_LOADED","errorObject","GEOMETRY_LOADED_FAILED","loadGeometry","getGeometryLoadObject","loadAndCacheGeometry","putGeometryLoadObject","createAndCacheGeometry","getGeometry","CONTOUR","geometryData","SURFACE","putGeometrySync","registerGeometryLoader","geometryLoader","registerUnknownGeometryLoader","oldGeometryLoader","imageLoaders","unknownImageLoader","loadImageFromImageLoader","imageId","cachedImageLoadObject","getImageLoadObject","handleImageLoadPromise","imageLoadObject","imagePromise","voxelManager","numberOfComponents","createImageVoxelManager","scalarData","getPixelData","getScalarData","imageFrame","pixelData","ensureVoxelManager","IMAGE_LOADED","catch","errorDetails","IMAGE_LOAD_FAILED","loadImage","loadAndCacheImage","putImageLoadObject","loadAndCacheImages","imageIds","createAndCacheDerivedImage","referencedImageId","skipCreateBuffer","onCacheAdd","imagePlaneModule","TypedArrayConstructor","targetBuffer","imageScalarData","derivedImageId","referencedImagePlaneMetadata","metadata","referencedImageGeneralSeriesMetadata","instanceNumber","imagePixelModule","bitsAllocated","bitsStored","highBit","samplesPerPixel","pixelRepresentation","localImage","createAndCacheLocalImage","dimensions","spacing","origin","imagePositionPatient","direction","imageOrientationPatient","putImageSync","createAndCacheDerivedImages","referencedImageIds","derivedImageIds","newOptions","getDerivedImageId","rowCosines","columnCosines","pixelSpacing","scalarDataToUse","Uint8Array","Float32Array","Uint16Array","Int16Array","numBytes","photometricInterpretation","minPixelValue","maxPixelValue","intercept","dataType","slope","getCanvas","rgba","byteLength","cancelLoadImage","filterRequests","additionalDetails","cancelFn","cancelLoadImages","cancelLoadAll","requestPool","getRequestPool","requests","pop","volumeId","loadObject","getVolumeLoadObject","cancel","clearRequestStack","registerImageLoader","imageLoader","registerUnknownImageLoader","oldImageLoader","unregisterAllImageLoaders","createAndCacheDerivedLabelmapImages","createAndCacheDerivedLabelmapImage","createContourSet","contourSetData","contourSet","validateContourSet","createSurface","surfaceData","surface","validateSurface","volumeLoaders","unknownVolumeLoader","loadVolumeFromVolumeLoader","volumeLoadObject","volume","VOLUME_LOADED","VOLUME_LOADED_FAILED","loadVolume","createAndCacheVolume","putVolumeLoadObject","createAndCacheDerivedVolume","referencedVolumeId","referencedVolume","getVolume","isDynamicVolume","getCurrentTimePointImageIds","derivedImages","derivedVolumeImageIds","derivedVolume","structuredClone","putVolumeSync","createAndCacheVolumeFromImages","cachedVolume","getImage","createAndCacheVolumeFromImagesSync","volumeProps","createLocalVolume","preventCache","sliceLength","totalNumberOfVoxels","isCacheable","sliceData","subarray","derivedImage","imageVolume","createImageVolumeVoxelManager","registerVolumeLoader","volumeLoader","getVolumeLoaderSchemes","registerUnknownVolumeLoader","oldVolumeLoader","getUnknownVolumeLoaderSchema","createAndCacheDerivedLabelmapVolume","createLocalLabelmapVolume","ProgressiveIterator","as","iterator","v","e","reason","done","nextValue","waiting","rejectReason","getRecent","asyncIterator","errorCallback","generate","processFunction","bind","nextPromise","donePromise","getNextPromise","getDonePromise","RLEVoxelMap","depth","Map","jMultiple","kMultiple","defaultValue","pixelDataConstructor","j","rle","getRLE","getRun","k","runIndex","row","end","rleIndex","findIndex","rle1","rle0","oldValue","rleInsert","isAfter","insertIndex","rlePrev","rleNext","splice","nextnext","iEnd","clear","rowOffset","comp","isImageActor","actorEntry","actorIsA","actorType","actor","isA","applyPreset","preset","colorTransferArray","colorTransfer","parseFloat","shiftRange","Infinity","max","center","getShiftRange","cfun","normColorTransferValuePoints","r","g","b","range","rescaled","removeAllPoints","addRGBPoint","applyPointsToRGBFunction","getProperty","setRGBTransferFunction","scalarOpacityArray","scalarOpacity","ofun","normPoints","opacity","pwf","addPoint","applyPointsToPiecewiseFunction","property","setScalarOpacity","gradientMinValue","gradientMinOpacity","gradientMaxValue","gradientMaxOpacity","gradientOpacity","setUseGradientOpacity","setGradientOpacityMinimumValue","setGradientOpacityMinimumOpacity","setGradientOpacityMaximumValue","setGradientOpacityMaximumOpacity","interpolation","setInterpolationTypeToFastLinear","setShade","shade","ambient","diffuse","specular","specularPower","setAmbient","setDiffuse","setSpecular","setSpecularPower","renderingEngineAndViewportIds","renderingEnginesArray","viewports","getRenderingEngineAndViewportsContainingVolume","renderViewports","clamp","_colormaps","registerColormap","Name","getColormap","getColormapNames","findMatchingColormap","rgbPoints","colormapsVTK","rgbPresetNames","presetName","getPresetByName","colormapsCS3D","colormapName","matchedColormap","concat","find","RGBPoints","presetRGBPoints","opacityPoints","getScalarOpacity","getDataPointer","createLinearRGBTransferFunction","voiRange","lower","upper","createSigmoidRGBTransferFunction","approximationNodes","table","wc","ww","log","logit","buildFunctionFromArray","values","decimate","list","interleave","offset","interleaveIndices","deepClone","obj","clonedObj","getClosestImageId","worldPos","viewPlaneNormal","kVector","dotProducts","abs","EPSILON","halfSpacingInNormalDirection","imageIdForTool","dir","dot","camera","getCamera","spacingInNormalDirection","focalPoint","getActors","a","referencedId","uid","volumeActor","sliceRange","numberOfSlices","round","imageIndex","floor","getMinMax","storedPixelData","storedPixel","numPixels","getScalingParameters","modalityLutModule","generalSeriesModule","scalingParameters","rescaleSlope","rescaleIntercept","suvFactor","suvbw","suvbsa","suvlbm","SMALL_EPSILON","isOne","isUnit","off","isOrthonormal","getSliceRange","imageData","getMapper","getInputData","corners","getDirection","dx","dy","dz","getDimensions","it","indexToWorld","buildFromDegree","identity","rotateFromDirections","pt","apply","transformedFocalPoint","currentSlice","minX","maxX","getSpacingInNormalDirection","iVector","jVector","projectedSpacing","EPSILON_PART","isPrimaryVolume","str","starts","getTargetVolumeAndSpacingInNormalDir","targetId","useSlabThickness","volumeActors","actorUID","imageVolumes","va","iv","targetVolumeId","imageVolumeIndex","getSpacingInNormal","smallest","hasPrimaryVolume","slabThickness","getProperties","targetViewports","filteredViewports","getVolumeViewports","vp","hasVolumeId","getVoiFromSigmoidRGBTransferFunction","cfunRange","getRange","getTable","cfunDomain","y1","logy1","x1","y2","logy2","x2","getVolumeActorCorners","bounds","extentToBounds","getExtent","getVolumeId","getActor","numScrollSteps","floatingStepNumber","currentStepIndex","sliceRangeInfo","hasFloatScalingParameters","some","Number","isInteger","hasNaNValues","input","isNaN","imageIdToURI","retrieveConfigurationState","IMAGE_RETRIEVE_CONFIGURATION","imageRetrieveMetadataProvider","payload","queries","query","addProvider","EventListenerPhases","TargetEventListeners","target","_eventListeners","_children","_target","isEmpty","size","addEventListener","dotIndex","namespaceToken","childElementEventListener","_addEventListener","removeEventListener","_removeEventListener","reset","entries","child","_unregisterAllEvents","listenersMap","listenerPhase","capture","Capture","Bubble","registeredPhases","None","callbackItem","newListenerPhase","_unregisterAllListeners","listener","eventPhases","currentPhase","useCapture","MultiTargetEventListenerManager","_targetsEventListeners","eventListeners","targetEventListeners","scaleRGBTransferFunction","rgbTransferFunction","scalingFactor","getSize","nodeValue1","getNodeValue","setNodeValue","LAST_RUNTIME_ID","GLOBAL_CONTEXT","DEFAULT_MAX","DEFAULT_SEPARATOR","getRuntimeId","symbol","idComponents","carry","n","getNextRuntimeId","join","state","imageURI","isOpposite","v1","v2","tolerance","indexWithinDimensions","targetViewport","getRenderingEngine","sameVolumesViewports","targetActors","vpActors","every","vpActor","preScale","scaled","renderToCanvasGPU","imageOrVolume","viewportOptions","displayArea","imageArea","HTMLCanvasElement","isVolume","document","createElement","devicePixelRatio","window","originalWidth","originalHeight","style","visibility","position","body","appendChild","uniqueId","setAttribute","temporaryCanvas","getOrCreateCanvas","RenderingEngine","viewportInput","ViewportType","ORTHOGRAPHIC","STACK","defaultOptions","enableElement","elementRendered","viewReference","onImageRendered","eventDetail","useViewRef","setViewReference","getContext","drawImage","canvasToWorld","topRight","bottomLeft","Events","IMAGE_RENDERED","setTimeout","disableElement","querySelectorAll","remove","thicknessMm","setVolumes","renderImageObject","resetCamera","setProperties","renderToCanvasCPU","_renderingEngineId","_viewportOptions","getDefaultViewport","renderingTools","calculateTransform","drawImageSync","loadImageToCanvas","Thumbnail","thumbnail","imageAspect","baseViewportOptions","renderFn","successCallback","metaData","useRGBA","cache","imageLoadPoolManager","imageIdIndex","worldCoords","newOrigin","sub","imageToWorldCoords","imageCoords","imageCoordsInWorld","getViewportsWithImageURI","hasImageURI","getClosestStackImageIndexForPoint","minimalDistance","getImageIds","currentImageIdIndex","getCurrentImageIdIndex","getDistance","planeMetadata","targetImagePlane","rowVec","colVec","planeNormal","getPlaneMetadata","plane","planar","planeEquation","planeDistanceToPoint","closestStack","distance","higherImageIds","lowerImageIds","calculateMinimalDistanceForStackViewport","getCurrentVolumeViewportSlice","canvasWidth","canvasHeight","sliceToIndexMatrix","indexToSliceMatrix","getSliceViewInfo","ijkOriginPoint","transformCanvasToIJK","ijkRowPoint","ijkColPoint","ijkRowVec","ijkColVec","ijkSliceVec","maxIJKRowVec","maxIJKColVec","getImageData","sliceViewInfo","getSliceData","spatialRegistrationMetadataProvider","viewportId1","viewportId2","entryId","entryIdReverse","viewport1","viewport2","imageId1","getSliceIndex","imageId2","imagePlaneModule1","toString","imagePlaneModule2","iop2","imagePositionPatient1","imagePositionPatient2","mat","getViewportImageCornersInWorld","ratio","topRightCanvas","bottomRightCanvas","bottomLeftCanvas","topLeftWorld","topRightWorld","bottomRightWorld","bottomLeftWorld","topLeftImage","worldToIndex","topRightImage","bottomRightImage","bottomLeftImage","topLeftImageWorld","_isInBounds","topRightImageWorld","bottomRightImageWorld","bottomLeftImageWorld","_getStackViewportImageCorners","imageCoord","PointsManager","configuration","_dimensions","_length","_byteSize","growSize","initialSize","itemLength","array","ArrayBuffer","func","getPoint","dimensionLength","getPointArray","grow","additionalSize","newSize","newArray","newData","reverse","midLength","indexStart","indexEnd","dimension","valueStart","f","mapData","p","toXYZ","xyz","z","fromXYZ","create3","subselect","count","selected","create2","StackViewport","getCornerstoneImage","isValidVolume","imageId0","seriesInstanceUID","baseMetadata","validVolume","isEqual","videoUIDs","Set","isVideoTransferSyntax","uidOrUids","convertStackToVolumeViewport","uuidv4","prevViewPresentation","getViewPresentation","prevViewReference","getViewReference","background","orientation","load","volumeViewport","volumeViewportNewVolumeHandler","VOLUME_VIEWPORT_NEW_VOLUME","setViewPresentation","convertVolumeToStackViewport","ImageVolume","prevView","stackViewport","setStack","roundToPrecision","roundNumber","precision","absValue","fixedPrecision","toFixed","convertToGrayscale","isRGBA","isRGB","newScalarData","destOffset","increment","getRandomSampleFromArray","clonedArray","shuffleArray","random","componentToHex","c","hex","rgbToHex","hexToRgb","result","exec","parseInt","deepEqual","obj1","obj2","JSON","stringify","debug","groupBy","rv","test4DTag","IPPGroups","value_getter","frame_groups","first_frame_value_set","positions","frame_value_set","frames","frame_value","setEquals","getTagValue","tag","getPhilipsPrivateBValue","InlineBinary","value_bytes","atob","ary_buf","dv","DataView","setUint8","charCodeAt","getSiemensPrivateBValue","getGEPrivateBValue","set_a","set_b","getPetFrameReferenceTime","moduleInfo","positionGroups","ippMetadata","item","frame_count","getIPPGroups","imageIdGroups","splittingTag","tags","fncList2","sort","timePoints","scaleArray","arrayLength","clip","val","low","high","delta","scrollSlabs","getVolumeViewportScrollInfo","newFocalPoint","newPosition","snapFocalPointToSlice","setCamera","desiredStepIndex","VolumeScrollEventDetail","currentImageId","getCurrentImageId","triggerEvent","eventTarget","VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS","VOLUME_VIEWPORT_SCROLL","scrollVolume","eventData","STACK_SCROLL_OUT_OF_BOUNDS","scroll","debounceLoading","loop","jumpToSlice","currentImageIndex","getTargetImageIdIndex","getNumberOfSlices","_getImageSliceData","imageIndexToJump","lastSliceIndex","_getImageIndexToJump","getViewportModality","Modality","_getViewportModality","invertRgbTransferFunction","areNumbersEqualWithTolerance","num1","num2","isNumberType","isNumberArrayLike","arr1","arr2","areArraysEqual","negative","isEqualNegative","isEqualAbs","makeVolumeMetadata","voiLut","voiLutModule","voiLUTFunction","BitsAllocated","BitsStored","SamplesPerPixel","HighBit","PhotometricInterpretation","PixelRepresentation","ImageOrientationPatient","PixelSpacing","Columns","Rows","VOILUTFunction","SeriesInstanceUID","linePlaneIntersection","p0","p1","x0","y0","z0","z1","A","B","C","D","t","normal","normalized","threePlaneIntersection","firstPlane","secondPlane","thirdPlane","A1","B1","C1","D1","A2","B2","C2","D2","A3","B3","C3","D3","m0","m1","m2","m3","signed","numerator","sign","pointInShapeCallback","pointInShapeFn","boundsIJK","returnPoints","iMin","iMax","jMin","jMax","kMin","kMax","numComps","getPointData","getScalars","getData","scanAxisNormal","getSpacing","rowSpacing","columnSpacing","scanAxisSpacing","worldPosStart","rowStep","columnStep","scanAxisStep","xMultiple","yMultiple","zMultiple","pointsInShape","currentPos","startPosJ","startPosI","pointIJK","pointLPS","deltaFrames","posDiffFromFocalPoint","steps","frameIndex","newSlicePosFromMin","sortImageIdsAndGetSpacing","referenceImagePositionPatient","rowCosineVec","colCosineVec","refIppVec","usingWadoUri","sortedImageIds","zSpacing","positionVector","prefetchedImageIds","metadataForMiddleImage","distanceBetweenFirstAndMiddleImages","distanceImagePairs","numImages","sliceThickness","spacingBetweenSlices","getTransferFunctionNodes","transferFunction","setTransferFunctionNodes","nodes","node","canvasPoint","vtkImageData","worldPoint","transformIndexToWorld","voxelPos","transformWorldToIndex","updateVTKImageDataWithCornerstoneImage","sourceImageData","newPixelData","modified","toWindowLevel","toLowHighRange","DEFINED_CURSORS","STANDARD_CURSORS","MouseCursor","fallback","getName","addFallbackStyleProperty","getStyleProperty","getDefinedCursor","definedCursors","getDefinedCursors","mouseCursor","setDefinedCursor","cursor","standardCursorNames","ELEMENT_CURSORS_MAP","_setElementCursor","cursors","_getElementCursors","resetElementCursor","hideElementCursor","BASE","iconContent","iconSize","viewBox","mousePoint","mousePointerGroupString","SEGMENTATION_CURSOR_BOUNDARIES","MINUS_RECT","PLUS_RECT","SCISSOR_ICON","RECTANGLE_ICON","CIRCLE_ICON","CursorSVG","Angle","ArrowAnnotate","Bidirectional","CobbAngle","CircleROI","EllipticalROI","FreehandROI","FreehandROISculptor","Length","Height","Probe","RectangleROI","TextMarker","Crosshairs","Eraser","Magnify","Pan","Rotate","StackScroll","WindowLevelRegion","WindowLevel","Zoom","SegmentationFreeHandEraseInside","SegmentationFreeHandFillInside","SegmentationFreeHandEraseOutside","SegmentationFreeHandFillOutside","SegmentationRectangleEraseInside","RectangleScissor","CircleScissor","assign","svgCursorNames","AnnotationStyleStates","Highlighted","ToolModes","Active","VIEWPORT_ELEMENT","getSvgNode","canvasHash","cacheKey","svgNodeCache","domRef","appendNode","svgLayerElement","svgNode","touched","setNodeTouched","clearUntouched","cacheEntry","removeChild","viewportElement","internalDivElement","querySelector","svgLayer","_getSvgLayer","svgNodeCacheForCanvas","fn","svgDrawingHelper","attributes","currentValue","getAttribute","newValue","removeAttribute","annotationUID","circleUID","radius","dataId","lineWidth","lineDash","fillOpacity","strokeOpacity","strokeWidth","svgNodeHash","_getHash","existingCircleElement","cx","cy","stroke","newCircleElement","createElementNS","ellipseUID","canvasCoordinates","existingEllipse","bottom","top","left","right","w","hypot","h","atan2","rx","ry","svgEllipseElement","handleGroupUID","handle","uniqueIndex","handleRadius","side","existingHandleElement","newHandleElement","handlePoints","drawLine","lineUID","shadow","existingLine","dropShadowStyle","newLine","drawHeight","heightUID","midX","endfirstLine","endsecondLine","firstLine","secondLine","threeLine","drawPolyline","polylineUID","fillColor","closePath","existingPolyLine","pointsAttribute","firstPoint","newPolyLine","drawPath","pathUID","pointsArrays","existingNode","numArrays","numPoints","d","newNode","_createTextSpan","text","textSpanElement","textContent","_drawTextBackground","group","getBBox","insertBefore","firstChild","bBox","textUID","textLines","padding","fontFamily","fontSize","textGroupBoundingBox","svgns","existingTextGroup","textElement","textSpans","children","textSpan","textGroupAttributes","textGroup","noSelectStyle","combinedStyle","_createTextElement","_drawTextGroup","centerX","centerY","linkUID","annotationAnchorPoints","refPoint","boundingBox","findClosestPoint","boundingBoxPoints","halfWidth","halfHeight","_boundingBoxPoints","textBoxUID","textBoxPosition","textBox","mergedOptions","centering","canvasBoundingBox","drawRectByCoordinates","rectangleUID","_width","existingRect","topLeft","bottomRight","leftEdgeCenter","svgRectElement","drawRect","drawArrow","arrowUID","cos","sin","drawRedactionRect","ChangeTypes","StrategyCallbacks","Swipe","DEFAULT_CONTOUR_SEG_TOOL_NAME","convertContourPolylineToCanvasSpace","polyline","projectedPolyline","worldToCanvas","createPolylineHole","targetAnnotation","holeAnnotation","windingDirection","targetWindingDirection","holeWindingDirection","addChildAnnotation","removeContourSegmentationAnnotation","holeContour","holePolyline","closed","updatedToolNames","toolName","viewportIdsToRender","getViewportIdsWithToolToRender","Passive","Enabled","CAMERA_MODIFIED","Enums","STACK_NEW_IMAGE","VOLUME_NEW_IMAGE","PanTool","toolProps","defaultToolProps","supportedInteractionTypes","super","touchDragCallback","evt","_dragCallback","mouseDragCallback","deltaPoints","detail","deltaPointsWorld","world","updatedPosition","updatedFocalPoint","TrackballRotateTool","rotateIncrementDegrees","_resizeObservers","_hasResolutionChanged","preMouseDownCallback","mapper","getDefaultActor","originalSampleDistance","getSampleDistance","setSampleDistance","cleanUp","once","_getViewportsInfo","getToolGroup","toolGroupId","viewportsInfo","onSetToolActive","subscribeToElementResize","resizeObserver","ResizeObserver","observe","_viewportAddedListener","TOOLGROUP_VIEWPORT_ADDED","onSetToolDisabled","disconnect","rotateCamera","centerWorld","axis","vtkCamera","getVtkActiveCamera","viewUp","getViewUp","getFocalPoint","getPosition","newViewUp","currentPoints","lastPoints","currentPointsCanvas","lastPointsCanvas","clientWidth","clientHeight","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","angleX","acos","upVec","atV","rightV","forwardV","angleY","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","middleSliceIndex","frameLength","bytesPerVoxel","frame","buffer","_getMinMax","newRange","viewportsContainingVolumeUID","properties","VolumeViewport","utilities","scaling","getPTScaledNewRange","deltaPointsCanvas","getNewRange","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","imageDynamicRange","calculatedDynamicRange","getMiddleSliceData","pixel","metadataDynamicRange","_getImageDynamicRangeFromViewport","imageDataRange","voxel","WindowLevelRegionTool","minWindowWidth","addNewAnnotation","isDrawing","getReferencedImageId","annotation","highlighted","getToolName","handles","cachedStats","editData","_activateDraw","preventDefault","triggerAnnotationRenderForViewportIds","_endCallback","_deactivateDraw","applyWindowLevelRegion","topLeftCanvas","isInteractingWithTool","MOUSE_UP","MOUSE_DRAG","MOUSE_MOVE","MOUSE_CLICK","TOUCH_END","TOUCH_DRAG","TOUCH_TAP","renderAnnotation","renderStatus","annotations","filterInteractableAnnotationsForElement","styleSpecifier","getAnnotationStyle","windowLevel","startCanvas","endCanvas","pixelLuminanceData","minMaxMean","mean","isPointNearTool","toolSelectedCallback","handleSelectedCallback","_activateModify","_deactivateModify","StackScrollTool","debounceIfNotLoaded","deltaY","mouseWheelCallback","_scroll","_scrollDrag","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","wheel","offsetHeight","PlanarRotateTool","setAngle","startPoints","currentPointWorld","startPointWorld","centerCanvas","angleBetweenLines","cross","rotAngle","rotMat","rotatedViewUp","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","pan","initialMousePosWorld","dirVec","preTouchStartCallback","_dragParallelProjection","pinch","deltaDistance","parallelScale","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","cappedParallelScale","thresholdExceeded","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","currentPointsList","parallelProjection","_panCallback","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","maxIntensity","brightestPoint","getPointInLineOfSightWithCriteria","intensity","foundToolGroup","getToolGroupForViewport","jumpToWorld","RENDERING_DEFAULTS","CONSTANTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","OPERATION","CrosshairsTool","viewportIndicators","viewportIndicatorsConfig","autoPan","panSize","referenceLinesCenterGapRadius","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","mobile","toolCenter","initializeViewport","_getAnnotations","removeAnnotation","cameraPosition","cameraFocalPoint","rotationPoints","slabThicknessPoints","activeOperation","activeViewportIds","addAnnotation","resetCrosshairs","viewportInfo","resetPan","resetZoom","resetToCenter","resetRotation","resetSlabThickness","_computeToolCenter","computeToolCenter","firstViewport","secondViewport","thirdViewport","normal1","point1","normal2","point2","normal3","point3","jumpWorld","_jump","filteredAnnotations","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","canvasCoords","proximity","_pointNearTool","interactionType","onCameraModified","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","getViewportIds","_autoPanViewportIfNecessary","onResetCamera","mouseMoveCallback","filteredToolAnnotations","imageNeedsUpdate","isAnnotationLocked","previousActiveOperation","previousActiveViewportIds","near","getHandleNearImagePoint","_areViewportIdArraysEqual","viewportUIDSpecificCrosshairs","canvasDiagonalLength","canvasMinDimensionLength","crosshairCenterCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","liangBarksyClip","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","matrix","worldUnitOrthoVectorFromCenter","slabThicknessValue","getSlabThickness","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","line","lineIndex","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","handleUID","drawHandles","referenceColorCoordinates","xOffset","yOffset","circleRadius","drawCircle","getAnnotations","toolGroupAnnotations","_onNewVolume","viewportIdArrayOne","viewportIdArrayTwo","itemFound","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewportsAnnotationsWithSameCameraDirection","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","actors","otherViewportActors","sameScene","viewportsAnnotationsToUpdate","_applyDeltaShiftToSelectedViewportCameras","dir1","dir2","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","otherViewportsIds","referenceAnnotations","viewportsIds","dotProd","projectedDelta","mod","currentPoint","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","getToolInstance","setSlabThickness","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","onSetToolPassive","onSetToolEnabled","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","toolCenterCanvas","visiblePointCanvas","visiblePointWorld","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","_applyDeltaShiftToViewportCamera","annotationCanvasCoordinate","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_hasBeenRemoved","_getReferencedImageId","_createMagnificationViewport","viewportProperties","canvasPos","magnifyToolElement","magnifyElement","classList","display","magnifyViewport","pow","_dragEndCallback","getTargetId","csEvents","isSegmentation","AdvancedMagnifyToolActions","PARALLEL_THRESHOLD","AdvancedMagnifyTool","Actions","magnifyingGlass","zoomFactor","zoomFactorList","actions","showZoomFactorsList","method","bindings","mouseButton","MouseBindings","Secondary","modifierKey","KeyboardBindings","Shift","canvasHandlePoints","_getCanvasHandlePoints","magnifyViewportId","sourceViewportId","isCanvasAnnotation","activeHandleIndex","magnifyViewportManager","createViewport","sourceEnabledElement","annotationPoints","canvasDelta","len","dispose","getAllAnnotations","canvasTop","canvasBottom","canvasLeft","radiusPoint","handleIndex","newAnnotation","_dragDrawCallback","hasMoved","_dragModifyCallback","_dragHandle","canvasCenter","currentCanvasPoints","newRadius","newCanvasHandlePoints","getStyle","activeHandleCanvasCoords","isAnnotationVisible","update","canvasCenterPos","canvasRadius","AdvancedMagnifyViewportManager","getInstance","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","parentElement","focus","onChangeCallback","eventName","stopPropagation","keyCode","which","toLowerCase","option","label","title","defaultSelected","sourceViewport","sourceElement","AdvancedMagnifyViewport","_addSourceElementEventListener","_magnifyViewportsMap","magnifyViewportInfo","_annotationRemovedCallback","destroyViewport","_newStackImageCallback","magnifyViewportsMapEntries","_getMagnifyViewportsMapEntriesBySourceViewportId","stackActorReInitialized","_reset","_newVolumeImageCallback","currentViewPlaneNormal","worldImagePlanePoint","vecHandleToImagePlane","worldDist","worldDelta","_initialize","_singleton","_removeEventListeners","_destroyViewports","magnifyViewportMapEntry","_removeSourceElementEventListener","newEnabledElement","_addEventListeners","ANNOTATION_REMOVED","newStackHandler","VIEWPORT_NEW_IMAGE_SET","newVolumeHandler","_enabledElement","_sourceToolGroup","_magnifyToolGroup","_isViewportReady","_radius","_resized","_canAutoPan","_viewportId","_sourceEnabledElement","_autoPan","visible","_browserMouseDownCallback","_browserMouseUpCallback","_handleToolModeChanged","_mouseDragCallback","_resizeViewportAsync","debounce","_resizeViewport","_syncViewports","parentNode","magnifyToolGroup","mode","toolBindingsOptions","setToolActive","setToolPassive","setToolEnabled","Disabled","setToolDisabled","_inheritBorderRadius","borderRadius","_createViewportNode","overflow","boxSizing","_convertZoomFactorToParallelScale","offsetWidth","_isStackViewport","_isVolumeViewport","_cloneToolGroups","sourceActors","magnifyToolGroupId","sourceToolGroup","clone","toolInstance","addViewport","addSegmentationRepresentations","segmentationId","SegmentationRepresentations","Labelmap","_cloneStack","_cloneVolumes","volumeInputArray","_cloneViewport","sourceViewportOptions","toolGroups","_cancelMouseEventCallback","closest","canvasCurrent","magnifyRadius","dist","distanceToPoint","maxDist","panDist","canvasDeltaPos","newCanvasPosition","currentWorldPos","newWorldPos","worldDeltaPos","autoPanCallbackData","currentPosition","_addBrowserEventListeners","_removeBrowserEventListeners","TOOL_MODE_CHANGED","sourceCanvas","_syncViewportsCameras","_syncStackViewports","setImageIdIndex","sourceProperties","resize","ReferenceLines","AnnotationDisplayTool","enforceSameFrameOfReference","showFullDimension","_init","getRenderingEngines","filterViewportsWithToolEnabled","sourceViewportCanvasCornersInWorld","onSetToolConfiguration","sourceViewPlaneNormal","isParallel","targetViewportPlane","pointSet1","pointSet2","pointSetToUse","topBottomVec","topRightVec","newNormal","isPerpendicular","lineStartWorld","lineEndWorld","handleFullDimension","vec1","vec2","targetImage","getTargetImageData","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","a2","b2","c2","OverlayGridTool","sourceImageIds","pointSets","calculateImageIdPointSets","viewportData","imageIdNormal","getImageIdNormal","targetData","initializeViewportData","pointSetsToUse","lineStartsWorld","lineEndsWorld","SegmentationIntersectionTool","actorsWorldPointsMap","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","actorEntries","cacheId","getCacheId","clippingFilter","actorWorldPointMap","polyLineIdx","worldPointsSet","canvasPoints","polyLineUID","actorWorldPointsMap","polyData","getOutputData","polyDataUtils","colorArray","colorComponentToString","component","componentString","colorToString","getColor","pointToString","ReferenceCursors","preventHandleOutsideImage","displayThreshold","positionSync","disableCursor","isHandleOutsideImage","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","worldPosition","worldBoundingBox","previousCamera","oldFocalPoint","cameraNormal","dotProduct","isElementWithCursor","updateViewportImage","lineWidthBase","crosshairUIDs","centerSpace","lineLength","currentMousePosition","closestIndex","currentDistance","normalizedViewPlane","scaledPlaneNormal","renderViewport","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","location","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","midpoint","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textCanvasCoordinates","textBoxLines","_getTextLines","drawTextBox","scaleSizeDisplayValue","scaleSizeUnits","SculptorTool","minSpacing","referencedToolNames","toolShape","referencedToolName","registeredShapes","isActive","commonData","activeAnnotationUID","isEditingOpenContour","canvasLocation","configureToolSize","selectFreehandTool","activateModify","updateCursor","endCallback","deactivateModify","activeAnnotation","filterSculptableAnnotationsForElement","calculateStats","dragCallback","sculpt","registerShapes","CircleSculptCursor","shapeName","setToolShape","shapeClass","shape","cursorShape","selectedShape","sculptData","mouseCanvasPoint","maxSpacing","getMaxSpacing","pushedHandles","pushHandles","first","insertNewHandles","interpolatePointsWithinMaxSpacing","indicesToInsertAfter","nextHandleIndex","currentCanvasPoint","nextCanvasPoint","updateToolSize","sculptableAnnotations","findNewHandleIndices","newIndexModifier","insertHandleRadially","previousIndex","nextIndex","handleData","getInsertPosition","closestAnnotationUID","getClosestFreehandToolOnElement","toolIndex","isLocked","isVisible","distanceFromTool","distancePointToContour","Default","renderShape","DIRECTIONS","VolumeRotateTool","cz","ax","ay","az","LengthTool","getTextLines","defaultGetTextLines","movingTextBox","canvasPoint1","canvasPoint2","worldPosDelta","unit","_throttledCalculateCachedStats","_calculateCachedStats","getLinkedTextBoxStyle","canvasTextBoxCoords","getTextBoxCoordsCanvas","drawLinkedTextBox","throttle","trailing","_calculateLength","pos1","pos2","worldPos1","worldPos2","targetIds","index1","index2","_isInsideVolume","cachedVolumeStats","HeightTool","_calculateHeight","outside","ProbeTool","eventDispatchDetail","getStackViewports","referencedImageURI","currentImageURI","pixelUnitsOptions","isViewportPreScaled","isSuvScaled","ijk","modalityUnit","getAtIJKPoint","calibratedResults","hasEnhancedRegionValues","units","getPixelValueUnits","DragProbeTool","postMouseDownCallback","postTouchStartCallback","EllipticalROITool","storePointData","centerPointRadius","statsCalculator","BasicStatsCalculator","initialRotation","getRotation","canvasCorners","getCanvasEllipseCorners","minorEllipse","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","originalHandleCanvas","pointsCanvas","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","dYCanvas","newHalfCanvasWidth","canvasRight","dXCanvas","newHalfCanvasHeight","areaUnit","area","stdDev","centerPoint","_getCanvasEllipseCenter","pos1Index","post2Index","ellipseObj","xRadius","yRadius","zRadius","worldWidth","worldHeight","getWorldWidthAndHeightFromTwoPoints","isEmptyArea","statsCallback","isInObject","pointInEllipse","fast","getStatistics","statsArray","ellipse","ellipseCanvasPoints","areaLine","CircleROITool","canvasEnd","radiusUnit","perimeter","pos2Index","aspect","radiusLine","ETDRSGridTool","degrees","diameters","diametersCanvas","diameter","worldMeasureToCanvas","degreesRad","angleRadians","degree","measurement","p2","p1Canvas","p2Canvas","DEFAULT_SPLINE_CONFIG","resolution","controlPointAdditionDistance","controlPointDeletionDistance","showControlPointsConnectors","controlPointAdditionEnabled","controlPointDeletionEnabled","SplineTypesEnum","SplineToolActions","SplineROITool","ContourSegmentationBaseTool","SplineTypes","contourHoleAdditionModifierKey","epsilon","spline","Cardinal","Class","CardinalSpline","CatmullRom","CatmullRomSpline","Linear","LinearSpline","BSpline","drawPreviewEnabled","lastControlPointDeletionKeys","AddControlPoint","Primary","DeleteControlPoint","Ctrl","fireChangeOnUpdate","isPointNearCurve","contourHoleProcessingEnabled","autoGenerated","changeType","Completed","HandlesUpdated","_keyDownCallback","controlPointIndex","_deleteControlPointByIndex","_mouseMoveCallback","lastCanvasPoint","_mouseDownCallback","doubleClick","MOUSE_DOUBLE_CLICK","closeContour","addNewPoint","closestControlPoint","getClosestControlPointWithinDistance","moveAnnotation","triggerAnnotationCompleted","eventType","ANNOTATION_COMPLETED","triggerAnnotationModified","StatsUpdated","ANNOTATION_MODIFIED","triggerChangeEvent","KEY_DOWN","MOUSE_DOWN","_renderStats","textboxStyle","addControlPointCallback","splineType","splineConfig","_getSplineConfig","closestPointInfo","getClosestPoint","addControlPointAtU","uValue","deleteControlPointCallback","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","canvasMaxX","maxY","canvasMaxY","canvasMinX","minY","canvasMinY","math","getAABB","topLeftBBWorld","topLeftBBIndex","bottomRightBBWorld","getArea","getMouseModifier","event","createAnnotation","cancelAnnotation","isContourSegmentationTool","renderAnnotationInstance","renderContext","annotationStyle","controlPoints","locked","annotationLocked","childAnnotations","getChildAnnotations","childAnnotationUIDs","_isSplineROIAnnotation","splinePolylineCanvas","_updateSplineInstance","getPolylinePoints","updateContourPolyline","Clockwise","updateWindingDirection","numControlPoints","previewPolylinePoints","getPreviewPolylinePoints","controlPointsConnectors","textbox","createInterpolatedSplineControl","contourAnnotation","createSpline","onInterpolationComplete","splineConfigs","setControlPoints","fixedResolution","fixedScale","SplineContourSegmentationTool","LivewireContourTool","snapHandleNearby","nearestEdge","showInterpolationPolyline","undo","proximitySquared","startPoint","endPoint","lineSegment","distanceToPointSquared","clearAnnotation","clearEditData","worldToSlice","sliceToWorld","worldPosOriginal","currentPath","getControlPoints","closestHandlePoint","distSquared","worldControlPoint","canvasControlPoint","snapPoint","scissors","findMinNearby","pathPoints","findPathToPoint","addPoints","prependPath","confirmedPath","lastPoint","getLastPoint","addControlPoint","startSearch","updateAnnotation","imgWidth","imgHeight","slicePoint","editHandle","getCalibratedLengthUnitsAndScale","setupBaseEditData","nextPos","viewportImageData","sliceImageData","ijkPoint","startPos","LivewireScissors","createInstanceFromRawPixelData","scissorsNext","currentPathNext","confirmedPathNext","numHandles","previousHandle","nextHandle","findHandlePolylineIndex","slicePos","pathPointsLeft","pathPointsRight","appendPath","contourSegmentationAnnotation","canvasHandles","livewirePath","pointArray","imagePoints","LivewireContourSegmentationTool","updateInterpolatedAnnotation","interpolationSources","originalPolyline","queueMicrotask","repeatInterpolation","originalPoints","handleSmoothing","hIndex","testPoint","minPoint","acceptedPath","path","InterpolationUpdated","rendered","polylineCanvasPoints","ArrowAnnotateTool","getTextCallback","changeTextCallback","arrowFirst","touchTapCallback","taps","doubleClickCallback","clickedAnnotation","_doneChangingTextCallback","stopImmediatePropagation","updatedText","doneChangingTextCallback","prompt","AngleTool","angleStartedNotYetCompleted","line1","canvasPoint3","line2","worldPos3","String","fromCharCode","CobbAngleTool","showArcLines","distanceToLines","isNearFirstLine","isNearSecondLine","_mouseUpCallback","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","mid1","midPoint","mid2","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","getArcsStartEndPoints","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","UltrasoundDirectionalTool","displayBothAxesDistances","startedDrawing","xValues","yValues","isHorizontal","isUnitless","drawHandle","canvasDeltaY","canvasDeltaX","projectedPointCanvas","imageIndex1","imageIndex2","values1","units1","values2","units2","dist1","dist2","KeyImageTool","canvasPosition","AnnotationEraserTool","_deleteNearbyAnnotations","toolGroup","tools","_toolInstances","annotationsToRemove","interactableAnnotations","setAnnotationSelected","RectangleScissorsTool","strategies","FILL_INSIDE","ERASE_INSIDE","defaultStrategy","activeStrategy","activeLabelmapSegmentation","activeSegmentation","segmentsLocked","segmentLocking","segmentColor","segmentation","representationData","getSegmentation","labelmapData","segmentationImageId","getCurrentLabelmapImageIdForViewport","operationData","applyActiveStrategy","toolMetadata","CircleScissorsTool","strategySpecificConfiguration","SphereScissorsTool","activeSegmentationRepresentation","CircleROIStartEndThresholdTool","numSlicesToPropagate","calculatePointsInsideVolume","showTextBox","spacingInNormal","startCoord","_getStartCoordinate","endCoord","_getEndCoordinate","startCoordinate","endCoordinate","pointsInVolume","projectionPoints","statistics","labelmapUID","_computeProjectionPoints","_computePointsInsideVolume","filterAnnotationsWithinSamePlane","viewplaneNormal","tempStartCoordinate","tempEndCoordinate","_getCoordinateForViewplaneNormal","roundedStartCoordinate","roundedEndCoordinate","cameraCoordinate","roundedCameraCoordinate","middleCoordinate","isMiddleSlice","_getIndexOfCoordinatesForViewplaneNormal","lineWidthToUse","lineDashToUse","_calculateCachedStatsTool","startIJK","endIJK","handlesToStart","startWorld","indexToWorldVec3","endWorld","newProjectionPoints","newPoint","pointsInsideVolume","measureInfo","modalityUnitOptions","worldPos1Index","worldProjectionPointIndex","indexOfProjection","worldPos2Index","numSlicesToPropagateFromStart","numSlicesToPropagateToEnd","endPos","viewplaneNormalAbs","pos","PaintFillTool","currentSegmentationImageId","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","floodFill","flooded","scalarDataIndex","setAtIndex","framesModified","getFramesModified","triggerSegmentationDataModified","boundaries","minJ","maxJ","seedIndex3D","getAtIJK","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","toIndex","getScalarDataPosition","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","OverlayMarkerType","OrientationMarkerTool","CUBE","AXIS","VTPFILE","OVERLAY_MARKER_TYPES","orientationWidget","viewportCorner","Corners","BOTTOM_RIGHT","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","ANNOTATED_CUBE","overlayConfiguration","faceProperties","xPlus","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","res","edgeThickness","edgeColor","AXES","CUSTOM","polyDataURL","initViewports","_subscribeToViewportEvents","cleanUpData","orientationMarker","orientationMarkers","updateViewport","updatingOrientationMarker","unsubscribe","unobserve","setEnabled","offscreenMultiRenderWindow","getRenderWindow","widget","getWidget","isDeleted","addAxisActorInViewport","getRenderer","removeActor","createAnnotationCube","createCustomActor","renderer","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","addWidget","url","response","fetch","arrayBuffer","vtpReader","parseAsArrayBuffer","shallowCopy","setActiveScalars","setInputData","setColorModeToDirectScalars","setMapper","rotateZ","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","axes","annotatedCube","charAt","toUpperCase","SegmentSelectTool","SelectMode","Inside","Border","hoverTimeout","searchRadius","hoverTimer","clearTimeout","_setActiveSegment","getActiveSegmentation","_setActiveSegmentForType","hoveredSegmentIndex","getSegmentIndexAtWorldPoint","getSegmentIndexAtLabelmapBorder","Contour","getHoveredContourSegmentationAnnotation","setActiveSegmentIndex","triggerSegmentationModified","VideoRedactionTool","toolConfiguration","active","viewportUIDsToRender","toolDataCanvasCoordinate","rect","_getRectangleImageCoordinates","rectangle","point0","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","worldToIndexVec3","valueMinusMean","_getTargetVolumeUID","scene","volumeUID","getVolumeActors","coloneIndex","_getTargetStackUID","annotationRenderingEngine","_needsRender","_animationFrameSet","_animationFrameHandle","_renderFlaggedViewports","_throwIfDestroyed","elements","_viewportElements","_triggerRender","_render","addViewportElement","removeViewportElement","_setViewportsToBeRenderedNextFrame","_setAllViewportsToBeRenderedNextFrame","elementsEnabled","requestAnimationFrame","enabledTools","draw","anyRendered","tool","ANNOTATION_RENDERED","cancelAnimationFrame","FrameOfReferenceSpecificAnnotationManager","getGroupKey","annotationGroupSelector","_imageVolumeModifiedHandler","frameOfReferenceSpecificAnnotations","getFramesOfReference","groupKey","getAnnotation","frameOfReferenceAnnotations","toolSpecificAnnotations","getNumberOfAnnotations","total","preprocessingFn","groupAnnotations","toolAnnotations","removeAnnotations","removedAnnotations","annotationsForTool","saveAnnotations","restoreAnnotations","getNumberOfAllAnnotations","removeAllAnnotations","IMAGE_VOLUME_MODIFIED","setPreprocessingFn","defaultFrameOfReferenceSpecificAnnotationManager","globalLockedAnnotationUIDsSet","setAnnotationLocked","makeEventDetail","lockedAnnotationUIDsSet","added","lock","unlock","publish","checkAndSetAnnotationLocked","freeze","removed","ANNOTATION_LOCK_CHANGE","selectedAnnotationUIDs","preserveSelected","clearSelectionSet","isSelected","selectAnnotation","deselectAnnotation","isAnnotationSelected","selection","selectionSet","ANNOTATION_SELECTION_CHANGE","defaultManager","getAnnotationManager","setAnnotationManager","annotationManager","resetAnnotationManager","manager","clearParentAnnotation","childUID","parentAnnotationUID","parentAnnotation","childUIDIndex","childAnnotation","parentUID","getParentAnnotation","childAnnotationUID","HTMLDivElement","annotationManagerUID","invalidateAnnotation","currAnnotation","checkAndSetAnnotationVisibility","globalHiddenAnnotationUIDsSet","setAnnotationVisibility","show","annotationUIDsSet","lastHidden","hide","lastVisible","hidden","ANNOTATION_VISIBILITY_CHANGE","_initializeConfig","colorHighlighted","colorSelected","colorLocked","textBoxVisibility","textBoxFontFamily","textBoxFontSize","textBoxColor","textBoxColorHighlighted","textBoxColorSelected","textBoxColorLocked","textBoxBackground","textBoxLinkLineWidth","textBoxLinkLineDash","textBoxShadow","getAnnotationToolStyles","getViewportToolStyles","getToolGroupToolStyles","getDefaultToolStyles","default","setAnnotationStyles","styles","annotationSpecificStyles","setViewportToolStyles","viewportSpecificStyles","setToolGroupToolStyles","toolGroupSpecificStyles","setDefaultToolStyles","toolStyle","specifications","_getToolStyle","annotationToolStyles","viewportToolStyles","global","toolGroupToolStyles","globalStyles","toolStyles","alternatives","getHierarchalPropertyStyles","Selected","Locked","AutoGenerated","triggerAnnotationAddedForElement","ANNOTATION_ADDED","triggerAnnotationAddedForFOR","getToolGroupsWithToolName","viewportsToRender","triggerAnnotationRemoved","_triggerAnnotationCompleted","triggerContourAnnotationCompleted","renderers","planarContourToolName","triggerSegmentationRender","segmentationRenderingEngine","renderSegmentationsForViewport","triggerSegmentationRenderBySegmentationId","renderSegmentation","_getAllViewports","_renderFlaggedSegmentations","_getViewportIdsForSegmentation","segmentationRepresentations","viewportRenderList","segmentationRenderList","representation","_addPlanarFreeHandToolIfAbsent","allSettled","segmentationDetails","status","onSegmentationRender","SEGMENTATION_RENDERED","hasTool","addTool","initialDefaultState","colorLUT","segmentations","viewportSegRepresentations","internalComputeVolumeLabelmapFromStack","segmentationImageIds","internalConvertStackToVolumeLabelmap","defaultSegmentationStateManager","getDefaultRenderingConfig","_stackLabelmapImageIdReferenceMap","getState","updateState","updater","newState","getColorLUT","lutIndex","getNextColorLUTIndex","resetState","updateSegmentation","draftState","addSegmentation","newSegmentation","getLabelmapImageIds","removeSegmentation","filteredSegmentations","triggerSegmentationRemoved","addSegmentationRepresentation","renderingConfig","getSegmentationRepresentations","setRenderInactiveSegmentations","addDefaultSegmentationRepresentation","addLabelmapRepresentation","triggerSegmentationRepresentationModified","segmentReps","segments","colorLUTIndex","_setActiveSegmentation","processLabelmapRepresentationAddition","isBaseVolumeSegmentation","updateLabelmapSegmentationImageReferences","_updateLabelmapSegmentationReferences","labelmapImageIds","updateCallback","viewableLabelmapImageIdFound","labelmapImageId","isReferenceViewable","asOverlay","_updateAllLabelmapSegmentationImageReferences","sliceIndex","withNavigation","getStackSegmentationImageIdsForViewport","associatedReferenceImageAndLabelmapImageIds","removeSegmentationRepresentationsInternal","specifier","removedRepresentations","currentRepresentations","activeRepresentationRemoved","shouldRemove","removeSegmentationRepresentations","triggerSegmentationRepresentationRemoved","remainingRepresentations","removeSegmentationRepresentation","suppressEvent","setActiveSegmentation","activeSegRep","segRep","viewportRepresentations","typeMatch","idMatch","getSegmentationRepresentation","getSegmentationRepresentationVisibility","viewportRepresentation","setSegmentationRepresentationVisibility","segment","addColorLUT","removeColorLUT","_getStackIdForImageIds","getAllViewportSegmentationRepresentations","representations","getSegmentationRepresentationsBySegmentationId","viewportReps","filteredReps","segmentationStyle","viewportsStyle","setStyle","currentStyles","updatedStyles","copyActiveToInactiveIfNotProvided","renderInactiveSegmentations","repConfig","perSegment","allSegments","ALL_SEGMENTATIONS_KEY","segConfig","processedStyles","labelmapStyles","renderOutlineInactive","renderOutline","outlineWidthInactive","outlineWidth","renderFillInactive","renderFill","fillAlphaInactive","fillAlpha","outlineOpacityInactive","outlineOpacity","contourStyles","outlineDashInactive","outlineDash","getDefaultStyle","allSegmentationsKey","getRenderInactiveSegmentations","clearSegmentationStyle","clearAllSegmentationStyles","clearViewportStyle","clearAllViewportStyles","resetToGlobalStyle","hasCustomStyle","segmentationStateManager","indexToUse","colorLUTToUse","missingColorLUTs","getColorLUTIndex","colorLUTOrIndex","isIndexProvided","selectedColorLUT","segmentationInputArray","segmentationInput","representationInput","internalAddSegmentationRepresentation","setColorLUT","colorLUTsIndex","segmentationRepresentation","getSegmentIndexColor","colorValue","setSegmentIndexColor","colorReference","modifiedSlicesToUse","SEGMENTATION_DATA_MODIFIED","getActiveSegmentIndex","activeSegmentIndex","getSegmentations","getViewportIdsWithSegmentation","viewportSegmentations","computeVolumeLabelmapFromStack","computeAndAddContourRepresentation","computeAndAddLabelmapRepresentation","computeAndAddSurfaceRepresentation","computeAndAddRepresentation","surfacesObj","indices","getUniqueSegmentIndices","geometryIds","promises","surfaceRepresentation","createAndCacheSurfacesFromRaw","updateSurfaceData","rawSurfacesData","rawSurfaceData","closedSurface","workerManager","triggerWorkerProgress","progress","WEB_WORKER_PROGRESS","WorkerTypes","POLYSEG_CONTOUR_TO_SURFACE","POLYSEG_LABELMAP_TO_SURFACE","computeSurfaceData","segmentIndices","contourRepresentationData","annotationUIDsMap","polylines","numPointsArray","annotationUIDs","convertContourToSurface","computeSurfaceFromContourSegmentation","computeSurfaceFromLabelmapSegmentation","labelmapRepresentationData","getCompleteScalarDataArray","convertLabelmapToSurface","surfaces","errors","Boolean","conversionPaths","canComputeRequestedRepresentation","existingRepresentationTypes","supportedTypes","representationType","representationTypeData","validateFn","getExistingRepresentationTypes","existingRepresentationType","fromRepresentationType","toRepresentationType","canConvertFromTo","computedRepresentations","computeFunction","updateFunction","onComputationComplete","debouncedUpdateFunction","_debouncedSegmentationModified","_debouncedUpdateFunction","subscribeToSegmentationChanges","isSegmentIndexLocked","setSegmentIndexLocked","getLockedSegmentIndices","re","toolGroupFilteredByIds","tg","s","MODES","toolOptions","toolGroupToolNames","ToolClass","toolClass","isMultiPartToolActive","synchronizers","BidirectionalTool","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","dataId1","dataId2","secondLineUID","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos4","index3","index4","handles1","handles2","scale1","scale2","widthUnit","vector1","vector2","PlanarFreehandContourSegmentationTool","allowOpenContours","renderResult","pointCanProjectOnLine","PlanarFreehandROITool","alwaysRenderOpenContourHandles","closeContourProximity","checkCanvasEditFallbackProximity","makeClockWise","subPixelResolution","smoothing","smoothOnAdd","smoothOnEdit","knotsRatioPercentageOnAdd","knotsRatioPercentageOnEdit","displayOnePointAsCrosshairs","isEditingClosed","isEditingOpen","activateDraw","activateOpenContourEndEdit","activateClosedContourEdit","activateOpenContourEdit","previousPoint","pStart","pEnd","cancelDrawing","cancelOpenContourEdit","cancelClosedContourEdit","calibratedScale","updateClosedCachedStats","updateOpenCachedStats","annotationsToDisplay","filterAnnotationsWithinSlice","filterAnnotationsForDisplay","annotationsWithParallelNormals","td","annotationViewPlaneNormal","annotationsWithinSlice","renderContourBeingDrawn","renderClosedContourBeingEdited","renderOpenContourBeingEdited","renderPointContourWithMarker","renderContour","_calculateStatsIfActive","worldPosIndex","worldPosIndex2","iDelta","jDelta","kDelta","ceil","worldPosEnd","canvasPosEnd","curRow","intersections","intersectionCounter","_pointIJK","getLineSegmentIntersectionsCoordinates","shift","getPixelValueUnitunit","isFinite","RectangleROITool","arguments","onImageSpacingCalibrated","frameOfReference","BaseTool","initialProps","strategyOptions","applyActiveStrategyCallback","callbackType","setConfiguration","newConfiguration","setActiveStrategy","strategyName","getViewReferenceId","polySegConversionInProgress","contourRepresentation","removeRepresentation","renderImmediate","MAX_NUMBER_COLORS","labelMapConfigCache","_getLabelmapConfig","labelmapConfig","isActiveLabelmap","segmentsLabelmapConfig","configToUse","activeSegmentOutlineWidthDelta","_needsTransferFunctionUpdate","segmentsHidden","cacheUID","oldConfig","cfunMTime","getMTime","ofunMTime","forceOpacityUpdate","forceColorUpdate","oldFillAlpha","oldRenderFill","oldRenderOutline","oldOutlineWidth","oldSegmentColor","oldSegmentsHidden","oldCfunMTime","oldOfunMTime","_addLabelmapToViewport","labelmapActorEntry","labelmapStyle","numColors","segmentSpecificLabelmapConfig","segmentOpacity","removePoint","addPointLong","labelmapActor","setClamping","setInterpolationTypeToNearest","setUseLabelOutline","setLabelOutlineOpacity","outlineWidths","setLabelOutlineThickness","setVisibility","_setLabelmapColorAndOpacity","SurfaceData","BrushTool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_CIRCLE","THRESHOLD_INSIDE_SPHERE","THRESHOLD","threshold","thresholdVolumeId","brushSize","preview","previewColors","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","AcceptPreview","RejectPreview","_previewData","timerStart","timer","NaN","isDrag","_editData","createEditData","hoverData","_hoverData","createHoverData","getOperationData","OnInteractionStart","time","rejectPreview","previewCallback","Preview","OnInteractionEnd","acceptPreview","CustomEvent","ERROR_EVENT","message","cancelable","dispatchEvent","volumes","segmentationVolume","referencedVolumeIdToThreshold","override","getActiveSegmentationData","brushCursor","activeRepresentation","_calculateCursor","viewRight","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","strategy","computeInnerCircleRadius","invalidateBrushCursor","brushCursorUID","dynamicRadiusInCanvas","circleUID1","RectangleROIStartEndThresholdTool","computePointsInsideVolume","projectionPointsImageIds","roundedStartCoord","roundedEndCoord","coord","roundedCoord","firstOrLastSlice","habdles","projectionPoint","RectangleROIThresholdTool","ContourWindingDirection","getViewportsForAnnotation","sourcePoints","targetPoint","minDistance","MAX_SAFE_INTEGER","sourcePoint","_distanceBetween","cachedResult","keySet","addImageSegmentIndices","addVolumeSegmentIndices","handleLabelmapSegmentation","handleContourSegmentation","handleSurfaceSegmentation","getViewportsInfo","equalsCheck","getVoxelOverlap","voxelSpacing","voxelCenter","halfSpacingX","halfSpacingY","halfSpacingZ","voxelCornersIJK","offsets","xOff","yOff","zOff","processVolumes","thresholdVolumeInformation","segmentationSpacing","scalarDataLength","getScalarDataLength","volumeInfoList","baseVolumeIdx","volumeSize","segmentIndicesCache","setSegmentationDirty","cached","isDirty","getCachedSegmentIndices","setCachedSegmentIndices","extractCellSizes","cellArray","currentIdx","getNumberOfCells","cellId","cellArrayIndex","STATIC","publicAPI","model","initialValues","empty","UNSIGNED_INT","defaultValues","classHierarchy","superClass","recompute","numberOfCells","cellSizes","getCellSizes","requestedNumTuples","oldNumTuples","getNumberOfTuples","newNumTuples","setData","typedArray","getCell","loc","cellLoc","insertNextCell","cellPointIds","insertNextTuples","vtkCellArray","vtkCellArray$1","newInstance","m","DataTypeByteSize","Int8Array","Uint8ClampedArray","Int32Array","Uint32Array","Float64Array","VtkDataTypes","VOID","CHAR","SIGNED_CHAR","UNSIGNED_CHAR","UNSIGNED_CHAR_CLAMPED","SHORT","UNSIGNED_SHORT","INT","FLOAT","DOUBLE","Constants","DefaultDataType","DesiredOutputPrecision","DEFAULT","SINGLE","AttributeCopyOperations","COPYTUPLE","INTERPOLATE","PASSDATA","ALLCOPY","AttributeLimitTypes","MAX","EXACT","NOLIMIT","AttributeTypes","SCALARS","VECTORS","NORMALS","TCOORDS","TENSORS","GLOBALIDS","PEDIGREEIDS","EDGEFLAG","NUM_ATTRIBUTES","CellGhostTypes","DUPLICATECELL","HIGHCONNECTIVITYCELL","LOWCONNECTIVITYCELL","REFINEDCELL","EXTERIORCELL","HIDDENCELL","PointGhostTypes","DUPLICATEPOINT","HIDDENPOINT","ghostArrayName","vtkErrorMacro","DEFAULT_VALUES","extent","dataDescription","EMPTY","setGetArray","getArray","setExtent","deleted","_len","inExtent","_key","extentArray","changeDetected","setDimensions","dims","nCells","getNumberOfPoints","SINGLE_POINT","X_LINE","Y_LINE","Z_LINE","XY_PLANE","YZ_PLANE","XZ_PLANE","XYZ_GRID","coords","getBounds","getSpatialExtent","ex","computeTransforms","ain","aout","indexToWorldBounds","bin","bout","worldToIndexBounds","onModified","getCenter","computeHistogram","worldBounds","voxelFunction","yStride","zStride","pixels","maximum","minimum","sumOfSquares","isum","inum","average","variance","sigma","computeIncrements","increments","incr","idx","computeOffsetIndex","_ref","getNumberOfComponents","getOffsetIndexFromWorld","getScalarValueFromWorld","offsetIndex","getComponent","vtkImageData$1","HASH_UNDEFINED","INFINITY","funcTag","genTag","symbolTag","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reEscapeChar","reIsHostCtor","freeGlobal","freeSelf","self","Function","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","replace","getNative","nativeCreate","symbolProto","symbolToString","Hash","entry","ListCache","MapCache","assocIndexOf","other","baseGet","object","isSymbol","isKey","stringToPath","toKey","baseIsNative","isObject","pattern","isFunction","isHostObject","toSource","getMapData","__data__","getValue","memoize","string","baseToString","match","number","quote","resolver","TypeError","memoized","Cache","isObjectLike","module","exports","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","transferHandlers","canHandle","serialize","port1","port2","MessageChannel","expose","deserialize","port","wrap","serialized","isError","stack","ep","globalThis","allowedOrigins","ev","allowedOrigin","isAllowedOrigin","argumentList","fromWireValue","returnValue","parent","prop","rawValue","proxy","transfers","transferCache","transfer","wireValue","transferables","toWireValue","postMessage","closeEndPoint","endpoint","isMessagePort","close","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","unregister","unregisterProxy","_thisArg","rawArgumentList","processArguments","construct","register","registerProxy","processed","arr","handler","serializedValue","msg","l","zip","transpose","valueof","interpolator","samples"],"sourceRoot":""}