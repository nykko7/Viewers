{"version":3,"file":"7197.bundle.46ca0a5e1656fd482370.js","mappings":"8HAEMA,E,6DAAKC,GAELC,EAAoB,GAAGF,oC,qECI7B,MAAMG,EAAe,CAAC,gCAEhBC,EAAe,CAAC,EAEtB,SAASC,EACPC,EACAC,EACAC,GAEA,MAAMC,EAAWH,EAAU,IAErB,iBACJI,EAAgB,kBAChBC,EAAiB,eACjBC,EAAc,kBACdC,EAAiB,aACjBC,EAAY,WACZC,EAAU,YACVC,EAAW,SACXC,EAAQ,QACRC,EAAO,YACPC,GACEV,EAEEW,EAAa,CACjBC,SAAU,MACVC,SAAS,EACTC,mBAAmB,EACnBC,sBAAuBC,EAAAA,GAAMC,OAC7Bb,oBACAC,eACAC,aACAH,iBACAD,oBACAD,mBACAR,kBAAiB,EACjBc,cACAW,iBAAkB,KAClBC,4BAA6B,KAC7BC,gCAAiC,KACjCC,qBAAqB,EACrBC,UAAU,EACVC,YAAY,EACZC,SAAU,CAAC,EACX9B,eACAM,WACAH,UAAW,CAACG,GACZQ,WACAE,cACAD,UACAgB,qBAAqB,GAGjBC,EAA2B1B,EAAS2B,yBAE1C,IAAKD,EAEH,YADAE,QAAQC,MAAM,mDAIhB,MAAMC,EAAmBJ,EAAyB,IAAMA,EAExDf,EAAWO,iBAAmBlB,EAAS2B,yBAAyBI,2BAChEpB,EAAWQ,4BAA8BW,EAAiB5B,kBAC1D,MAAM,kBAAE8B,GAAsBlC,EAAgBmC,SAKxCC,EAJwBF,EAAkBG,wBAC9CxB,EAAWQ,6BAGsC,GAEnD,GAAKe,EAiBHvB,EAAWS,gCAAkCc,EAAqBnB,0BAjBzC,CAEzB,MAAM,YAAEqB,GAAgBJ,EAAkBK,UACxCL,EAAkBM,OAAOC,oBACzB,EAAGC,uBAKD,MAAMC,EAAkBD,EAAiB,GACrCC,EAAgBvC,oBAAsBS,EAAWQ,8BACnDR,EAAWS,gCAAkCqB,EAAgB1B,sBAC7DqB,IACF,GAGN,CAOA,OAHAzB,EAAW+B,KAAOC,OAASC,mBAM7B,SACEC,EACA/C,EACAC,EACA6C,GAEA,MAAM,eAAEzC,GAAmB0C,GACrB,oBAAEC,GAAwBhD,EAAgBmC,SAEhD,IACGY,EAAchC,SAAWgC,EAAcvB,WACxC3B,EAAaQ,IAwHjB,SAA6B0C,GAC3B,OAAOE,EAAAA,aAAAA,MAAAA,gBAAsCF,EAAc9B,sBAC7D,CAzHIiC,CAAoBH,GAEpB,OAAOlD,EAAaQ,GAkCtB,OA/BA0C,EAAchC,SAAU,EAIxBlB,EAAaQ,GAAkB,IAAI8C,SAAQN,MAAOO,EAASC,KACzD,IAAKN,EAAcrB,UAA2D,IAA/C4B,OAAOC,KAAKR,EAAcrB,UAAU8B,OACjE,UA4BNX,gBAA6B,iBAC3B5C,EAAgB,gBAChBD,EAAe,cACf+C,EAAa,QACbD,IAEA,MAAMW,EAAgBxD,EAAiByD,eACrC,qDAGI,oBAAEV,EAAmB,sBAAEW,GAA0B3D,EAAgBmC,UAEjE,mBAAEyB,GAAuBH,EAAcI,QACvCC,QAAoBF,EAAmBG,qBAAqBhB,EAAe,KAAMD,GAEjFV,EAAuBpC,EAAgBmC,SAASD,kBAAkB8B,mBACtEjB,EAAczB,iCAGhB,IAAKc,EACH,MAAM,IAAI6B,MAAM,2CAGlB,MAAQlE,UAAWmE,GAAW9B,EACxB+B,EAAWD,EAAOE,KAAI,EAAGC,aAAcA,IAGvCC,EAAY,KACZC,GAAkB,EACxBC,EAAAA,YAAYC,iBAAiBC,EAAAA,GAAAA,EAAaC,4BAA4BC,IACpE,MAAM,gBAAEC,GAAoBD,EAAIE,OAChC9B,EAAoB+B,gBAAgB/B,EAAoBR,OAAOwC,yBAA0B,CACvFH,mBACA,IAGJ,MAAMI,QAAgBC,EAAAA,GAAYC,cAAcC,aAAaC,kBAC3DlB,EACAL,EACAwB,EAAAA,SACA,CAAEf,kBAAiBD,YAAWE,YAAW,cAAEe,aAAYA,EAAAA,eAGzD,IAAIC,GAAoC,EACxCP,EAAQQ,YAAYC,KAAKC,SAAQ,CAACD,EAAME,KCjM1C,IAAuBC,EDkMfD,EAAI,IACNF,EAAKI,KAAOJ,EAAKK,8BAEbL,EAAKI,KACPJ,EAAKI,MCtMUD,EDsMWH,EAAKI,KCrMzBE,EAAAA,GAAAA,KAAWC,OAAOC,aAAaL,GAAQzB,KAAI+B,GAAKC,KAAKC,MAAU,IAAJF,ODuMjEX,GAAoC,EACpCE,EAAKI,KAAOQ,EAAAA,UAAAA,UAAoBV,EAAIU,EAAAA,UAAAA,UAAoB9C,SAE5D,IAGEyB,EAAQsB,qBACV5C,EAAsB6C,KAAK,CACzBC,MAAO,uBACPC,QACE,8FACFC,KAAM,YAILnB,GAEH7B,EAAsB6C,KAAK,CACzBC,MAAO,mBACPC,QACE,wGACFC,KAAM,UACNC,SAAU,MAIdtD,OAAOuD,OAAO9D,EAAekC,EAC/B,CAzGc6B,CAAc,CAClB7G,mBACAD,kBACA+C,gBACAD,WAEJ,CAAE,MAAOiE,GAEP,OADAhE,EAAchC,SAAU,EACjBsC,EAAO0D,EAChB,CAGF/D,EACGgE,mCAAmCjE,GACnCkE,MAAK,KACJlE,EAAchC,SAAU,EACxBqC,GAAS,IAEV8D,OAAMnF,IACLgB,EAAchC,SAAU,EACxBsC,EAAOtB,EAAM,GACb,IAGClC,EAAaQ,EACtB,CAtDU8G,CAAMtG,EAAYb,EAAiBC,EAAkB6C,GAEtD,CAACjC,EACV,CAuJA,QAdA,UAAkC,gBAAEb,EAAe,iBAAEC,IAKnD,MAAO,CACL,CACEmH,KAAM,YACNxH,eACAyH,yBAR6BtH,GACxBD,EAA0BC,EAAWC,EAAiBC,IAUjE,EE1PMqH,EAA8C,CAClD7H,GAAI,YAIJ2H,KAAM,gBAENG,sBAAuB,GACvBC,aAAc,CAAC,WAIfC,yBAA0B,EAG1BC,gBAAiB,CACfC,gBAAiB,CACfC,aAAc,QACdC,YAAa,UACbC,oBAAoB,EACpBC,WAAY,CACV,CACEpB,KAAM,aACNlH,GAAI,YACJuI,QAAQ,EACRC,QAAQ,KAOdC,YAAa,CACX,CACEzI,GAAI,kBACJ0I,yBAA0B,KAIhCC,oBAAqB,CACnBC,gBAAiB,CACfC,oBAAqB,CACnB,CACEC,UAAW,WACXC,WAAY,CACVC,OAAQ,WAMlBC,OAAQ,CACN,CACEtB,KAAM,gBACNuB,kBAAmB,CACjBC,WAAY,OACZC,WAAY,CACVC,KAAM,EACNC,QAAS,IAGbC,UAAW,CACT,CACErB,gBAAiB,CACfG,oBAAoB,EACpBC,WAAY,CACV,CACEpB,KAAM,aACNlH,GAAI,YACJuI,QAAQ,EACRC,QAAQ,KAOdC,YAAa,CACX,CACEzI,GAAI,yBAkBlB,QATA,WACE,MAAO,CACL,CACE2H,KAAME,EAAY7H,GAClBwJ,SAAU3B,GAGhB,E,gDCjFA,MAAQ4B,aAAcC,GAAsBC,EAAAA,WAEtC,cAAEC,GAAkBrD,EAAAA,GAAAA,MAYxBb,eACEC,cAAc,qBAAEkE,KAEhBpE,EAAAA,IAGFC,eACEoE,MAAM,8BAAEC,KAERC,EAAAA,IAEIC,GAAAA,GAAsBC,EAAAA,GAiV9B,EA/UuBC,EACrB5J,kBACAC,uBAEA,MAAM,oBACJ+C,EAAmB,gBACnB6G,EAAe,kBACf3H,EAAiB,oBACjB4H,EAAmB,iBACnBC,GACE/J,EAAgBmC,SAEd6H,EAAU,CAWdC,6BAA8BpH,OAASqH,gBAAeC,iBAEpD,MAAMC,EAhDcC,GAAGF,aAAYL,0BACvC,MAAM,UAAEd,EAAS,iBAAEsB,GAAqBR,EAAoBS,WACtDC,EAAmBL,GAAcG,EAIvC,OAFiBtB,EAAUyB,IAAID,EAEhB,EA0CMH,CAAkB,CAAEF,aAAYL,wBAC3C7I,EAAwBmJ,EAASM,uBAAuB,GAExDxB,EAAegB,EAAc,GAC7BS,EAAiBzB,EAAayB,eAC9BC,EAAQ1B,EAAa2B,OAAOD,MAC5BlJ,EAAWwH,EAAa2B,OAAOnJ,SAE/Bb,EAAaqB,EAAkB8B,mBAAmB/C,GAcxD,aAZM+B,EAAoB8H,4BAA4BjK,EAAY,CAChE8J,iBACAjJ,WACAkJ,UAGF5H,EAAoB+H,wBAAwB7B,SAEtClG,EAAoBgI,8BAA8BZ,EAASD,WAAY,CAC3EQ,mBAGKA,CAAc,EAevBrB,qBAAsBA,EAAGqB,iBAAgBM,UAAU,CAAC,MAClD,MAAM/B,EAAegC,EAAAA,aAAAA,MAAAA,gBAAmDP,IAElE,SAAExG,GAAa+E,EAAaiC,mBAAmBC,SAE/CC,EAAYlH,EAASC,KAAIC,GAAWiH,EAAAA,MAAMC,SAASlH,KACnDjD,EAAmBiK,EAAUjH,KAAIoH,GAASF,EAAAA,MAAMC,SAASC,EAAMC,qBAE/DC,EAAc,GAEpB,IAAIC,EAAI,EAER,IAAK,MAAMC,KAAYP,EAAW,CAChC,MAAMQ,EAAqB,IAAIC,IACzBC,EAAYH,EAASI,gBACrB,KAAElD,EAAI,QAAEC,GAAY6C,EAG1B,IAAK,IAAIhG,EAAI,EAAGA,EAAImG,EAAUvI,OAAQoC,IAAK,CACzC,MAAMqG,EAAUF,EAAUnG,GACV,IAAZqG,GACFJ,EAAmBK,IAAID,EAE3B,CAEAP,EAAYC,KAAO,CACjBE,mBAAoBM,MAAMC,KAAKP,GAC/BE,YACAjD,OACAC,UAEJ,CAEA,MAAMsD,EAAwBX,EAAYtH,KAAIkI,GAAYA,EAAST,qBAE7DU,EAAa,CACjBV,mBAAoBM,MAAMC,KAAK,IAAIN,IAAIO,EAAsBG,SAC7DC,SAAU,GACVf,eAGIgB,EAAqB1J,EAAoB2J,gBAAgBhC,GACzDiC,EAAkB5J,EAAoB6J,kCAAkClC,GAE9ErH,OAAOwJ,QAAQJ,EAAmBhL,UAAUiE,SAAQ,EAAEoH,EAAcd,MAElE,IAAKA,EACH,OAGF,MAAM,MAAErB,GAAUqB,EAEZe,EAAsBJ,EAAgB,GACtCK,EAAQjK,EAAoBkK,gBAChCF,EAAoB7C,WACpBQ,EACAsB,EAAQc,cAGJhH,EAAgCC,EAAAA,GAAAA,KAAWC,OAAOkH,aACtDF,EAAMG,MAAM,EAAG,GAAGhJ,KAAIiJ,GAASA,EAAQ,OACvCjJ,KAAIiJ,GAASjH,KAAKC,MAAMgH,KAEpBC,EAAkB,CACtBC,cAAeR,EAAaS,WAC5BC,aAAc7C,EACd8C,qBAAsBzB,GAAS0B,eAAiB,SAChDC,qBAAsB3B,GAAS4B,eAAiB,aAChD9H,gCACA+H,sCAAuC,CACrCC,UAAW,UACXC,uBAAwB,MACxBC,YAAa,UAEfC,kCAAmC,CACjCH,UAAW,UACXC,uBAAwB,MACxBC,YAAa,WAGjB1B,EAAWE,SAASM,GAAgBO,CAAe,IAUrD,OAP8BhE,EAC5BlI,EACAmL,EACAjH,EAAAA,SACA2F,EAG0B,EAY9BkD,qBAAsBA,EAAGxD,qBACvB,MAAM+B,EAAqB1J,EAAoB2J,gBAAgBhC,GACzDyD,EAAwBpE,EAAQV,qBAAqB,CACzDqB,mBAGFjB,EAAkB0E,EAAsBC,QAAS,GAAG3B,EAAmB9B,QAAQ,EAcjF0D,kBAAmBzL,OAAS8H,iBAAgB4D,iBAC1C,MAAMC,QAAqBC,EAAAA,EAAAA,0BAAyB5E,EAAiB,CACnE5J,qBAGF,GAA4B,IAAxBuO,EAAaE,SAAiBF,EAAanB,MAC7C,OAGF,MAAMnE,EAAelG,EAAoB2J,gBAAgBhC,GAEzD,IAAKzB,EACH,MAAM,IAAIjF,MAAM,yBAGlB,MAAM,MAAE2G,GAAU1B,EACZ5I,EAAoBkO,EAAanB,OAASzC,GAAS,0BAEnD+D,EAAgB3E,EAAQV,qBAAqB,CACjDqB,iBACAM,QAAS,CACP3K,uBAIJ,IAAKqO,IAAkBA,EAAcN,QACnC,MAAM,IAAIpK,MAAM,wCAGlB,MAAQoK,QAASO,GAAsBD,EAavC,aAXMJ,EAAWM,MAAMC,MAAMF,GAO7BA,EAAkBlO,SAAW6N,EAAWQ,YAAYrO,SAEpDsO,EAAAA,GAAmBC,aAAa,CAACL,IAAoB,GAE9CA,CAAiB,EAS1BM,aAAcA,EAAGvE,qBACf,MAAMT,EAAgBlH,EAAoB2J,gBAAgBhC,GACpDwE,EAAW,CACfC,wBAAuB,KACvBC,aAAY,KACZC,aAAYA,EAAAA,IAGR/F,EAAOC,EACXU,EACAqF,EAAAA,GAAQC,iBACRR,EAAAA,GACA1D,EAAAA,MACAmE,EAAAA,MACAN,GAGF,IACE,MAAMO,EAAarG,EAAcE,GAG3BoG,EAAYC,IAAIC,gBAAgBH,GACtCI,OAAOC,SAASlJ,OAAO8I,EACzB,CAAE,MAAO5I,GACPjF,QAAQkO,KAAKjJ,EACf,GAEFkJ,aAAcA,EAAG5C,QAAO6C,gBACtB,MAAMC,EAAYC,OAAO/C,GAEzBtD,EAAiBsG,mBAAmB1K,SAAQkC,IAChB,IAAtBqI,GAAW1M,OACb2F,EAAkBmH,yBAAyBzI,EAAasI,GAExDD,GAAWvK,SAAQ4K,IACjBpH,EAAkBmH,yBAAyBzI,EAAasI,EAAWI,EAAS,GAEhF,GACA,EAEJC,kBAAmBA,EACjBnD,QACA6C,YAAY,CAAC,yBAA0B,4BAEvCnG,EAAiBsG,mBAAmB1K,SAAQkC,IAC1C,MAAM4I,EAAY1G,EAAiB2G,aAAa7I,GAChDqI,GAAWvK,SAAQ4K,IACjBE,EAAUE,qBAAqBJ,EAAU,CACvCK,8BAA+B,CAC7BC,UAAW,CACTC,UAAWzD,KAGf,GACF,GACF,GAIA0D,EAAc,CAIlBC,uCAAwC,CACtCC,UAAWjH,EAAQgH,wCAKrB/G,6BAA8B,CAC5BgH,UAAWjH,EAAQC,8BAGrBX,qBAAsB,CACpB2H,UAAWjH,EAAQV,sBAErB6E,qBAAsB,CACpB8C,UAAWjH,EAAQmE,sBAErBG,kBAAmB,CACjB2C,UAAWjH,EAAQsE,mBAErBY,aAAc,CACZ+B,UAAWjH,EAAQkF,cAErBe,aAAc,CACZgB,UAAWjH,EAAQiG,cAErBO,kBAAmB,CACjBS,UAAWjH,EAAQwG,oBAIvB,MAAO,CACLxG,UACA+G,cACAG,eAAgB,eACjB,E,wNC/WH,MAAMC,EAAYC,EAAAA,MAAW,IACpB,kCAGHC,EAA6BC,GAE/BF,EAAAA,cAACA,EAAAA,SAAc,CAACG,SAAUH,EAAAA,cAAA,WAAK,eAC7BA,EAAAA,cAACD,EAAcG,IAwCrB,EAhCkB,CAKhB7R,GAAE,EACF+R,kBAAiB,EACjBC,iBC9BK,UAA0B,gBAAEzR,IACjC,MAAM,oBAAEgD,EAAmB,eAAE0O,EAAc,iBAAE3H,GAAqB/J,EAAgBmC,SAClF,MAAO,CACL,CACEiF,KAAM,oCACNuK,SAAUA,EAAGxH,aAAYyH,SAAQ1B,YAAW2B,mBAK1C,MAAM3H,EAAgBlH,EAAoB8O,+BAA+B3H,GACzE,IAAKD,GAAe1G,OAClB,MAAO,CACLuO,UAAU,EACVC,UAAW,2CACXH,aAAcA,GAAgB,8BAIlC,MAAMpB,EAAY1G,EAAiBkI,wBAAwB9H,GAE3D,IAAKsG,EACH,MAAO,CACLsB,UAAU,EACVC,UAAW,oCACXH,aAAcA,GAAgB,yCAIlC,MAAMtB,EAAWmB,EAAeQ,qBAAqBN,GAErD,IAAKnB,EAAU0B,QAAQ5B,KAAcL,EACnC,MAAO,CACL6B,UAAU,EACVC,UAAW,oCACXH,aAAcA,GAAgB,yCAIlC,MAAMO,EAAkBlC,EACpBA,EAAUmC,SAAS5B,EAAU6B,mCAC7B7B,EAAU6B,oCAAsC/B,EAEpD,MAAO,CACLwB,UAAU,EACVC,UAAWI,EACP,6FACA,6FAIJG,SAAUH,EACX,GAIT,EDzBEI,kBAAiBA,EAAC,gBAAExS,EAAe,iBAAEC,EAAgB,gBAAEwS,KAY9C,CAAC,CAAErL,KAAM,YAAasL,UAXcpB,GAEvCF,EAAAA,cAACC,EAA0BsB,EAAA,CACzB3S,gBAAiBA,EACjBC,iBAAkBA,EAClBwS,gBAAiBA,GACbnB,MAaZsB,yBAAwB,EACxBC,yBAAwBA,E","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getToolbarModule.ts"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-seg';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { utils } from '@ohif/core';\nimport { metaData, triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { CONSTANTS, segmentation as cstSegmentation } from '@cornerstonejs/tools';\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\n\nimport { SOPClassHandlerId } from './id';\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\n\nconst loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager\n) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'SEG',\n    loading: false,\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    segments: {},\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    console.error('ReferencedSeriesSequence is missing for the SEG');\n    return;\n  }\n\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n  const { displaySetService } = servicesManager.services;\n  const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n    displaySet.referencedSeriesInstanceUID\n  );\n\n  const referencedDisplaySet = referencedDisplaySets[0];\n\n  if (!referencedDisplaySet) {\n    // subscribe to display sets added which means at some point it will be available\n    const { unsubscribe } = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\n      ({ displaySetsAdded }) => {\n        // here we can also do a little bit of search, since sometimes DICOM SEG\n        // does not contain the referenced display set uid , and we can just\n        // see which of the display sets added is more similar and assign it\n        // to the referencedDisplaySet\n        const addedDisplaySet = displaySetsAdded[0];\n        if (addedDisplaySet.SeriesInstanceUID === displaySet.referencedSeriesInstanceUID) {\n          displaySet.referencedDisplaySetInstanceUID = addedDisplaySet.displaySetInstanceUID;\n          unsubscribe();\n        }\n      }\n    );\n  } else {\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n  }\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(\n  segDisplaySet,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager,\n  headers\n) {\n  const { SOPInstanceUID } = segDisplaySet;\n  const { segmentationService } = servicesManager.services;\n\n  if (\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExists(segDisplaySet)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  segDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\n      try {\n        await _loadSegments({\n          extensionManager,\n          servicesManager,\n          segDisplaySet,\n          headers,\n        });\n      } catch (e) {\n        segDisplaySet.loading = false;\n        return reject(e);\n      }\n    }\n\n    segmentationService\n      .createSegmentationForSEGDisplaySet(segDisplaySet)\n      .then(() => {\n        segDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        segDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nasync function _loadSegments({\n  extensionManager,\n  servicesManager,\n  segDisplaySet,\n  headers,\n}: withAppTypes) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { segmentationService, uiNotificationService } = servicesManager.services;\n\n  const { dicomLoaderService } = utilityModule.exports;\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\n\n  const referencedDisplaySet = servicesManager.services.displaySetService.getDisplaySetByUID(\n    segDisplaySet.referencedDisplaySetInstanceUID\n  );\n\n  if (!referencedDisplaySet) {\n    throw new Error('referencedDisplaySet is missing for SEG');\n  }\n\n  const { instances: images } = referencedDisplaySet;\n  const imageIds = images.map(({ imageId }) => imageId);\n\n  // Todo: what should be defaults here\n  const tolerance = 0.001;\n  const skipOverlapping = true;\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\n    const { percentComplete } = evt.detail;\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\n      percentComplete,\n    });\n  });\n\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData,\n    { skipOverlapping, tolerance, eventTarget, triggerEvent }\n  );\n\n  let usedRecommendedDisplayCIELabValue = true;\n  results.segMetadata.data.forEach((data, i) => {\n    if (i > 0) {\n      data.rgba = data.RecommendedDisplayCIELabValue;\n\n      if (data.rgba) {\n        data.rgba = dicomlabToRGB(data.rgba);\n      } else {\n        usedRecommendedDisplayCIELabValue = false;\n        data.rgba = CONSTANTS.COLOR_LUT[i % CONSTANTS.COLOR_LUT.length];\n      }\n    }\n  });\n\n  if (results.overlappingSegments) {\n    uiNotificationService.show({\n      title: 'Overlapping Segments',\n      message:\n        'Unsupported overlapping segments detected, segmentation rendering results may be incorrect.',\n      type: 'warning',\n    });\n  }\n\n  if (!usedRecommendedDisplayCIELabValue) {\n    // Display a notification about the non-utilization of RecommendedDisplayCIELabValue\n    uiNotificationService.show({\n      title: 'DICOM SEG import',\n      message:\n        'RecommendedDisplayCIELabValue not found for one or more segments. The default color was used instead.',\n      type: 'warning',\n      duration: 5000,\n    });\n  }\n\n  Object.assign(segDisplaySet, results);\n}\n\nfunction _segmentationExists(segDisplaySet) {\n  return cstSegmentation.state.getSegmentation(segDisplaySet.displaySetInstanceUID);\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-seg',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import dcmjs from 'dcmjs';\n\n/**\n * Converts a CIELAB color to an RGB color using the dcmjs library.\n * @param cielab - The CIELAB color to convert.\n * @returns The RGB color as an array of three integers between 0 and 255.\n */\nfunction dicomlabToRGB(cielab: number[]): number[] {\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\n\n  return rgb;\n}\n\nexport { dicomlabToRGB };\n","import { Types } from '@ohif/core';\n\nconst segProtocol: Types.HangingProtocol.Protocol = {\n  id: '@ohif/seg',\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'Segmentations',\n  // Just apply this one when specifically listed\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n      syncGroups: [\n        {\n          type: 'hydrateseg',\n          id: 'sameFORId',\n          source: true,\n          target: true,\n          // options: {\n          //   matchingRules: ['sameFOR'],\n          // },\n        },\n      ],\n    },\n    displaySets: [\n      {\n        id: 'segDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    segDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SEG',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'Segmentations',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            allowUnmatchedView: true,\n            syncGroups: [\n              {\n                type: 'hydrateseg',\n                id: 'sameFORId',\n                source: true,\n                target: true,\n                // options: {\n                //   matchingRules: ['sameFOR'],\n                // },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'segDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: segProtocol.id,\n      protocol: segProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\nexport { segProtocol };\n","import dcmjs from 'dcmjs';\nimport { createReportDialogPrompt } from '@ohif/extension-default';\nimport { Types } from '@ohif/core';\nimport { cache, metaData } from '@cornerstonejs/core';\nimport {\n  segmentation as cornerstoneToolsSegmentation,\n  Enums as cornerstoneToolsEnums,\n  utilities,\n} from '@cornerstonejs/tools';\nimport { adaptersRT, helpers, adaptersSEG } from '@cornerstonejs/adapters';\nimport { classes, DicomMetadataStore } from '@ohif/core';\n\nimport vtkImageMarchingSquares from '@kitware/vtk.js/Filters/General/ImageMarchingSquares';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\n\nconst { segmentation: segmentationUtils } = utilities;\n\nconst { datasetToBlob } = dcmjs.data;\n\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\n  const { viewports, activeViewportId } = viewportGridService.getState();\n  const targetViewportId = viewportId || activeViewportId;\n\n  const viewport = viewports.get(targetViewportId);\n\n  return viewport;\n};\n\nconst {\n  Cornerstone3D: {\n    Segmentation: { generateSegmentation },\n  },\n} = adaptersSEG;\n\nconst {\n  Cornerstone3D: {\n    RTSS: { generateRTSSFromSegmentations },\n  },\n} = adaptersRT;\n\nconst { downloadDICOMData } = helpers;\n\nconst commandsModule = ({\n  servicesManager,\n  extensionManager,\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\n  const {\n    segmentationService,\n    uiDialogService,\n    displaySetService,\n    viewportGridService,\n    toolGroupService,\n  } = servicesManager.services as AppTypes.Services;\n\n  const actions = {\n    /**\n     * Loads segmentations for a specified viewport.\n     * The function prepares the viewport for rendering, then loads the segmentation details.\n     * Additionally, if the segmentation has scalar data, it is set for the corresponding label map volume.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentations - Array of segmentations to be loaded.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    loadSegmentationsForViewport: async ({ segmentations, viewportId }) => {\n      // Todo: handle adding more than one segmentation\n      const viewport = getTargetViewport({ viewportId, viewportGridService });\n      const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n      const segmentation = segmentations[0];\n      const segmentationId = segmentation.segmentationId;\n      const label = segmentation.config.label;\n      const segments = segmentation.config.segments;\n\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      await segmentationService.createLabelmapForDisplaySet(displaySet, {\n        segmentationId,\n        segments,\n        label,\n      });\n\n      segmentationService.addOrUpdateSegmentation(segmentation);\n\n      await segmentationService.addSegmentationRepresentation(viewport.viewportId, {\n        segmentationId,\n      });\n\n      return segmentationId;\n    },\n    /**\n     * Generates a segmentation from a given segmentation ID.\n     * This function retrieves the associated segmentation and\n     * its referenced volume, extracts label maps from the\n     * segmentation volume, and produces segmentation data\n     * alongside associated metadata.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be generated.\n     * @param params.options - Optional configuration for the generation process.\n     *\n     * @returns Returns the generated segmentation data.\n     */\n    generateSegmentation: ({ segmentationId, options = {} }) => {\n      const segmentation = cornerstoneToolsSegmentation.state.getSegmentation(segmentationId);\n\n      const { imageIds } = segmentation.representationData.Labelmap;\n\n      const segImages = imageIds.map(imageId => cache.getImage(imageId));\n      const referencedImages = segImages.map(image => cache.getImage(image.referencedImageId));\n\n      const labelmaps2D = [];\n\n      let z = 0;\n\n      for (const segImage of segImages) {\n        const segmentsOnLabelmap = new Set();\n        const pixelData = segImage.getPixelData();\n        const { rows, columns } = segImage;\n\n        // Use a single pass through the pixel data\n        for (let i = 0; i < pixelData.length; i++) {\n          const segment = pixelData[i];\n          if (segment !== 0) {\n            segmentsOnLabelmap.add(segment);\n          }\n        }\n\n        labelmaps2D[z++] = {\n          segmentsOnLabelmap: Array.from(segmentsOnLabelmap),\n          pixelData,\n          rows,\n          columns,\n        };\n      }\n\n      const allSegmentsOnLabelmap = labelmaps2D.map(labelmap => labelmap.segmentsOnLabelmap);\n\n      const labelmap3D = {\n        segmentsOnLabelmap: Array.from(new Set(allSegmentsOnLabelmap.flat())),\n        metadata: [],\n        labelmaps2D,\n      };\n\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      const representations = segmentationService.getRepresentationsForSegmentation(segmentationId);\n\n      Object.entries(segmentationInOHIF.segments).forEach(([segmentIndex, segment]) => {\n        // segmentation service already has a color for each segment\n        if (!segment) {\n          return;\n        }\n\n        const { label } = segment;\n\n        const firstRepresentation = representations[0];\n        const color = segmentationService.getSegmentColor(\n          firstRepresentation.viewportId,\n          segmentationId,\n          segment.segmentIndex\n        );\n\n        const RecommendedDisplayCIELabValue = dcmjs.data.Colors.rgb2DICOMLAB(\n          color.slice(0, 3).map(value => value / 255)\n        ).map(value => Math.round(value));\n\n        const segmentMetadata = {\n          SegmentNumber: segmentIndex.toString(),\n          SegmentLabel: label,\n          SegmentAlgorithmType: segment?.algorithmType || 'MANUAL',\n          SegmentAlgorithmName: segment?.algorithmName || 'OHIF Brush',\n          RecommendedDisplayCIELabValue,\n          SegmentedPropertyCategoryCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n          SegmentedPropertyTypeCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n        };\n        labelmap3D.metadata[segmentIndex] = segmentMetadata;\n      });\n\n      const generatedSegmentation = generateSegmentation(\n        referencedImages,\n        labelmap3D,\n        metaData,\n        options\n      );\n\n      return generatedSegmentation;\n    },\n    /**\n     * Downloads a segmentation based on the provided segmentation ID.\n     * This function retrieves the associated segmentation and\n     * uses it to generate the corresponding DICOM dataset, which\n     * is then downloaded with an appropriate filename.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be downloaded.\n     *\n     */\n    downloadSegmentation: ({ segmentationId }) => {\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      const generatedSegmentation = actions.generateSegmentation({\n        segmentationId,\n      });\n\n      downloadDICOMData(generatedSegmentation.dataset, `${segmentationInOHIF.label}`);\n    },\n    /**\n     * Stores a segmentation based on the provided segmentationId into a specified data source.\n     * The SeriesDescription is derived from user input or defaults to the segmentation label,\n     * and in its absence, defaults to 'Research Derived Series'.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be stored.\n     * @param params.dataSource - Data source where the generated segmentation will be stored.\n     *\n     * @returns {Object|void} Returns the naturalized report if successfully stored,\n     * otherwise throws an error.\n     */\n    storeSegmentation: async ({ segmentationId, dataSource }) => {\n      const promptResult = await createReportDialogPrompt(uiDialogService, {\n        extensionManager,\n      });\n\n      if (promptResult.action !== 1 && !promptResult.value) {\n        return;\n      }\n\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      if (!segmentation) {\n        throw new Error('No segmentation found');\n      }\n\n      const { label } = segmentation;\n      const SeriesDescription = promptResult.value || label || 'Research Derived Series';\n\n      const generatedData = actions.generateSegmentation({\n        segmentationId,\n        options: {\n          SeriesDescription,\n        },\n      });\n\n      if (!generatedData || !generatedData.dataset) {\n        throw new Error('Error during segmentation generation');\n      }\n\n      const { dataset: naturalizedReport } = generatedData;\n\n      await dataSource.store.dicom(naturalizedReport);\n\n      // The \"Mode\" route listens for DicomMetadataStore changes\n      // When a new instance is added, it listens and\n      // automatically calls makeDisplaySets\n\n      // add the information for where we stored it to the instance as well\n      naturalizedReport.wadoRoot = dataSource.getConfig().wadoRoot;\n\n      DicomMetadataStore.addInstances([naturalizedReport], true);\n\n      return naturalizedReport;\n    },\n    /**\n     * Converts segmentations into RTSS for download.\n     * This sample function retrieves all segentations and passes to\n     * cornerstone tool adapter to convert to DICOM RTSS format. It then\n     * converts dataset to downloadable blob.\n     *\n     */\n    downloadRTSS: ({ segmentationId }) => {\n      const segmentations = segmentationService.getSegmentation(segmentationId);\n      const vtkUtils = {\n        vtkImageMarchingSquares,\n        vtkDataArray,\n        vtkImageData,\n      };\n\n      const RTSS = generateRTSSFromSegmentations(\n        segmentations,\n        classes.MetadataProvider,\n        DicomMetadataStore,\n        cache,\n        cornerstoneToolsEnums,\n        vtkUtils\n      );\n\n      try {\n        const reportBlob = datasetToBlob(RTSS);\n\n        //Create a URL for the binary.\n        const objectUrl = URL.createObjectURL(reportBlob);\n        window.location.assign(objectUrl);\n      } catch (e) {\n        console.warn(e);\n      }\n    },\n    setBrushSize: ({ value, toolNames }) => {\n      const brushSize = Number(value);\n\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        if (toolNames?.length === 0) {\n          segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize);\n        } else {\n          toolNames?.forEach(toolName => {\n            segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize, toolName);\n          });\n        }\n      });\n    },\n    setThresholdRange: ({\n      value,\n      toolNames = ['ThresholdCircularBrush', 'ThresholdSphereBrush'],\n    }) => {\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n        toolNames?.forEach(toolName => {\n          toolGroup.setToolConfiguration(toolName, {\n            strategySpecificConfiguration: {\n              THRESHOLD: {\n                threshold: value,\n              },\n            },\n          });\n        });\n      });\n    },\n  };\n\n  const definitions = {\n    /**\n     * Obsolete?\n     */\n    loadSegmentationDisplaySetsForViewport: {\n      commandFn: actions.loadSegmentationDisplaySetsForViewport,\n    },\n    /**\n     * Obsolete?\n     */\n    loadSegmentationsForViewport: {\n      commandFn: actions.loadSegmentationsForViewport,\n    },\n\n    generateSegmentation: {\n      commandFn: actions.generateSegmentation,\n    },\n    downloadSegmentation: {\n      commandFn: actions.downloadSegmentation,\n    },\n    storeSegmentation: {\n      commandFn: actions.storeSegmentation,\n    },\n    downloadRTSS: {\n      commandFn: actions.downloadRTSS,\n    },\n    setBrushSize: {\n      commandFn: actions.setBrushSize,\n    },\n    setThresholdRange: {\n      commandFn: actions.setThresholdRange,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'SEGMENTATION',\n  };\n};\n\nexport default commandsModule;\n","import { id } from './id';\nimport React from 'react';\n\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getCommandsModule from './commandsModule';\nimport { getToolbarModule } from './getToolbarModule';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\n});\n\nconst OHIFCornerstoneSEGViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n  getCommandsModule,\n  getToolbarModule,\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\n      return (\n        <OHIFCornerstoneSEGViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n  getHangingProtocolModule,\n};\n\nexport default extension;\n","export function getToolbarModule({ servicesManager }: withAppTypes) {\n  const { segmentationService, toolbarService, toolGroupService } = servicesManager.services;\n  return [\n    {\n      name: 'evaluate.cornerstone.segmentation',\n      evaluate: ({ viewportId, button, toolNames, disabledText }) => {\n        // Todo: we need to pass in the button section Id since we are kind of\n        // forcing the button to have black background since initially\n        // it is designed for the toolbox not the toolbar on top\n        // we should then branch the buttonSectionId to have different styles\n        const segmentations = segmentationService.getSegmentationRepresentations(viewportId);\n        if (!segmentations?.length) {\n          return {\n            disabled: true,\n            className: '!text-common-bright !bg-black opacity-50',\n            disabledText: disabledText ?? 'No segmentations available',\n          };\n        }\n\n        const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\n\n        if (!toolGroup) {\n          return {\n            disabled: true,\n            className: '!text-common-bright ohif-disabled',\n            disabledText: disabledText ?? 'Not available on the current viewport',\n          };\n        }\n\n        const toolName = toolbarService.getToolNameForButton(button);\n\n        if (!toolGroup.hasTool(toolName) && !toolNames) {\n          return {\n            disabled: true,\n            className: '!text-common-bright ohif-disabled',\n            disabledText: disabledText ?? 'Not available on the current viewport',\n          };\n        }\n\n        const isPrimaryActive = toolNames\n          ? toolNames.includes(toolGroup.getActivePrimaryMouseButtonTool())\n          : toolGroup.getActivePrimaryMouseButtonTool() === toolName;\n\n        return {\n          disabled: false,\n          className: isPrimaryActive\n            ? '!text-black !bg-primary-light hover:bg-primary-light hover-text-black hover:cursor-pointer'\n            : '!text-common-bright !bg-black hover:bg-primary-light hover:cursor-pointer hover:text-black',\n          // Todo: isActive right now is used for nested buttons where the primary\n          // button needs to be fully rounded (vs partial rounded) when active\n          // otherwise it does not have any other use\n          isActive: isPrimaryActive,\n        };\n      },\n    },\n  ];\n}\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","displaySetService","services","referencedDisplaySet","getDisplaySetsForSeries","unsubscribe","subscribe","EVENTS","DISPLAY_SETS_ADDED","displaySetsAdded","addedDisplaySet","load","async","headers","segDisplaySet","segmentationService","cstSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","length","utilityModule","getModuleEntry","uiNotificationService","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","getDisplaySetByUID","Error","images","imageIds","map","imageId","tolerance","skipOverlapping","eventTarget","addEventListener","Enums","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","generateToolState","metaData","triggerEvent","usedRecommendedDisplayCIELabValue","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","x","Math","round","CONSTANTS","overlappingSegments","show","title","message","type","duration","assign","_loadSegments","e","createSegmentationForSEGDisplaySet","then","catch","_load","name","getDisplaySetsFromSeries","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","syncGroups","source","target","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","segmentation","segmentationUtils","utilities","datasetToBlob","generateSegmentation","RTSS","generateRTSSFromSegmentations","adaptersRT","downloadDICOMData","helpers","commandsModule","uiDialogService","viewportGridService","toolGroupService","actions","loadSegmentationsForViewport","segmentations","viewportId","viewport","getTargetViewport","activeViewportId","getState","targetViewportId","get","displaySetInstanceUIDs","segmentationId","label","config","createLabelmapForDisplaySet","addOrUpdateSegmentation","addSegmentationRepresentation","options","cornerstoneToolsSegmentation","representationData","Labelmap","segImages","cache","getImage","image","referencedImageId","labelmaps2D","z","segImage","segmentsOnLabelmap","Set","pixelData","getPixelData","segment","add","Array","from","allSegmentsOnLabelmap","labelmap","labelmap3D","flat","metadata","segmentationInOHIF","getSegmentation","representations","getRepresentationsForSegmentation","entries","segmentIndex","firstRepresentation","color","getSegmentColor","rgb2DICOMLAB","slice","value","segmentMetadata","SegmentNumber","toString","SegmentLabel","SegmentAlgorithmType","algorithmType","SegmentAlgorithmName","algorithmName","SegmentedPropertyCategoryCodeSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","SegmentedPropertyTypeCodeSequence","downloadSegmentation","generatedSegmentation","dataset","storeSegmentation","dataSource","promptResult","createReportDialogPrompt","action","generatedData","naturalizedReport","store","dicom","getConfig","DicomMetadataStore","addInstances","downloadRTSS","vtkUtils","vtkImageMarchingSquares","vtkDataArray","vtkImageData","classes","MetadataProvider","cornerstoneToolsEnums","reportBlob","objectUrl","URL","createObjectURL","window","location","warn","setBrushSize","toolNames","brushSize","Number","getToolGroupIds","setBrushSizeForToolGroup","toolName","setThresholdRange","toolGroup","getToolGroup","setToolConfiguration","strategySpecificConfiguration","THRESHOLD","threshold","definitions","loadSegmentationDisplaySetsForViewport","commandFn","defaultContext","Component","React","OHIFCornerstoneSEGViewport","props","fallback","getCommandsModule","getToolbarModule","toolbarService","evaluate","button","disabledText","getSegmentationRepresentations","disabled","className","getToolGroupForViewport","getToolNameForButton","hasTool","isPrimaryActive","includes","getActivePrimaryMouseButtonTool","isActive","getViewportModule","commandsManager","component","_extends","getSopClassHandlerModule","getHangingProtocolModule"],"sourceRoot":""}