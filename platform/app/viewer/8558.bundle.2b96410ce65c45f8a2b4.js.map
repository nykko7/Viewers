{"version":3,"file":"8558.bundle.2b96410ce65c45f8a2b4.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/StrategyCallbacks.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolBindings.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/AnnotationStyleStates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/WorkerTypes.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/id.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/loadRTStruct.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/getCommandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/index.tsx"],"sourcesContent":["var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Events;\n(function (Events) {\n    Events[\"TOOL_ACTIVATED\"] = \"CORNERSTONE_TOOLS_TOOL_ACTIVATED\";\n    Events[\"TOOLGROUP_VIEWPORT_ADDED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_ADDED\";\n    Events[\"TOOLGROUP_VIEWPORT_REMOVED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_REMOVED\";\n    Events[\"TOOL_MODE_CHANGED\"] = \"CORNERSTONE_TOOLS_TOOL_MODE_CHANGED\";\n    Events[\"ANNOTATION_ADDED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_ADDED\";\n    Events[\"ANNOTATION_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_COMPLETED\";\n    Events[\"ANNOTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_MODIFIED\";\n    Events[\"ANNOTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_REMOVED\";\n    Events[\"ANNOTATION_SELECTION_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE\";\n    Events[\"ANNOTATION_LOCK_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE\";\n    Events[\"ANNOTATION_VISIBILITY_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE\";\n    Events[\"ANNOTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_RENDERED\";\n    Events[\"ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\";\n    Events[\"INTERPOLATED_ANNOTATIONS_REMOVED\"] = \"CORNERSTONE_TOOLS_INTERPOLATED_ANNOTATIONS_REMOVED\";\n    Events[\"SEGMENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_RENDERED\";\n    Events[\"SEGMENTATION_REPRESENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_ADDED\";\n    Events[\"SEGMENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_ADDED\";\n    Events[\"SEGMENTATION_REPRESENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REMOVED\";\n    Events[\"SEGMENTATION_REPRESENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED\";\n    Events[\"SEGMENTATION_DATA_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED\";\n    Events[\"KEY_DOWN\"] = \"CORNERSTONE_TOOLS_KEY_DOWN\";\n    Events[\"KEY_UP\"] = \"CORNERSTONE_TOOLS_KEY_UP\";\n    Events[\"MOUSE_DOWN\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN\";\n    Events[\"MOUSE_UP\"] = \"CORNERSTONE_TOOLS_MOUSE_UP\";\n    Events[\"MOUSE_DOWN_ACTIVATE\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE\";\n    Events[\"MOUSE_DRAG\"] = \"CORNERSTONE_TOOLS_MOUSE_DRAG\";\n    Events[\"MOUSE_MOVE\"] = \"CORNERSTONE_TOOLS_MOUSE_MOVE\";\n    Events[\"MOUSE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_CLICK\";\n    Events[\"MOUSE_DOUBLE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK\";\n    Events[\"MOUSE_WHEEL\"] = \"CORNERSTONE_TOOLS_MOUSE_WHEEL\";\n    Events[\"TOUCH_START\"] = \"CORNERSTONE_TOOLS_TOUCH_START\";\n    Events[\"TOUCH_START_ACTIVATE\"] = \"CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE\";\n    Events[\"TOUCH_PRESS\"] = \"CORNERSTONE_TOOLS_TOUCH_PRESS\";\n    Events[\"TOUCH_DRAG\"] = \"CORNERSTONE_TOOLS_TOUCH_DRAG\";\n    Events[\"TOUCH_END\"] = \"CORNERSTONE_TOOLS_TOUCH_END\";\n    Events[\"TOUCH_TAP\"] = \"CORNERSTONE_TOOLS_TAP\";\n    Events[\"TOUCH_SWIPE\"] = \"CORNERSTONE_TOOLS_SWIPE\";\n})(Events || (Events = {}));\nexport default Events;\n","var SegmentationRepresentations;\n(function (SegmentationRepresentations) {\n    SegmentationRepresentations[\"Labelmap\"] = \"Labelmap\";\n    SegmentationRepresentations[\"Contour\"] = \"Contour\";\n    SegmentationRepresentations[\"Surface\"] = \"Surface\";\n})(SegmentationRepresentations || (SegmentationRepresentations = {}));\nexport default SegmentationRepresentations;\n","var StrategyCallbacks;\n(function (StrategyCallbacks) {\n    StrategyCallbacks[\"OnInteractionStart\"] = \"onInteractionStart\";\n    StrategyCallbacks[\"OnInteractionEnd\"] = \"onInteractionEnd\";\n    StrategyCallbacks[\"Preview\"] = \"preview\";\n    StrategyCallbacks[\"RejectPreview\"] = \"rejectPreview\";\n    StrategyCallbacks[\"AcceptPreview\"] = \"acceptPreview\";\n    StrategyCallbacks[\"Fill\"] = \"fill\";\n    StrategyCallbacks[\"StrategyFunction\"] = \"strategyFunction\";\n    StrategyCallbacks[\"CreateIsInThreshold\"] = \"createIsInThreshold\";\n    StrategyCallbacks[\"Initialize\"] = \"initialize\";\n    StrategyCallbacks[\"INTERNAL_setValue\"] = \"setValue\";\n    StrategyCallbacks[\"ComputeInnerCircleRadius\"] = \"computeInnerCircleRadius\";\n})(StrategyCallbacks || (StrategyCallbacks = {}));\nexport default StrategyCallbacks;\n","var MouseBindings;\n(function (MouseBindings) {\n    MouseBindings[MouseBindings[\"Primary\"] = 1] = \"Primary\";\n    MouseBindings[MouseBindings[\"Secondary\"] = 2] = \"Secondary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary\"] = 3] = \"Primary_And_Secondary\";\n    MouseBindings[MouseBindings[\"Auxiliary\"] = 4] = \"Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Auxiliary\"] = 5] = \"Primary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Secondary_And_Auxiliary\"] = 6] = \"Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary_And_Auxiliary\"] = 7] = \"Primary_And_Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Fourth_Button\"] = 8] = \"Fourth_Button\";\n    MouseBindings[MouseBindings[\"Fifth_Button\"] = 16] = \"Fifth_Button\";\n    MouseBindings[MouseBindings[\"Wheel\"] = 524288] = \"Wheel\";\n    MouseBindings[MouseBindings[\"Wheel_Primary\"] = 524289] = \"Wheel_Primary\";\n})(MouseBindings || (MouseBindings = {}));\nvar KeyboardBindings;\n(function (KeyboardBindings) {\n    KeyboardBindings[KeyboardBindings[\"Shift\"] = 16] = \"Shift\";\n    KeyboardBindings[KeyboardBindings[\"Ctrl\"] = 17] = \"Ctrl\";\n    KeyboardBindings[KeyboardBindings[\"Alt\"] = 18] = \"Alt\";\n    KeyboardBindings[KeyboardBindings[\"Meta\"] = 91] = \"Meta\";\n    KeyboardBindings[KeyboardBindings[\"ShiftCtrl\"] = 1617] = \"ShiftCtrl\";\n    KeyboardBindings[KeyboardBindings[\"ShiftAlt\"] = 1618] = \"ShiftAlt\";\n    KeyboardBindings[KeyboardBindings[\"ShiftMeta\"] = 1691] = \"ShiftMeta\";\n    KeyboardBindings[KeyboardBindings[\"CtrlAlt\"] = 1718] = \"CtrlAlt\";\n    KeyboardBindings[KeyboardBindings[\"CtrlMeta\"] = 1791] = \"CtrlMeta\";\n    KeyboardBindings[KeyboardBindings[\"AltMeta\"] = 1891] = \"AltMeta\";\n})(KeyboardBindings || (KeyboardBindings = {}));\nexport { MouseBindings, KeyboardBindings };\n","var ToolModes;\n(function (ToolModes) {\n    ToolModes[\"Active\"] = \"Active\";\n    ToolModes[\"Passive\"] = \"Passive\";\n    ToolModes[\"Enabled\"] = \"Enabled\";\n    ToolModes[\"Disabled\"] = \"Disabled\";\n})(ToolModes || (ToolModes = {}));\nexport default ToolModes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","var AnnotationStyleStates;\n(function (AnnotationStyleStates) {\n    AnnotationStyleStates[\"Default\"] = \"\";\n    AnnotationStyleStates[\"Highlighted\"] = \"Highlighted\";\n    AnnotationStyleStates[\"Selected\"] = \"Selected\";\n    AnnotationStyleStates[\"Locked\"] = \"Locked\";\n    AnnotationStyleStates[\"AutoGenerated\"] = \"AutoGenerated\";\n})(AnnotationStyleStates || (AnnotationStyleStates = {}));\nexport default AnnotationStyleStates;\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_LABELMAP\"] = \"Converting Contour to Labelmap\";\n    ChangeTypes[\"POLYSEG_SURFACE_TO_LABELMAP\"] = \"Converting Surfaces to Labelmap\";\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_SURFACE\"] = \"Converting Contour to Surface\";\n    ChangeTypes[\"POLYSEG_LABELMAP_TO_SURFACE\"] = \"Converting Labelmap to Surface\";\n    ChangeTypes[\"SURFACE_CLIPPING\"] = \"Clipping Surfaces\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-rt';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import dcmjs from 'dcmjs';\nconst { DicomMessage, DicomMetaDictionary } = dcmjs.data;\nconst dicomlab2RGB = dcmjs.data.Colors.dicomlab2RGB;\n\nasync function checkAndLoadContourData(instance, datasource) {\n  if (!instance || !instance.ROIContourSequence) {\n    return Promise.reject('Invalid instance object or ROIContourSequence');\n  }\n\n  const promisesMap = new Map();\n\n  for (const ROIContour of instance.ROIContourSequence) {\n    const referencedROINumber = ROIContour.ReferencedROINumber;\n    if (!ROIContour || !ROIContour.ContourSequence) {\n      promisesMap.set(referencedROINumber, [Promise.resolve([])]);\n      continue;\n    }\n\n    for (const Contour of ROIContour.ContourSequence) {\n      if (!Contour || !Contour.ContourData) {\n        return Promise.reject('Invalid Contour or ContourData');\n      }\n\n      const contourData = Contour.ContourData;\n\n      if (Array.isArray(contourData)) {\n        promisesMap.has(referencedROINumber)\n          ? promisesMap.get(referencedROINumber).push(Promise.resolve(contourData))\n          : promisesMap.set(referencedROINumber, [Promise.resolve(contourData)]);\n      } else if (contourData && contourData.BulkDataURI) {\n        const bulkDataURI = contourData.BulkDataURI;\n\n        if (!datasource || !datasource.retrieve || !datasource.retrieve.bulkDataURI) {\n          return Promise.reject('Invalid datasource object or retrieve function');\n        }\n\n        const bulkDataPromise = datasource.retrieve.bulkDataURI({\n          BulkDataURI: bulkDataURI,\n          StudyInstanceUID: instance.StudyInstanceUID,\n          SeriesInstanceUID: instance.SeriesInstanceUID,\n          SOPInstanceUID: instance.SOPInstanceUID,\n        });\n\n        promisesMap.has(referencedROINumber)\n          ? promisesMap.get(referencedROINumber).push(bulkDataPromise)\n          : promisesMap.set(referencedROINumber, [bulkDataPromise]);\n      } else {\n        return Promise.reject(`Invalid ContourData: ${contourData}`);\n      }\n    }\n  }\n\n  const resolvedPromisesMap = new Map();\n  for (const [key, promiseArray] of promisesMap.entries()) {\n    resolvedPromisesMap.set(key, await Promise.allSettled(promiseArray));\n  }\n\n  instance.ROIContourSequence.forEach(ROIContour => {\n    try {\n      const referencedROINumber = ROIContour.ReferencedROINumber;\n      const resolvedPromises = resolvedPromisesMap.get(referencedROINumber);\n\n      if (ROIContour.ContourSequence) {\n        ROIContour.ContourSequence.forEach((Contour, index) => {\n          const promise = resolvedPromises[index];\n          if (promise.status === 'fulfilled') {\n            if (Array.isArray(promise.value) && promise.value.every(Number.isFinite)) {\n              // If promise.value is already an array of numbers, use it directly\n              Contour.ContourData = promise.value;\n            } else {\n              // If the resolved promise value is a byte array (Blob), it needs to be decoded\n              const uint8Array = new Uint8Array(promise.value);\n              const textDecoder = new TextDecoder();\n              const dataUint8Array = textDecoder.decode(uint8Array);\n              if (typeof dataUint8Array === 'string' && dataUint8Array.includes('\\\\')) {\n                Contour.ContourData = dataUint8Array.split('\\\\').map(parseFloat);\n              } else {\n                Contour.ContourData = [];\n              }\n            }\n          } else {\n            console.error(promise.reason);\n          }\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  });\n}\n\nexport default async function loadRTStruct(extensionManager, rtStructDisplaySet, headers) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n  const dataSource = extensionManager.getActiveDataSource()[0];\n  const { bulkDataURI } = dataSource.getConfig?.() || {};\n\n  const { dicomLoaderService } = utilityModule.exports;\n\n  // Set here is loading is asynchronous.\n  // If this function throws its set back to false.\n  rtStructDisplaySet.isLoaded = true;\n  let instance = rtStructDisplaySet.instance;\n\n  if (!bulkDataURI || !bulkDataURI.enabled) {\n    const segArrayBuffer = await dicomLoaderService.findDicomDataPromise(\n      rtStructDisplaySet,\n      null,\n      headers\n    );\n\n    const dicomData = DicomMessage.readFile(segArrayBuffer);\n    const rtStructDataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\n    rtStructDataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n    instance = rtStructDataset;\n  } else {\n    await checkAndLoadContourData(instance, dataSource);\n  }\n\n  const { StructureSetROISequence, ROIContourSequence, RTROIObservationsSequence } = instance;\n\n  // Define our structure set entry and add it to the rtstruct module state.\n  const structureSet = {\n    StructureSetLabel: instance.StructureSetLabel,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    ROIContours: [],\n    visible: true,\n  };\n\n  for (let i = 0; i < ROIContourSequence.length; i++) {\n    const ROIContour = ROIContourSequence[i];\n    const { ContourSequence } = ROIContour;\n\n    if (!ContourSequence) {\n      continue;\n    }\n\n    const isSupported = false;\n\n    const ContourSequenceArray = _toArray(ContourSequence);\n\n    const contourPoints = [];\n    for (let c = 0; c < ContourSequenceArray.length; c++) {\n      const { ContourData, NumberOfContourPoints, ContourGeometricType } = ContourSequenceArray[c];\n\n      let isSupported = false;\n\n      const points = [];\n      for (let p = 0; p < NumberOfContourPoints * 3; p += 3) {\n        points.push({\n          x: ContourData[p],\n          y: ContourData[p + 1],\n          z: ContourData[p + 2],\n        });\n      }\n\n      switch (ContourGeometricType) {\n        case 'CLOSED_PLANAR':\n        case 'OPEN_PLANAR':\n        case 'POINT':\n          isSupported = true;\n\n          break;\n        default:\n          continue;\n      }\n\n      contourPoints.push({\n        numberOfPoints: NumberOfContourPoints,\n        points,\n        type: ContourGeometricType,\n        isSupported,\n      });\n    }\n\n    _setROIContourMetadata(\n      structureSet,\n      StructureSetROISequence,\n      RTROIObservationsSequence,\n      ROIContour,\n      contourPoints,\n      isSupported\n    );\n  }\n  return structureSet;\n}\n\nfunction _setROIContourMetadata(\n  structureSet,\n  StructureSetROISequence,\n  RTROIObservationsSequence,\n  ROIContour,\n  contourPoints,\n  isSupported\n) {\n  const StructureSetROI = StructureSetROISequence.find(\n    structureSetROI => structureSetROI.ROINumber === ROIContour.ReferencedROINumber\n  );\n\n  const ROIContourData = {\n    ROINumber: StructureSetROI.ROINumber,\n    ROIName: StructureSetROI.ROIName,\n    ROIGenerationAlgorithm: StructureSetROI.ROIGenerationAlgorithm,\n    ROIDescription: StructureSetROI.ROIDescription,\n    isSupported,\n    contourPoints,\n    visible: true,\n  };\n\n  _setROIContourDataColor(ROIContour, ROIContourData);\n\n  if (RTROIObservationsSequence) {\n    // If present, add additional RTROIObservations metadata.\n    _setROIContourRTROIObservations(\n      ROIContourData,\n      RTROIObservationsSequence,\n      ROIContour.ReferencedROINumber\n    );\n  }\n\n  structureSet.ROIContours.push(ROIContourData);\n}\n\nfunction _setROIContourDataColor(ROIContour, ROIContourData) {\n  let { ROIDisplayColor, RecommendedDisplayCIELabValue } = ROIContour;\n\n  if (!ROIDisplayColor && RecommendedDisplayCIELabValue) {\n    // If ROIDisplayColor is absent, try using the RecommendedDisplayCIELabValue color.\n    ROIDisplayColor = dicomlab2RGB(RecommendedDisplayCIELabValue);\n  }\n\n  if (ROIDisplayColor) {\n    ROIContourData.colorArray = [...ROIDisplayColor];\n  }\n}\n\nfunction _setROIContourRTROIObservations(ROIContourData, RTROIObservationsSequence, ROINumber) {\n  const RTROIObservations = RTROIObservationsSequence.find(\n    RTROIObservations => RTROIObservations.ReferencedROINumber === ROINumber\n  );\n\n  if (RTROIObservations) {\n    // Deep copy so we don't keep the reference to the dcmjs dataset entry.\n    const { ObservationNumber, ROIObservationDescription, RTROIInterpretedType, ROIInterpreter } =\n      RTROIObservations;\n\n    ROIContourData.RTROIObservations = {\n      ObservationNumber,\n      ROIObservationDescription,\n      RTROIInterpretedType,\n      ROIInterpreter,\n    };\n  }\n}\n\nfunction _toArray(objOrArray) {\n  return Array.isArray(objOrArray) ? objOrArray : [objOrArray];\n}\n","import { utils } from '@ohif/core';\n\nimport { SOPClassHandlerId } from './id';\nimport loadRTStruct from './loadRTStruct';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.481.3'];\n\nconst loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager\n) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'RTSTRUCT',\n    loading: false,\n    isReconstructable: false, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    structureSet: null,\n    sopClassUids,\n    instance,\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  let referencedSeriesSequence = instance.ReferencedSeriesSequence;\n  if (instance.ReferencedFrameOfReferenceSequence && !instance.ReferencedSeriesSequence) {\n    instance.ReferencedSeriesSequence = _deriveReferencedSeriesSequenceFromFrameOfReferenceSequence(\n      instance.ReferencedFrameOfReferenceSequence\n    );\n    referencedSeriesSequence = instance.ReferencedSeriesSequence;\n  }\n\n  if (!referencedSeriesSequence) {\n    throw new Error('ReferencedSeriesSequence is missing for the RTSTRUCT');\n  }\n\n  const referencedSeries = referencedSeriesSequence[0];\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  const { displaySetService } = servicesManager.services;\n  const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n    displaySet.referencedSeriesInstanceUID\n  );\n\n  if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n    // Instead of throwing error, subscribe to display sets added\n    const { unsubscribe } = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\n      ({ displaySetsAdded }) => {\n        const addedDisplaySet = displaySetsAdded[0];\n        if (addedDisplaySet.SeriesInstanceUID === displaySet.referencedSeriesInstanceUID) {\n          displaySet.referencedDisplaySetInstanceUID = addedDisplaySet.displaySetInstanceUID;\n          unsubscribe();\n        }\n      }\n    );\n  } else {\n    const referencedDisplaySet = referencedDisplaySets[0];\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n  }\n\n  displaySet.load = ({ headers }) => _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(rtDisplaySet, servicesManager: AppTypes.ServicesManager, extensionManager, headers) {\n  const { SOPInstanceUID } = rtDisplaySet;\n  const { segmentationService } = servicesManager.services;\n  if (\n    (rtDisplaySet.loading || rtDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExistsInCache(rtDisplaySet, segmentationService)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  rtDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (!rtDisplaySet.structureSet) {\n      const structureSet = await loadRTStruct(extensionManager, rtDisplaySet, headers);\n\n      rtDisplaySet.structureSet = structureSet;\n    }\n\n    segmentationService\n      .createSegmentationForRTDisplaySet(rtDisplaySet)\n      .then(() => {\n        rtDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        rtDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nfunction _deriveReferencedSeriesSequenceFromFrameOfReferenceSequence(\n  ReferencedFrameOfReferenceSequence\n) {\n  const ReferencedSeriesSequence = [];\n\n  ReferencedFrameOfReferenceSequence.forEach(referencedFrameOfReference => {\n    const { RTReferencedStudySequence } = referencedFrameOfReference;\n\n    RTReferencedStudySequence.forEach(rtReferencedStudy => {\n      const { RTReferencedSeriesSequence } = rtReferencedStudy;\n\n      RTReferencedSeriesSequence.forEach(rtReferencedSeries => {\n        const ReferencedInstanceSequence = [];\n        const { ContourImageSequence, SeriesInstanceUID } = rtReferencedSeries;\n\n        ContourImageSequence.forEach(contourImage => {\n          ReferencedInstanceSequence.push({\n            ReferencedSOPInstanceUID: contourImage.ReferencedSOPInstanceUID,\n            ReferencedSOPClassUID: contourImage.ReferencedSOPClassUID,\n          });\n        });\n\n        const referencedSeries = {\n          SeriesInstanceUID,\n          ReferencedInstanceSequence,\n        };\n\n        ReferencedSeriesSequence.push(referencedSeries);\n      });\n    });\n  });\n\n  return ReferencedSeriesSequence;\n}\n\nfunction _segmentationExistsInCache(\n  rtDisplaySet,\n  segmentationService: AppTypes.SegmentationService\n) {\n  // Todo: fix this\n  return false;\n  // This should be abstracted with the CornerstoneCacheService\n  const rtContourId = rtDisplaySet.displaySetInstanceUID;\n  const contour = segmentationService.getContour(rtContourId);\n\n  return contour !== undefined;\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  return [\n    {\n      name: 'dicom-rt',\n      sopClassUids,\n      getDisplaySetsFromSeries: instances => {\n        return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n      },\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import { SegmentationRepresentations } from '@cornerstonejs/tools/enums';\n\nconst commandsModule = ({ commandsManager, servicesManager }: withAppTypes) => {\n  const services = servicesManager.services;\n  const { displaySetService, viewportGridService } = services;\n\n  const actions = {\n    hydrateRTSDisplaySet: ({ displaySet, viewportId }) => {\n      if (displaySet.Modality !== 'RTSTRUCT') {\n        throw new Error('Display set is not an RTSTRUCT');\n      }\n\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(\n        displaySet.referencedDisplaySetInstanceUID\n      );\n\n      // update the previously stored segmentationPresentation with the new viewportId\n      // presentation so that when we put the referencedDisplaySet back in the viewport\n      // it will have the correct segmentation representation hydrated\n      commandsManager.runCommand('updateStoredSegmentationPresentation', {\n        displaySet: displaySet,\n        type: SegmentationRepresentations.Contour,\n      });\n\n      // update the previously stored positionPresentation with the new viewportId\n      // presentation so that when we put the referencedDisplaySet back in the viewport\n      // it will be in the correct position zoom and pan\n      commandsManager.runCommand('updateStoredPositionPresentation', {\n        viewportId,\n        displaySetInstanceUID: referencedDisplaySet.displaySetInstanceUID,\n      });\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId,\n        displaySetInstanceUIDs: [referencedDisplaySet.displaySetInstanceUID],\n      });\n    },\n  };\n\n  const definitions = {\n    hydrateRTSDisplaySet: {\n      commandFn: actions.hydrateRTSDisplaySet,\n      storeContexts: [],\n      options: {},\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'cornerstone-dicom-rt',\n  };\n};\n\nexport default commandsModule;\n","import { id } from './id';\nimport React from 'react';\nimport { Types } from '@ohif/core';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport getCommandsModule from './getCommandsModule';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneRTViewport');\n});\n\nconst OHIFCornerstoneRTViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension: Types.Extensions.Extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n  getCommandsModule,\n\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getViewportModule({\n    servicesManager,\n    extensionManager,\n    commandsManager,\n  }: Types.Extensions.ExtensionParams) {\n    const ExtendedOHIFCornerstoneRTViewport = props => {\n      return (\n        <OHIFCornerstoneRTViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-rt', component: ExtendedOHIFCornerstoneRTViewport }];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n};\n\nexport default extension;\n"],"names":["ChangeTypes","Events","SegmentationRepresentations","StrategyCallbacks","MouseBindings","KeyboardBindings","ToolModes","Swipe","AnnotationStyleStates","id","packageJson","SOPClassHandlerId","DicomMessage","DicomMetaDictionary","dcmjs","dicomlab2RGB","Colors","async","loadRTStruct","extensionManager","rtStructDisplaySet","headers","utilityModule","getModuleEntry","dataSource","getActiveDataSource","bulkDataURI","getConfig","dicomLoaderService","exports","isLoaded","instance","enabled","datasource","ROIContourSequence","Promise","reject","promisesMap","Map","ROIContour","referencedROINumber","ReferencedROINumber","ContourSequence","Contour","ContourData","contourData","Array","isArray","has","get","push","resolve","set","BulkDataURI","retrieve","bulkDataPromise","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","resolvedPromisesMap","key","promiseArray","entries","allSettled","forEach","resolvedPromises","index","promise","status","value","every","Number","isFinite","uint8Array","Uint8Array","dataUint8Array","TextDecoder","decode","includes","split","map","parseFloat","console","error","reason","checkAndLoadContourData","segArrayBuffer","findDicomDataPromise","dicomData","readFile","rtStructDataset","naturalizeDataset","dict","_meta","namifyDataset","meta","StructureSetROISequence","RTROIObservationsSequence","structureSet","StructureSetLabel","ROIContours","visible","i","length","isSupported","ContourSequenceArray","objOrArray","contourPoints","c","NumberOfContourPoints","ContourGeometricType","points","p","x","y","z","numberOfPoints","type","_setROIContourMetadata","StructureSetROI","find","structureSetROI","ROINumber","ROIContourData","ROIName","ROIGenerationAlgorithm","ROIDescription","ROIDisplayColor","RecommendedDisplayCIELabValue","colorArray","_setROIContourDataColor","RTROIObservations","ObservationNumber","ROIObservationDescription","RTROIInterpretedType","ROIInterpreter","_setROIContourRTROIObservations","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isHydrated","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","ReferencedFrameOfReferenceSequence","referencedFrameOfReference","RTReferencedStudySequence","rtReferencedStudy","RTReferencedSeriesSequence","rtReferencedSeries","ReferencedInstanceSequence","ContourImageSequence","contourImage","ReferencedSOPInstanceUID","ReferencedSOPClassUID","referencedSeries","_deriveReferencedSeriesSequenceFromFrameOfReferenceSequence","Error","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","referencedDisplaySet","unsubscribe","subscribe","EVENTS","DISPLAY_SETS_ADDED","displaySetsAdded","addedDisplaySet","load","rtDisplaySet","segmentationService","createSegmentationForRTDisplaySet","then","catch","_load","name","getDisplaySetsFromSeries","commandsModule","commandsManager","viewportGridService","actions","hydrateRTSDisplaySet","viewportId","getDisplaySetByUID","runCommand","setDisplaySetsForViewport","displaySetInstanceUIDs","definitions","commandFn","storeContexts","options","defaultContext","Component","React","OHIFCornerstoneRTViewport","props","fallback","getCommandsModule","getViewportModule","component","_extends","getSopClassHandlerModule"],"sourceRoot":""}